[{"/home/snow/Documentos/ico-web-final/src/index.js":"1","/home/snow/Documentos/ico-web-final/src/App.js":"2","/home/snow/Documentos/ico-web-final/src/i18n.js":"3","/home/snow/Documentos/ico-web-final/src/apis/SunshineFinder.js":"4","/home/snow/Documentos/ico-web-final/src/apis/CoingeckoFinder.js":"5","/home/snow/Documentos/ico-web-final/src/apis/PlacesFinder.js":"6","/home/snow/Documentos/ico-web-final/src/apis/TronscanFinder.js":"7","/home/snow/Documentos/ico-web-final/src/components/dashboard/DollarMarktComponent.jsx":"8","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Checkout.jsx":"9","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/AddressForm.jsx":"10","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/PaymentForm.jsx":"11","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Review.jsx":"12","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/TokenAmount.jsx":"13","/home/snow/Documentos/ico-web-final/src/components/dashboard/PaymentComponent.jsx":"14","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Dashboard.jsx":"15","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/HeaderCards.jsx":"16","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/CryptoList.jsx":"17","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/TransactionsHistory.jsx":"18","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Wallet.jsx":"19","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Profile.jsx":"20","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/ExpansionComponent.jsx":"21","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/UploadImage.jsx":"22","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/PersonalData.jsx":"23","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/VerifiedProfile.jsx":"24","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Settings.jsx":"25","/home/snow/Documentos/ico-web-final/src/components/dashboard/settings/ChangePassword.jsx":"26","/home/snow/Documentos/ico-web-final/src/components/dashboard/PurchaseHistoryComponent.jsx":"27","/home/snow/Documentos/ico-web-final/src/context/AuthContext.jsx":"28","/home/snow/Documentos/ico-web-final/src/config/Particles-config.js":"29","/home/snow/Documentos/ico-web-final/src/components/PasswordRecoveryModal.jsx":"30","/home/snow/Documentos/ico-web-final/src/components/SignUpModal.jsx":"31","/home/snow/Documentos/ico-web-final/src/components/SignInModal.jsx":"32","/home/snow/Documentos/ico-web-final/src/components/dashboard/js/canvasUtils.js":"33","/home/snow/Documentos/ico-web-final/src/components/dashboard/js/encrypt.js":"34","/home/snow/Documentos/ico-web-final/src/components/Video.jsx":"35","/home/snow/Documentos/ico-web-final/src/components/Countdown.jsx":"36","/home/snow/Documentos/ico-web-final/src/components/Soporte.jsx":"37","/home/snow/Documentos/ico-web-final/src/components/PreguntasFrecuentes.jsx":"38","/home/snow/Documentos/ico-web-final/src/components/Newsletter.jsx":"39","/home/snow/Documentos/ico-web-final/src/components/Ventajas.jsx":"40","/home/snow/Documentos/ico-web-final/src/components/MapaApp.jsx":"41","/home/snow/Documentos/ico-web-final/src/components/WhitepaperHome.jsx":"42","/home/snow/Documentos/ico-web-final/src/routes/Home.jsx":"43","/home/snow/Documentos/ico-web-final/src/components/Banner.jsx":"44","/home/snow/Documentos/ico-web-final/src/components/Footer.jsx":"45","/home/snow/Documentos/ico-web-final/src/components/Navigation.jsx":"46","/home/snow/Documentos/ico-web-final/src/components/ProyectosComponent.jsx":"47","/home/snow/Documentos/ico-web-final/src/routes/Proyectos.jsx":"48","/home/snow/Documentos/ico-web-final/src/config/firebase.js":"49","/home/snow/Documentos/ico-web-final/src/routes/Roaptomap.jsx":"50","/home/snow/Documentos/ico-web-final/src/components/Carousel.jsx":"51","/home/snow/Documentos/ico-web-final/src/routes/Pdf.jsx":"52","/home/snow/Documentos/ico-web-final/src/components/Loader.jsx":"53","/home/snow/Documentos/ico-web-final/src/components/ControlPanel.jsx":"54","/home/snow/Documentos/ico-web-final/src/routes/Acerca.jsx":"55","/home/snow/Documentos/ico-web-final/src/components/CardsWorkers.jsx":"56","/home/snow/Documentos/ico-web-final/src/js/mostrarmenu.js":"57","/home/snow/Documentos/ico-web-final/src/js/cuentaregresiva.js":"58","/home/snow/Documentos/ico-web-final/src/context/CheckoutContext.jsx":"59"},{"size":296,"mtime":1626125393939,"results":"60","hashOfConfig":"61"},{"size":2152,"mtime":1627335575779,"results":"62","hashOfConfig":"61"},{"size":1645,"mtime":1621626270725,"results":"63","hashOfConfig":"61"},{"size":139,"mtime":1626796331916,"results":"64","hashOfConfig":"61"},{"size":104,"mtime":1624906925521,"results":"65","hashOfConfig":"61"},{"size":113,"mtime":1624907114457,"results":"66","hashOfConfig":"61"},{"size":107,"mtime":1624907189001,"results":"67","hashOfConfig":"61"},{"size":3059,"mtime":1627329496339,"results":"68","hashOfConfig":"61"},{"size":14659,"mtime":1627402466617,"results":"69","hashOfConfig":"61"},{"size":3375,"mtime":1627397572365,"results":"70","hashOfConfig":"61"},{"size":2098,"mtime":1626973106435,"results":"71","hashOfConfig":"61"},{"size":16607,"mtime":1627402567349,"results":"72","hashOfConfig":"61"},{"size":5031,"mtime":1627399593373,"results":"73","hashOfConfig":"61"},{"size":2482,"mtime":1627334200259,"results":"74","hashOfConfig":"61"},{"size":3967,"mtime":1627329407263,"results":"75","hashOfConfig":"61"},{"size":2315,"mtime":1624565577152,"results":"76","hashOfConfig":"61"},{"size":3435,"mtime":1626971775723,"results":"77","hashOfConfig":"61"},{"size":9982,"mtime":1626971376539,"results":"78","hashOfConfig":"61"},{"size":26130,"mtime":1627323854435,"results":"79","hashOfConfig":"61"},{"size":18095,"mtime":1626974835663,"results":"80","hashOfConfig":"61"},{"size":2329,"mtime":1621626640957,"results":"81","hashOfConfig":"61"},{"size":7933,"mtime":1626975079703,"results":"82","hashOfConfig":"61"},{"size":15895,"mtime":1626973739863,"results":"83","hashOfConfig":"61"},{"size":9677,"mtime":1624909736393,"results":"84","hashOfConfig":"61"},{"size":2966,"mtime":1624909183293,"results":"85","hashOfConfig":"61"},{"size":10246,"mtime":1624565577904,"results":"86","hashOfConfig":"61"},{"size":14003,"mtime":1627329889611,"results":"87","hashOfConfig":"61"},{"size":1782,"mtime":1624909443333,"results":"88","hashOfConfig":"61"},{"size":2358,"mtime":1621626270673,"results":"89","hashOfConfig":"61"},{"size":3940,"mtime":1626895090227,"results":"90","hashOfConfig":"61"},{"size":27547,"mtime":1626896231859,"results":"91","hashOfConfig":"61"},{"size":16257,"mtime":1626895486171,"results":"92","hashOfConfig":"61"},{"size":2388,"mtime":1621626640957,"results":"93","hashOfConfig":"61"},{"size":317,"mtime":1621626640957,"results":"94","hashOfConfig":"61"},{"size":519,"mtime":1627326425543,"results":"95","hashOfConfig":"61"},{"size":1637,"mtime":1627326504643,"results":"96","hashOfConfig":"61"},{"size":1395,"mtime":1627326700175,"results":"97","hashOfConfig":"61"},{"size":2765,"mtime":1627326722047,"results":"98","hashOfConfig":"61"},{"size":529,"mtime":1627326740991,"results":"99","hashOfConfig":"61"},{"size":2970,"mtime":1627327057391,"results":"100","hashOfConfig":"61"},{"size":9387,"mtime":1627327002207,"results":"101","hashOfConfig":"61"},{"size":777,"mtime":1627327069423,"results":"102","hashOfConfig":"61"},{"size":1973,"mtime":1627326425399,"results":"103","hashOfConfig":"61"},{"size":2113,"mtime":1626893769443,"results":"104","hashOfConfig":"61"},{"size":8248,"mtime":1627327205939,"results":"105","hashOfConfig":"61"},{"size":9666,"mtime":1626894689183,"results":"106","hashOfConfig":"61"},{"size":11260,"mtime":1627326666227,"results":"107","hashOfConfig":"61"},{"size":430,"mtime":1627327279875,"results":"108","hashOfConfig":"61"},{"size":633,"mtime":1624990558028,"results":"109","hashOfConfig":"61"},{"size":1936,"mtime":1627327833699,"results":"110","hashOfConfig":"61"},{"size":2790,"mtime":1626894203323,"results":"111","hashOfConfig":"61"},{"size":1971,"mtime":1627327259979,"results":"112","hashOfConfig":"61"},{"size":449,"mtime":1624978343384,"results":"113","hashOfConfig":"61"},{"size":1821,"mtime":1626894229887,"results":"114","hashOfConfig":"61"},{"size":10790,"mtime":1627329171607,"results":"115","hashOfConfig":"61"},{"size":5481,"mtime":1626894015835,"results":"116","hashOfConfig":"61"},{"size":565,"mtime":1624910189605,"results":"117","hashOfConfig":"61"},{"size":1655,"mtime":1624916558231,"results":"118","hashOfConfig":"61"},{"size":1902,"mtime":1627402345833,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"11dj60e",{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"122"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"122"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"122"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":"160","usedDeprecatedRules":"122"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"122"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"122"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"122"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"122"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"122"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"122"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"122"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"122"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"122"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"122"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"122"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"122"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"122"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"122"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"250","usedDeprecatedRules":"122"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"122"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"122"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/snow/Documentos/ico-web-final/src/index.js",[],["261","262"],"/home/snow/Documentos/ico-web-final/src/App.js",[],"/home/snow/Documentos/ico-web-final/src/i18n.js",[],"/home/snow/Documentos/ico-web-final/src/apis/SunshineFinder.js",[],"/home/snow/Documentos/ico-web-final/src/apis/CoingeckoFinder.js",[],"/home/snow/Documentos/ico-web-final/src/apis/PlacesFinder.js",[],"/home/snow/Documentos/ico-web-final/src/apis/TronscanFinder.js",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/DollarMarktComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Checkout.jsx",["263","264"],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/AddressForm.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/PaymentForm.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Review.jsx",["265"],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/TokenAmount.jsx",["266"],"/home/snow/Documentos/ico-web-final/src/components/dashboard/PaymentComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/dashboard/Dashboard.jsx",["267"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\nimport moneda_dashboard from \"../../images/moneda-dashboard.svg\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DollarMarktComponent from \"../../components/dashboard/DollarMarktComponent\";\nimport PaymentComponent from \"../../components/dashboard/PaymentComponent\";\nimport {db} from \"../../config/firebase\";\nimport PurchaseHistoryComponent from \"../../components/dashboard/PurchaseHistoryComponent\";\nimport SunshineFinder from \"../../apis/SunshineFinder\";\n\nconst Dashboard = () => {\n    const {currentUser} = useAuth();\n    const [signinEmail, setSigninEmail] = useState(\"\");\n    const [uid, setUid] = useState(\"\");\n    const [amount, setAmount] = useState(0);\n    const [logged, setLogged] = useState(false);\n    const [userInfo, setUserInfo] = useState({});\n    const history = useHistory();\n\n    const getUserData = async(id) => {\n        try{\n            let docRef = db.collection('credentials').doc(id);\n            await docRef.onSnapshot(doc => {\n                if(doc.exists){\n                    setUserInfo(doc.data());\n                }\n            });\n            await SunshineFinder.get(\"/get-tuah\", {\n                params: {\n                    uid: id\n                }\n            }).then(response => {\n                setAmount(response.data.amount);\n            }).catch(e => {\n\n            });\n        } catch (e) {\n\n        }\n    }\n\n    useEffect(() => {\n        try{\n            let email = currentUser.email;\n            let id = currentUser.uid;\n            setSigninEmail(email);\n            setUid(id);\n            setLogged(true);\n            history.push(\"/\");\n            getUserData(id);\n        } catch (e) {\n\n            setSigninEmail(\"\");\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    },[currentUser]);\n\n\n    const renderData = () => {\n        if(logged && Object.keys(userInfo).length !== 0){\n            return (\n                <div className=\"container-fluid\">\n                    <div className=\"row mt-5\">\n\n                        <div className=\"col-12 mt-5 d-flex justify-content-center\">\n                            <img src={moneda_dashboard} className=\"img-fluid\" style={{width: 400}} alt=\"MONEDA-SUNSHINE\"/>\n                        </div>\n\n                        <div className=\"col-12 d-flex justify-content-center\">\n                            <h1>\n                                {signinEmail ? (amount.toString().slice(0, amount.toString().length-6) + \".\" + amount.toString().slice(amount.toString().length-6)) : \"Invitado\"}\n                                <br/>SUNIS</h1>\n                        </div>\n\n                        <div className=\"col-12 d-flex justify-content-center mt-5\">\n                            <button className=\"material\" data-toggle=\"modal\" data-target=\"#exampleModal\">Mercado de criptos<ExpandMoreIcon style={{ fontSize: 40 }} /> </button>\n                        </div>\n\n                        <div className=\"col-12\">\n                            <button className=\"btn material2 ml-3 mr-3\" data-toggle=\"modal\" data-target=\"#paymentModal\" data-backdrop='static' data-keyboard='false'>Comprar</button>\n                            <a className=\"btn material2 ml-3 mr-3\" href=\"Wallet\">Wallet</a>\n                        </div>\n\n                        <DollarMarktComponent />\n                        <PaymentComponent email={signinEmail} userData={uid} allData={userInfo} />\n\n                    </div>\n\n                    <div className=\"row mt-5\">\n                        <PurchaseHistoryComponent uid={uid} />\n                    </div>\n\n                </div>\n\n            )\n        } else {\n            return null\n        }\n    }\n\n    return (\n        <div className=\"container-fluid fondo-dashboard\">\n            {renderData()}\n        </div>\n    )\n\n};\n\nexport default Dashboard;","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/HeaderCards.jsx",["268"],"import React from \"react\";\n\n// reactstrap components\nimport { Card, CardBody, CardTitle, Container, Row, Col } from \"reactstrap\";\nimport NumberFormat from \"react-number-format\";\n\nconst Header = ({tokensNumber}) => {\n    return (\n        <>\n            <div className=\"header pb-8 pt-5 pt-md-8\" style={{backgroundColor: \"#ffffff\"}}>\n                <Container fluid>\n                    <div className=\"header-body\">\n                        {/* Card stats */}\n                        <Row>\n                            <Col lg=\"12\" xl=\"12\">\n                                <Card className=\"card-stats mb-4 mb-xl-0 bg-gradient-default\">\n                                    <CardBody>\n                                        <Row>\n                                            <div className=\"col\">\n                                                <CardTitle\n                                                    tag=\"h6\"\n                                                    className=\"text-uppercase text-muted mb-0 text-light\"\n                                                >\n                                                    Número de SUN tokens\n                                                </CardTitle>\n                                                <span className=\"h5 font-weight-bold mb-0 text-light\">\n                                                     {tokensNumber.toString().slice(0, tokensNumber.toString().length-6) + \".\" + tokensNumber.toString().slice(tokensNumber.toString().length-6)}\n                                                </span>\n                                            </div>\n                                            <Col className=\"col-auto\">\n                                                <div className=\"icon icon-shape bg-yellow text-white rounded-circle shadow\">\n                                                    <i className=\"fas fa-users\" />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </div>\n                </Container>\n            </div>\n        </>\n    );\n};\n\nexport default Header;\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/CryptoList.jsx",["269","270"],"import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Avatar from '@material-ui/core/Avatar';\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\n\n//Icons\nimport TRX from \"../../../images/cryptoicons/trx_icon.png\";\n\nexport default function CryptoList({tokensArray, allInfoTokens}) {\n    const classes = useStyles();\n\n    const columns = [\n        { id: 'icon', label: 'Icon', minWidth: 170 },\n        { id: 'name', label: 'Name', minWidth: 170 },\n        { id: 'abbr', label: 'ISO\\u00a0Code', minWidth: 100 },\n        {\n            id: 'value',\n            label: 'Size\\u00a0(km\\u00b2)',\n            minWidth: 170,\n            align: 'right',\n            format: (value, precision=6) => value / eval(\"1e\"+precision)\n        },\n    ];\n\n    return (\n        <Paper className={'bg-gradient-default shadow w-100'}>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableBody>\n                        {tokensArray.map((row, index) => {\n                            return (\n                                <TableRow hover tabIndex={-1} key={index}>\n                                    {columns.map((column) => {\n                                        let value1;\n                                        if(row.key === \"0000000\"){\n                                            value1 = {...row, ...{name: \"TRON\", abbr: \"TRX\", icon: <Avatar src={TRX}>$</Avatar>, precision: 6}}\n                                        } else{\n                                            try{\n                                                value1 = {...row, ...allInfoTokens[index], ...{icon: <Avatar src={`https://coin.top/production/upload/logo/${row.key}.png`}>$</Avatar>}}\n                                            } catch (e) {\n\n                                            }\n                                        }\n                                        const value = value1[column.id];\n                                        return (\n                                            <TableCell className={classes.text} key={column.id} align={column.align}>\n                                                {column.format && typeof value === 'number' ? column.format(value, value1[\"precision\"]) : value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 600,\n    },\n    orange: {\n        color: theme.palette.getContrastText(deepOrange[500]),\n        backgroundColor: deepOrange[500],\n    },\n    purple: {\n        color: theme.palette.getContrastText(deepPurple[500]),\n        backgroundColor: deepPurple[500],\n    },\n    text: {\n        color: \"white\"\n    }\n}));\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/TransactionsHistory.jsx",["271","272","273","274","275","276","277","278"],"import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { useTheme } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport DONE from '../../../images/done.png';\nimport TronscanFinder from \"../../../apis/TronscanFinder\";\n\nconst columns = [\n    { id: 'hash', label: 'Hash', minWidth: 170 },\n    { id: 'amount', label: 'Monto', minWidth: 100, format: (value) => value },\n    {\n        id: 'date',\n        label: 'Fecha/hora',\n        minWidth: 170,\n        align: 'right',\n        format: (value) => value,\n    },\n    {\n        id: 'block',\n        label: 'Bloque',\n        minWidth: 170,\n        align: 'right',\n    },\n    {\n        id: 'token',\n        label: 'Token',\n        minWidth: 170,\n        align: 'right',\n    },\n];\n\nfunction createData(hash, amount, date, block, token) {\n    return { hash, amount, date, block, token };\n}\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 440,\n    },\n});\n\nconst timeConverter = (UNIX_timestamp) => {\n    let a = new Date(UNIX_timestamp);\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    let year = a.getFullYear();\n    let month = months[a.getMonth()];\n    let date = a.getDate();\n    let hour = a.getHours();\n    let min = a.getMinutes();\n    let sec = a.getSeconds();\n    let time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n}\n\nconst formattedAmount = (amount= \"0\") => {\n    return amount.toString().slice(0, amount.toString().length-6) + \".\" + amount.toString().slice(amount.toString().length-6);\n}\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst  TransactionsHistory = ({address}) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [transactions, setTransactions] = useState([{}]);\n    const [allTransactions, setAllTransactions] = useState([{}]);\n\n    const[transactionDetails, setTransactionDetails] = useState({contractData: {}, tokenInfo: {}, });\n\n    const theme = useTheme();\n\n    useEffect(() => {\n        retrieveTransactions(address);\n    }, [address]);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const retrieveTransactions = async (walletAddress) => {\n        try{\n            const result = await TronscanFinder.get(`/api/transaction?sort=-timestamp&count=true&limit=50&start=0&address=${walletAddress}`);\n            let data = result.data.data;\n            let row = [];\n            await data.map(value => {\n                let decimal = value.tokenInfo.tokenDecimal;\n                row.push(createData(value.hash, value.toAddress === address ? value.contractData.amount / eval(\"1e\"+decimal) || 0 : - value.contractData.amount / eval(\"1e\"+decimal) || 0, timeConverter(value.timestamp), value.toAddress === address ? <Chip label=\"RECIBIDO\" color=\"primary\" /> : <Chip label=\"ENVIADO\" color=\"secondary\" />, (value.tokenInfo.tokenAbbr).toString().toUpperCase()));\n            })\n            await setTransactions(row);\n\n            await setAllTransactions(data);\n\n        } catch (e) {\n\n        }\n    }\n\n    const onClickTransactionDetails = (hash) => {\n        let result = allTransactions.find(element => element.hash === hash);\n        setTransactionDetails(result);\n        handleClickOpen();\n    }\n\n\n    return (\n        <>\n            <Paper className={classes.root}>\n                <TableContainer className={classes.container}>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        align={column.align}\n                                        style={{ minWidth: column.minWidth }}\n                                    >\n                                        {column.label}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>      \n                        <TableBody>\n                            {transactions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n                                return (\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n                                        {columns.map((column) => {\n                                            const value = row[column.id];\n                                            return (\n                                                <TableCell key={column.id} align={column.align}>\n                                                    {column.id !== \"hash\" ? column.format && typeof value === 'number' ? column.format(value) : value : <a className=\"btn btn-link\" onClick={e => onClickTransactionDetails(e.target.innerText)}>{value}</a>}\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={transactions.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">Detalles</DialogTitle>\n                <DialogContent>\n                    <DialogContentText component={\"div\"} id=\"alert-dialog-slide-description\">\n                        <div className=\"container-fluid\">\n\n\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <img src={DONE} className=\"img-fluid w-25 mb-4\" alt=\"\"/>\n                                </div>\n\n                                <strong>HASH:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p><a href={`https://tronscan.org/#/transaction/${transactionDetails.hash}`} target=\"_blank\">{transactionDetails.hash}</a> </p>\n                                </div>\n\n                                <strong>BLOQUE:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p><a href={`https://tronscan.org/#/block/${transactionDetails.block}`} target=\"_blank\">{transactionDetails.block}</a> </p>\n                                </div>\n\n                                <strong>EMISOR:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p>  {transactionDetails.contractData.owner_address}</p>\n                                </div>\n\n                                <strong>RECEPTOR:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p>   {transactionDetails.contractData.to_address}</p>\n                                </div>\n\n                                <strong>MONTO:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p> { formattedAmount(transactionDetails.contractData.amount) } <img src={transactionDetails.tokenInfo.tokenLogo} className=\"img-fluid\" style={{width: 20}} alt=\"\"/> ({transactionDetails.tokenInfo.tokenAbbr})</p>\n                                </div>\n\n                                <strong>FECHA:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p>   {timeConverter(transactionDetails.timestamp)}</p>\n                                </div>\n\n                            </div>\n\n                        </div>\n\n\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </>\n\n    );\n}\n\nexport default TransactionsHistory;","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Wallet.jsx",["279","280","281","282","283","284","285","286","287","288","289","290"],"import React, {useEffect, useState} from \"react\";\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    Container,\n    Row,\n    Col,\n} from \"reactstrap\";\n\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\n//OWN IMPORTATIONS\nimport \"../../components/dashboard/css/nucleo.css\";\nimport \"../../components/dashboard/scss/argon-dashboard-react.scss\";\nimport \"../../components/dashboard/checkout/css/style.css\";\nimport HeaderCards from \"../../components/dashboard/wallet/HeaderCards\";\nimport CryptoList from \"../../components/dashboard/wallet/CryptoList\";\nimport TransactionsHistory from \"../../components/dashboard/wallet/TransactionsHistory\";\n\n//MATERIAL IMPORTS\nimport TextField from '@material-ui/core/TextField';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport CropFreeIcon from '@material-ui/icons/CropFree';\n\n//QR UTILITIES IMPORTATIONS\nimport QRCode from \"react-qr-code\";\nimport QrReader from 'react-qr-reader'\nimport {db} from \"../../config/firebase\";\nimport swal from \"sweetalert\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport SunshineFinder from \"../../apis/SunshineFinder\";\nimport {Dialog, DialogActions, DialogContent, DialogTitle} from \"@material-ui/core\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\n\n\nconst Wallet = () => {\n\n    const {currentUser, logout} = useAuth();\n    const history = useHistory();\n    const [scannerOpen, setScannerOpen] = useState(false);\n    const [scanValue, setScanValue] = useState(\"\");\n    const [logged, setLogged] = useState(false);\n    const [uid, setUid] = useState(\"\");\n    const [amount, setAmount] = useState(0);\n    const [userInfo, setUserInfo] = useState({});\n    const [tokensToSend, setTokensToSend] = useState(0);\n    const [tokensArray, setTokensArray] = useState([{}]);\n    const [allInfoTokens, setAllInfoTokens] = useState([{}]);\n    //ESTO TIENE QUE IR EN EL BACKEND, AHORITA ES PARA HACER PRUEBAS RÁPIDO\n    const [tokenAddress, setTokenAddress] = useState(\"\");\n    const [tokenPrivateKey, setTokenPrivateKey] = useState(\"\");\n    const [open, setOpen] = useState(false);\n    const [smsCode, setSmsCode] = useState(\"\");\n    const [openSmsModal, setOpenSmsModal] = useState(false);\n    const [requestNewCode, setRequestNewCode] = useState(false);\n    const  [newCodeSeconds, setNewCodeSeconds] = useState(0);\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            let id = currentUser.uid;\n            setUid(id);\n            getUserData(id);\n            setLogged(true);\n            getData(id);\n        } catch (e) {\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    }, []);\n\n    const getUserData = async(id) => {\n        try{\n            let docRef = db.collection('credentials').doc(id);\n            await docRef.onSnapshot(doc => {\n                if(doc.exists){\n                    setUserInfo(doc.data());\n                    //setAmount(doc.data().suns);\n                }\n            });\n        } catch (e) {\n        }\n    }\n\n    const getData = async (id) => {\n        await SunshineFinder.get(\"/tron-data\", {\n            params: {\n                uid: id\n            }\n        }).then(response => {\n            setTokenAddress(response.data.tokenAddress);\n            if(response.data.tokensArray){\n                setTokensArray(response.data.tokensArray);\n                setAmount(response.data.tokensArray.find(element => element.key === \"1003948\").value);\n                setAllInfoTokens(response.data.allInfo);\n            }\n        }).catch(e => {\n        })\n    }\n\n    const clearFields = () => {\n        setTokensToSend(0);\n        setScanValue(\"\");\n    }\n\n    const sendTokens = async () => {\n        setOpen(true);\n        try {\n            const verifySMS = await SunshineFinder.post(\"/verify-number\", {uid, code: smsCode});\n            if(verifySMS.data.status){\n                const response = await SunshineFinder.post(\"/send-tokens\", {\n                    uid,\n                    amount: convertForSend(tokensToSend),\n                    toAddress: scanValue\n                });\n\n                if(response.data.sendTokenResponse === \"success\"){\n                    setOpenSmsModal(false);\n                    swal(\"Tokens enviados\", `Se cobraron ${tokensToSend} TUAH de tu cuenta y se depositaron a la dirección ${scanValue}, puedes ver la transacción en tu historial`, \"success\");\n                    await getData(uid);\n                    clearFields();\n                } else {\n                    throw response.data.sendTokenResponse.toString();\n                }\n            } else {\n                throw \"sms-incorrect\";\n            }\n        } catch (e) {\n            switch (e.message || e){\n                case \"success\":\n                    swal(\"Tokens enviados\", `Se cobraron ${tokensToSend} TUAH de tu cuenta y se depositaron a la dirección ${scanValue}, puedes ver la transacción en tu historial`, \"success\");\n                    clearFields();\n                    break;\n                case \"without-tuah\":\n                    swal(\"No cuentas con TUAH\", \"Tu wallet no cuenta con ningun TUAH por lo que no puedes enviar el monto indicado\", \"warning\");\n                    break;\n                case \"BANDWITH_ERROR\":\n                    swal(\"Error de ancho de banda\", \"La wallet a la que le quieres mandar TUAH no tiene suficiente ancho de banda \", \"warning\");\n                    break;\n                case \"tuah-not-found\":\n                    swal(\"TUAHS insuficientes\", \"No cuentas con la cantidad de TUAH suficiente para enviar el monto indicado\", \"warning\");\n                    break;\n                case \"invalid-address\":\n                    swal(\"Dirección invalida\", \"La dirección a la que le quieres mandar TUAH no existe o no se encuentra disponible\", \"warning\");\n                    break;\n                case \"Invalid count value\":\n                    swal(\"Monto invalido\", \"El monto ingresado no es válido, ingresa un monto de tipo 0.000000\", \"warning\");\n                    break;\n                case \"sms-incorrect\":\n                    swal(\"Código SMS inválido\", \"El código que ingresaste no coincide con el que te llegó al telefono proporcionado o caducó, intenta de nuevo\", \"warning\");\n                    break;\n                default:\n                    swal(\"Error inesperado\", \"Ocurrió un error inesperado, recarga la página o intenta de nuevo más tarde\", \"error\");\n            }\n        }\n        setOpen(false);\n    }\n\n    const enableRequestSms = () => {\n        setTimeout(() => {\n            setRequestNewCode(true);\n        }, 60000);\n    }\n\n    const startTimer = () => {\n        let timeleft = 60;\n        let downloadTimer = setInterval(() => {\n            timeleft--;\n            setNewCodeSeconds(timeleft);\n            if(timeleft <= 0)\n                clearInterval(downloadTimer);\n        },1000);\n    }\n\n    const sendSmsCode = async e => {\n        e.preventDefault();\n        setOpen(true);\n        try{\n            const sendSMS = await SunshineFinder.post(\"/send-sms\", {uid});\n            if(sendSMS.data.status){\n                setRequestNewCode(false);\n                setOpenSmsModal(true);\n                enableRequestSms();\n                startTimer();\n            } else {\n                throw \"sms-not-sended\";\n            }\n\n        } catch (e) {\n            switch (e.message || e){\n                case \"sms-not-sended\":\n                    swal(\"Código SMS inválido\", \"El código que ingresaste no coincide con el que te llegó al telefono proporcionado o caducó, intenta de nuevo\", \"warning\");\n                    clearFields();\n                    break;\n                default:\n                    swal(\"Error inesperado\", \"Ocurrió un error inesperado, recarga la página o intenta de nuevo más tarde\", \"error\");\n            }\n        }\n        await setOpen(false);\n        //CONECTARSE CON /send-tokens EN BACKEND Y MANDAR uid, amount, toAddress\n    }\n\n    const ReadQR = ({setScanValue}) => {\n\n        const [value, setValue] = useState(\"\");\n        const [facing2, setFacing]=useState(\"near\");\n\n        const handleError = (e) => {\n        }\n\n        if(value){\n            setScanValue(value);\n            document.getElementById(\"closeScanner\").click();\n            return null;\n        } else {\n\n            return (\n                    <QrReader\n                        delay={1000}\n                        style={{width: 350}}\n                        onError={handleError}\n                        onScan={data => {\n                            if(data){\n                                setValue(data)\n                            }\n                        }}\n                        facingMode=\"environment\"\n                    />\n            )\n        }\n    }\n\n    const convertForSend = (number) => {\n        try{\n            if(number > 0){\n                if(number % 1 === 0){\n                    // es entero\n                    return parseInt(number + \"0\".repeat(6));\n                } else {\n                    // es decimal\n                    let positionPoint = number.toString().indexOf(\".\");\n                    return (number + \"0\".repeat(6 - (number.toString().substring(positionPoint+1).length))).replace(\".\", \"\");\n                }\n            } else {\n                return number;\n            }\n        } catch (e) {\n        }\n\n    }\n\n    const classes = useStyles();\n\n    const renderWallet = () => {\n        if(logged){\n            return(\n                <div className=\"mt-5 mt-md-0 bodyWallet\">\n                    <a href=\"#\" type=\"button\" id=\"openScanner\" data-toggle=\"modal\"\n                       data-target=\"#exampleModalCenter\" />\n\n                    <div className=\"modal fade\" id=\"exampleModalCenter\" tabIndex=\"-1\" role=\"dialog\"\n                         aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\" data-backdrop=\"static\"\n                         data-keyboard=\"false\">\n                        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div className=\"modal-header\">\n                                    <button type=\"button\" onClick={() => {setScannerOpen(false)}} id=\"closeScanner\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span className=\"text-dark\" aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                </div>\n                                <div className=\"qr-modal-body d-flex justify-content-center\">\n                                    {scannerOpen ? <ReadQR setScanValue={setScanValue} /> : null}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <HeaderCards tokensNumber={amount}/>\n                    {/* Page content */}\n                    <Container className=\"mt--7\" fluid>\n                        <Row className=\"d-flex justify-content-center\">\n                            <Col className=\"mb-5 mb-xl-0\" xl=\"7\">\n                                <Card className=\"bg-gradient-default shadow\">\n                                    <CardHeader className=\"bg-transparent\">\n                                        <Row className=\"align-items-center\">\n                                            <div className=\"col-12\">\n                                                <p className=\"text-uppercase text-light mb-0\">\n                                                    Spot wallet\n                                                </p>\n                                                <h6 className=\"text-white mb-3\">SUN</h6>\n                                            </div>\n                                            <div className=\"col-12\">\n                                                <div className=\"nav-wrapper\">\n                                                    <ul className=\"nav nav-pills nav-fill flex-column flex-md-row\"\n                                                        id=\"tabs-icons-text\" role=\"tablist\">\n                                                        <li className=\"nav-item\">\n                                                            <a className=\"nav-link mb-sm-3 mb-md-0 active\"\n                                                               id=\"tabs-icons-text-1-tab\" data-toggle=\"tab\"\n                                                               href=\"#tabs-icons-text-1\" role=\"tab\"\n                                                               aria-controls=\"tabs-icons-text-1\"\n                                                               aria-selected=\"true\">Recibir</a>\n                                                        </li>\n                                                        <li className=\"nav-item\">\n                                                            <a className=\"nav-link mb-sm-3 mb-md-0\" id=\"tabs-icons-text-2-tab\"\n                                                               data-toggle=\"tab\" href=\"#tabs-icons-text-2\" role=\"tab\"\n                                                               aria-controls=\"tabs-icons-text-2\"\n                                                               aria-selected=\"false\">Enviar</a>\n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </Row>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <div className=\"card-body\">\n                                            <div className=\"tab-content\" id=\"myTabContent\">\n                                                <div className=\"tab-pane fade show active\" id=\"tabs-icons-text-1\"\n                                                     role=\"tabpanel\" aria-labelledby=\"tabs-icons-text-1-tab\">\n                                                    <div className=\"col-12 d-flex justify-content-center\">\n                                                        <div style={{borderColor: \"white\", border: \"solid\", backgroundColor: \"white\", width: \"min-content\"}}>\n                                                            <QRCode value={tokenAddress} />\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"col-12 mt-5\">\n                                                        <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                                            Wallet address\n                                                        </h6>\n                                                        <p className=\"text-light\">{tokenAddress}</p>\n                                                    </div>\n                                                </div>\n                                                <div className=\"tab-pane fade\" id=\"tabs-icons-text-2\" role=\"tabpanel\"\n                                                     aria-labelledby=\"tabs-icons-text-2-tab\">\n                                                    <form onSubmit={sendSmsCode}>\n\n                                                        <div className=\"container px-md-5\">\n                                                            <div className=\"row px-md-5\">\n\n                                                                <div className=\"col-12 mb-4 px-md-5\">\n                                                                    <FormControl fullWidth style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\", borderRadius: 4}} variant=\"filled\">\n                                                                        <InputLabel htmlFor=\"filled-adornment-password\">Dirección de destino</InputLabel>\n                                                                        <FilledInput\n                                                                            id=\"filled-adornment-password\"\n                                                                            required\n                                                                            type={'text'}\n                                                                            value={scanValue}\n                                                                            onChange={e => setScanValue(e.target.value)}\n                                                                            endAdornment={\n                                                                                <InputAdornment position=\"end\">\n                                                                                    <IconButton\n                                                                                        aria-label=\"toggle password visibility\"\n                                                                                        onClick={() => {\n                                                                                            setScannerOpen(true);\n                                                                                            document.getElementById(\"openScanner\").click();\n                                                                                        }}\n                                                                                        edge=\"end\"\n                                                                                    >\n                                                                                        <CropFreeIcon />\n                                                                                    </IconButton>\n                                                                                </InputAdornment>\n                                                                            }\n                                                                        />\n                                                                    </FormControl>\n                                                                </div>\n\n                                                                <div className=\"col-12 mb-4 px-md-5\">\n\n                                                                    <TextField\n                                                                        fullWidth\n                                                                        required\n                                                                        id=\"filled-basic\"\n                                                                        label=\"Cantidad (SUN):\"\n                                                                        value={tokensToSend}\n                                                                        onChange={e => {\n                                                                            if(tokensToSend === 0){\n                                                                                setTokensToSend(null);\n                                                                            }\n                                                                            setTokensToSend(e.target.value);\n\n                                                                        }}\n                                                                        variant=\"filled\"\n                                                                        style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\", borderRadius: 4}}\n                                                                    />\n\n                                                                </div>\n                                                            </div>\n\n                                                            <div className=\"row mt-2 px-md-5\">\n\n                                                                <div className=\"col-12 px-md-5 d-flex justify-content-start\">\n                                                                    <p className=\"text-light\">SUNS a enviar: <strong>{tokensToSend}</strong></p>\n                                                                </div>\n\n                                                                <div className=\"col-12 px-md-5 d-flex justify-content-start\">\n                                                                    <p className=\"text-light\">SUNS restantes:\n                                                                        <strong className={amount - convertForSend(tokensToSend) < 0 ? \"text-danger\" : \"\"}>\n                                                                            {(amount - convertForSend(tokensToSend)).toString().slice(0, (amount - convertForSend(tokensToSend)).toString().length-6) + \".\" + (amount - convertForSend(tokensToSend)).toString().slice((amount - tokensToSend).toString().length-6)}\n                                                                        </strong>\n                                                                    </p>\n                                                                </div>\n\n                                                                <div className=\"col-12 px-md-5 d-flex justify-content-start\">\n                                                                    <p className=\"text-danger\"><strong>{amount - convertForSend(tokensToSend) < 0 ? \"No tienes suficientes TUAH para mandar\" : \"\"}</strong></p>\n                                                                </div>\n\n                                                                <div className=\"col-12 px-md-5\">\n                                                                    <Divider light style={{backgroundColor: \"#FFFFFF\"}} />\n                                                                </div>\n                                                            </div>\n\n                                                            <div className=\"row mt-5 px-md-5\">\n                                                                <div className=\"col-12 px-md-5\">\n                                                                    <Button fullWidth variant=\"contained\" size=\"large\" type=\"submit\" style={{backgroundColor: \"#0655af\", color: \"white\"}}>\n                                                                        ENVIAR\n                                                                    </Button>\n                                                                </div>\n                                                            </div>\n\n                                                        </div>\n                                                    </form>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                            <Col className=\"mb-5 mb-xl-0\" xl=\"5\">\n                                <CryptoList tokensArray={tokensArray} allInfoTokens={allInfoTokens} />\n                            </Col>\n                        </Row>\n\n                        <Row className=\"d-flex justify-content-center\">\n                            <Col className=\"mb-5 mb-xl-0\" xl=\"12\">\n                                <TransactionsHistory address={tokenAddress}/>\n                            </Col>\n                        </Row>\n                    </Container>\n                    <Backdrop className={classes.backdrop} open={open} >\n                        <CircularProgress color=\"inherit\" />\n                    </Backdrop>\n\n\n                    <Dialog open={openSmsModal} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">Verificar código</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                Verifica el código que se envió a tu teléfono celular, si no llega en el lapso de 60 segundos puedes solicitar un nuevo código\n                            </DialogContentText>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"smscode\"\n                                label=\"Código\"\n                                type=\"number\"\n                                fullWidth\n                                value={smsCode}\n                                onChange={e => setSmsCode(e.target.value)}\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={requestNewCode ? sendSmsCode : null} disabled={!requestNewCode} color=\"primary\">\n                                PEDIR NUEVO CODIGO ({newCodeSeconds})\n                            </Button>\n                            <Button onClick={sendTokens} color=\"primary\">\n                                VERIFICAR\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n\n                </div>\n            )\n        } else {\n            return null;\n        }\n    }\n\n\n    return (\n        <>\n            {renderWallet()}\n        </>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default Wallet;\n","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Profile.jsx",["291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313"],"import 'date-fns';\nimport React, {useState, useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\nimport swal from \"sweetalert\";\nimport {db, useStorage} from \"../../config/firebase\";\nimport Alert from '@material-ui/lab/Alert';\nimport 'react-phone-input-2/lib/material.css'\nimport {Document, Page} from 'react-pdf';\nimport ExpansionComponent from \"../../components/dashboard/profile/ExpansionComponent\";\nimport PlacesFinder from \"../../apis/PlacesFinder\";\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Container,\n    Row,\n    Col,\n} from \"reactstrap\";\nimport UploadImage from \"../../components/dashboard/profile/UploadImage\";\nimport AVATAR from '../../images/avatardefault.png';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\n\nconst UserHeader = () => {\n    return (\n        <>\n            <div\n                className=\"header pb-8 pt-5 pt-lg-8 d-flex align-items-center\"\n                style={{\n                    minHeight: \"200px\",\n                    backgroundSize: \"cover\",\n                    backgroundPosition: \"center top\",\n                }}\n            >\n                {/* Mask */}\n                <span className=\"mask bg-gradient-default opacity-8\" />\n                {/* Header container */}\n            </div>\n        </>\n    );\n};\n\n\nconst Profile = () => {\n\n    const classes = useStyles();\n    const {currentUser, logout} = useAuth();\n    const [logged, setLogged] = useState(false);\n    const history = useHistory();\n    const [uid, setUid] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [lastname, setLastname] = useState(\"\");\n    const [birthday, setBirthday] = useState(\"\");\n    const [country, setCountry] = useState(\"\");\n    const [countryCompleteName, setCountryCompleteName] = useState(\"\");\n    const [stateLocation, setStateLocation] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [profileStatus, setProfileStatus] = useState(0);\n    const [doc, setDoc] = useState(\"\");\n    const [jalaPorfavor, setAuthToken] = useState(\"\");\n    const [countriesAPI, setCountriesAPI] = useState([]);\n    const [statesAPI, setStatesAPI] = useState([]);\n    const [citiesAPI, setCitiesAPI] = useState([]);\n    const [filePreview, setFilePreview] = useState([]);\n    const [fileFirestore, setFileFirestore] = useState(null);\n    const [uploadValue, setUploadValue] = useState(0);\n    const [fileObject, setFileObject] = useState(\"\");\n    const [profilePictureStatus, setProfilePictureStatus] = useState(0);\n    const [croppedImage, setCroppedImage] = useState(null);\n    const [image, setImage] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            let id = currentUser.uid;\n            if (!currentUser.emailVerified) {\n                setLogged(false);\n                logout();\n                history.push(\"/Home\");\n            } else {\n                setLogged(true);\n                history.push(\"/Profile\");\n                getUserData(id);\n                setUid(id);\n                getAuthTokenCountries().then(() => {\n                    getCountriesAPI();\n                });\n            }\n        } catch (e) {\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    }, [jalaPorfavor]);\n\n    const setFile = (e) => {\n        try {\n            const jpegImage = \"image/jpeg\";\n            const pngImage = \"image/png\";\n            const pdfDocument = \"application/pdf\";\n            const acceptedFiles = [jpegImage, pngImage, pdfDocument];\n            const maxSize = 5242880;\n\n            if (acceptedFiles.includes(e.type)) {\n                if (e.size <= maxSize) {\n                    switch (e.type) {\n                        case jpegImage:\n                        case pngImage:\n                            setFilePreview([URL.createObjectURL(e), \"image\"]);\n                            setFileObject(\"image\");\n\n                            setFileFirestore(e);\n                            break;\n\n                        case pdfDocument:\n                            setFilePreview([URL.createObjectURL(e), \"pdf\"]);\n                            setFileObject(\"pdf\");\n                            setFileFirestore(e);\n                            break;\n                    }\n                } else {\n                    swal(\"Archivo muy pesado\", \"Tu archivo excede el peso permitido, maximo 5 MB\", \"error\");\n                }\n\n            } else {\n                swal(\"Archivo no válido\", \"Solo puedes subir un formato imagen o pdf\", \"error\");\n            }\n        } catch (e) {\n\n        }\n    }\n\n    const showFile = () => {\n\n        if ((profileStatus === 1 || profileStatus === 2 || profileStatus === 5 || profileStatus === 7)) {\n            if (filePreview[1] === \"image\") {\n                return (\n                    <div className=\"row d-flex justify-content-center\">\n                        <div className=\"col-12 col-sm-12 col-xl-6 w-25 h-25\">\n                            <img src={filePreview[0]} className=\"img-fluid\" alt=\"\"/>\n                        </div>\n                    </div>\n\n                )\n            } else if (filePreview[1] === \"pdf\") {\n                return (\n                    <div className=\"row d-flex justify-content-center\">\n                        <div className=\"col-12 col-sm-12 col-xl-6 w-25 h-25\">\n                            <Document file={filePreview[0]}>\n                                <Page pageNumber={1}/>\n                            </Document>\n                        </div>\n                    </div>\n\n                )\n            } else {\n                return null;\n            }\n        } else {\n            if (fileObject === \"image\") {\n                return (\n                    <div className=\"row d-flex justify-content-center\">\n                        <div className=\"col-12 col-sm-12 col-xl-6 w-25 h-25\">\n                            <img src={doc} className=\"img-fluid\" alt=\"\"/>\n                        </div>\n                    </div>\n\n                )\n            } else if (fileObject === \"pdf\") {\n                return (\n                    <div className=\"row d-flex justify-content-center\">\n                        <div className=\"col-12 col-sm-12 col-xl-6 w-25 h-25\">\n                            <iframe\n                                src={doc}\n                                frameBorder=\"0\" width=\"100%\" height=\"300\"></iframe>\n                        </div>\n                    </div>\n\n                )\n            } else {\n                return null;\n            }\n\n        }\n\n\n    }\n\n    const getUserData = async (id) => {\n        try {\n            let docRef = db.collection('credentials').doc(id);\n            await docRef.onSnapshot(doc => {\n                if (doc.exists) {\n                    setName(doc.data().name);\n                    setLastname(doc.data().lastname);\n                    setBirthday(timeConverter(doc.data().birthday.seconds));\n                    setCountry(doc.data().country);\n                    setStateLocation(doc.data().state);\n                    setCity(doc.data().city);\n                    setPhone(doc.data().phone);\n                    setAddress(doc.data().address);\n                    setProfileStatus(doc.data().profileStatus);\n                    setDoc(doc.data().doc);\n                    setFileObject(doc.data().fileType);\n                    setProfilePictureStatus(doc.data().profilePictureStatus);\n                    setCroppedImage(doc.data().profilePicture)\n                    getStatesAPI(doc.data().countryComplete);\n                    setCountryCompleteName(doc.data().countryComplete);\n                }\n            });\n\n        } catch (e) {\n\n        }\n\n    }\n\n    const getAuthTokenCountries = async () => {\n        try {\n            const response = await PlacesFinder.get(\"/api/getaccesstoken\", {\n                headers: {\n                    \"api-token\": \"8X4CFJBt--Ev5K8GkL_R9Z2lNS72XQ9ez_NutQRcq4bannc96Q4-YGjDq4IKqlDSFas\",\n                    \"user-email\": \"taikus.jango@sunshine-imagine.io\"\n                }\n            });\n            await setAuthToken(\"Bearer \" + response.data.auth_token);\n        } catch (e) {\n\n        }\n    }\n\n    const getCountriesAPI = async () => {\n        try {\n            const response = await PlacesFinder.get(\"/api/countries/\", {\n                headers: {\n                    Authorization: jalaPorfavor\n                }\n            });\n            setCountriesAPI(response.data);\n        } catch (e) {\n\n        }\n    }\n\n    const getStatesAPI = async (countryAPI) => {\n        try {\n            const response = await PlacesFinder.get(`/api/states/${countryAPI}`, {\n                headers: {\n                    Authorization: jalaPorfavor\n                }\n            });\n            setStatesAPI(response.data);\n        } catch (e) {\n\n        }\n    }\n\n    const timeConverter = (UNIX_timestamp) => {\n        let a = new Date(UNIX_timestamp * 1000);\n        let year = a.getFullYear();\n        let month = a.getMonth() + 1;\n        let date = a.getDate().toString().length === 1 ? \"0\" + a.getDate().toString() : a.getDate();\n        let time = month + '/' + date + '/' + year;\n        return new Date(time);\n    }\n\n    const getStates = stateValueRequired => {\n        return eval(stateValueRequired);\n    }\n\n    const setStates = (stateRequired, value) => {\n        eval(stateRequired)(value);\n    }\n\n    const uploadProfilePicture = () => {\n        swal({\n            title: \"¿Estas seguro de subir esa foto?\",\n            text: \"Una vez enviada la foto no se podrá modificar, asegúrate de que cumpla los requisitos antes mencionados\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        })\n            .then((willConfirm) => {\n                if (willConfirm) {\n                    setOpen(true);\n                    const storageRef = useStorage.ref(`credentials/profilePictures-${uid}`);\n                    const task = storageRef.put(image);\n                    task.on('state_changed', snapshot => {\n                        let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                        setStates(\"setUploadValue\", percentage);\n                    }, error => {\n\n                    }, () => {\n                        storageRef.getDownloadURL().then(url => {\n                            db.collection('credentials').doc(uid).update({\n                                profilePicture: url,\n                                profilePictureStatus: 1\n                            }).then(() => {\n                                setOpen(false);\n                                swal(\"La foto de tu perfil ha sido actualizada con éxito\", \"\", \"success\");\n                            });\n                        })\n                    });\n                }\n            });\n    }\n\n    const getAge = (birthDateString) => {\n        let today = new Date();\n        let birthDate = new Date(birthDateString);\n        let age = today.getFullYear() - birthDate.getFullYear();\n        let m = today.getMonth() - birthDate.getMonth();\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n            age--;\n        }\n        return age;\n    }\n\n    return (\n        <div className=\"pb-5 contenedor-profile\">\n            <UserHeader />\n            {/* Page content */}\n            <Container className=\"mt-3 mt--7 mb-5\" fluid>\n                <Row>\n                    <Col className=\"order-xl-2 mb-5 mb-xl-0\" xl=\"4\">\n                        <Card className=\"card-profile shadow mt-5 mt-lg-0\">\n                            <Row className=\"justify-content-center\">\n                                <Col className=\"order-lg-2\" lg=\"3\">\n                                    <div className=\"card-profile-image\">\n                                        <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                                            <img\n                                                alt=\"Profile\"\n                                                className=\"rounded-circle\"\n                                                src={croppedImage || AVATAR}\n                                            />\n                                        </a>\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <CardBody className=\"pt-5 pt-md-0 mt-5 pb-5\">\n                                <Row>\n                                    <div className=\"col\">\n                                        <div className=\"card-profile-stats d-flex justify-content-center mt-md-5\">\n                                            {\n                                                profilePictureStatus === 0 ? (\n                                                    <UploadImage uploadProfilePicture={uploadProfilePicture} getStates={getStates} setStates={setStates}\n                                                                 profilePictureStatus={profilePictureStatus}/>) : null\n                                            }\n                                        </div>\n                                    </div>\n                                    <Backdrop className={classes.backdrop} open={open} >\n                                        <CircularProgress color=\"inherit\" />\n                                    </Backdrop>\n                                </Row>\n                                <div className=\"text-center text-dark mt-3\">\n                                    <h3>\n                                        {name} {lastname}\n                                        <span className=\"font-weight-light\"></span>\n                                    </h3>\n                                    <div className=\"h5 font-weight-400 mt-3\">\n                                        <i className=\"ni location_pin mr-2\" />\n                                        {getAge(birthday) ? `${getAge(birthday)} años` : '00 años'}\n                                    </div>\n                                    <div className=\"h5 font-weight-300\">\n                                        <i className=\"ni location_pin mr-2\" />\n                                        +{phone || '0000000000'}\n                                    </div>\n\n                                    <div className=\"h5 mt-4\">\n                                        <i className=\"ni business_briefcase-24 mr-2\" />\n                                        {city || 'Ciudad'}, {stateLocation || 'Estado'}, {countryCompleteName || 'País'}\n                                    </div>\n                                    <div>\n                                        <i className=\"ni education_hat mr-2\" />\n                                        {address || 'Dirección'}\n                                    </div>\n                                    <hr className=\"my-4\" />\n\n                                    <div className={classes.alert}>\n                                        {profileStatus === 3 ?\n                                            <Alert variant=\"filled\" severity=\"warning\">En espera de verificación — Se están\n                                                validando tus datos</Alert> : null}\n                                        {profileStatus === 4 ?\n                                            <Alert variant=\"filled\" severity=\"success\">Cuenta verificada</Alert> : null}\n                                        {profileStatus === 5 ?\n                                            <Alert variant=\"filled\" severity=\"error\">Cuenta no verificada — Verifica tu identificación oficial únicamente</Alert> : null}\n                                        {profileStatus === 6 ?\n                                            <Alert variant=\"filled\" severity=\"error\">Cuenta no verificada — Verifica tus datos personales únicamente</Alert> : null}\n                                        {profileStatus === 7 ?\n                                            <Alert variant=\"filled\" severity=\"error\">Cuenta no verificada — Verifica todos tus datos</Alert> : null}\n                                    </div>\n                                </div>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col className=\"order-xl-1\" xl=\"8\">\n                        <Card className=\"bg-secondary shadow\">\n                            <ExpansionComponent getStates={getStates} setStates={setStates} uid={uid} showFile={showFile} setFile={setFile} profilePictureStatus={profilePictureStatus}/>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 300,\n        paddingBottom: 20,\n        marginTop: 20,\n        marginBottom: 20\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        marginTop: 20,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    cardActions: {},\n    large: {\n        width: theme.spacing(25),\n        height: theme.spacing(25),\n    },\n    formControl: {\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    alert: {\n        marginTop: 50,\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(3),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default Profile;\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/ExpansionComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/UploadImage.jsx",["314"],"import React, {useState, useCallback, useEffect} from 'react'\nimport Cropper from 'react-easy-crop'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport {getCroppedImg} from '../js/canvasUtils'\nimport {makeStyles} from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\n\nconst UploadImage = ({ uploadProfilePicture, getStates, setStates, profilePictureStatus}) => {\n    const classes = useStyles();\n    const [imageSrc, setImageSrc] = useState(null);\n    const [crop, setCrop] = useState({x: 0, y: 0});\n    const [rotation, setRotation] = useState(0);\n    const [zoom, setZoom] = useState(1);\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n    const [hideButton, setHideButton] = useState(true);\n\n    useEffect(() => {\n        setHideButton(!(profilePictureStatus === 0));\n    }, [profilePictureStatus]);\n\n\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n        setCroppedAreaPixels(croppedAreaPixels);\n    }, []);\n\n    const showCroppedImage = useCallback(async () => {\n        try {\n            const croppedImage = await getCroppedImg(\n                imageSrc,\n                croppedAreaPixels,\n                rotation\n            )\n            setStates(\"setCroppedImage\", URL.createObjectURL(croppedImage));\n            setStates(\"setImage\", croppedImage);\n        } catch (e) {\n            console.error(e);\n        }\n    }, [imageSrc, croppedAreaPixels, rotation]);\n\n    const onFileChange = async (e) => {\n        if (e.target.files && e.target.files.length > 0) {\n            const file = e.target.files[0];\n            let imageDataUrl = await readFile(file);\n            setImageSrc(imageDataUrl);\n        }\n    }\n\n    const choiceImage = () => {\n        if (!imageSrc) {\n            document.getElementById(\"choiceImage\").click();\n        }\n    }\n\n    return (\n        <div>\n\n            {\n                profilePictureStatus === 0 ? (\n                    <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                        <Button disabled={hideButton} variant=\"contained\" color=\"primary\" component=\"span\" data-toggle=\"modal\"\n                                data-target=\"#uploadImage\"\n                                data-backdrop='static' data-keyboard='false' onClick={!hideButton ? choiceImage : null}>\n                            Elegir foto\n                        </Button>\n                        {getStates(\"croppedImage\" && getStates(\"image\")) ? (<Button onClick={uploadProfilePicture}>Subir foto</Button>) : null}\n                    </ButtonGroup>\n                ) : null\n            }\n\n            <div className=\"modal fade\" id=\"uploadImage\" tabIndex=\"-1\" role=\"dialog\"\n                 aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n                    <div className=\"modal-content py-0\">\n\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title-dashboard\" id=\"exampleModalLabel\">Adapta tu imagen</h5>\n                            <button type=\"button\" className=\"close-modal\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n\n                        <div className=\"modal-body\">\n                            <React.Fragment>\n                                <div className={classes.cropContainer}>\n                                    <Cropper\n                                        image={imageSrc}\n                                        crop={crop}\n                                        rotation={rotation}\n                                        zoom={zoom}\n                                        aspect={4 / 4}\n                                        onCropChange={setCrop}\n                                        onRotationChange={setRotation}\n                                        onCropComplete={onCropComplete}\n                                        onZoomChange={setZoom}\n                                    />\n                                </div>\n                                <div className={classes.controls}>\n                                    <div className={classes.sliderContainer}>\n                                        <Typography\n                                            variant=\"overline\"\n                                            classes={{root: classes.sliderLabel}}\n                                        >\n                                            Zoom\n                                        </Typography>\n                                        <Slider\n                                            value={zoom}\n                                            min={1}\n                                            max={3}\n                                            step={0.1}\n                                            aria-labelledby=\"Zoom\"\n                                            classes={{root: classes.slider}}\n                                            onChange={(e, zoom) => setZoom(zoom)}\n                                        />\n                                    </div>\n                                    <Button\n                                        onClick={showCroppedImage}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        classes={{root: classes.cropButton}}\n                                        data-dismiss=\"modal\" aria-label=\"Close\"\n                                    >\n                                        Finalizar\n                                    </Button>\n                                </div>\n                                <input type=\"file\" hidden id=\"choiceImage\" onChange={onFileChange} accept=\"image/*\"/>\n                                <label htmlFor=\"choiceImage\">\n                                    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                        <PhotoCamera/>\n                                    </IconButton>\n                                </label>\n                            </React.Fragment>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst readFile = file => {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => resolve(reader.result), false);\n        reader.readAsDataURL(file);\n    });\n}\n\nconst useStyles = makeStyles((theme) => ({\n    cropContainer: {\n        position: 'relative',\n        width: '100%',\n        height: 200,\n        background: '#333',\n        [theme.breakpoints.up('sm')]: {\n            height: 400,\n        },\n    },\n    cropButton: {\n        flexShrink: 0,\n        marginLeft: 16,\n    },\n    controls: {\n        padding: 16,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'stretch',\n        [theme.breakpoints.up('sm')]: {\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n    },\n    sliderContainer: {\n        display: 'flex',\n        flex: '1',\n        alignItems: 'center',\n    },\n    sliderLabel: {\n        [theme.breakpoints.down('xs')]: {\n            minWidth: 65,\n        },\n    },\n    slider: {\n        padding: '22px 0px',\n        marginLeft: 16,\n        [theme.breakpoints.up('sm')]: {\n            flexDirection: 'row',\n            alignItems: 'center',\n            margin: '0 16px',\n        },\n    },\n}))\n\n\nexport default UploadImage;\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/PersonalData.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/VerifiedProfile.jsx",["315"],"import React, {useState} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport Camaraine from \"../../../images/camaraine.svg\";\nimport Pdfine from \"../../../images/pdfine.svg\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport swal from \"sweetalert\";\nimport {db, useStorage} from \"../../../config/firebase\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {encryptData} from \"../js/encrypt\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\n\nconst VerifiedProfile = ({getStates, setStates, uid, showFile, setFile}) => {\n\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const masterCondition = getStates(\"profileStatus\") === 1 || getStates(\"profileStatus\") === 2 || getStates(\"profileStatus\") === 5 || getStates(\"profileStatus\") === 7;\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n\n            if (masterCondition) {\n                if (getStates(\"address\") !== \"\") {\n                    if (getStates(\"fileFirestore\") !== null) {\n                        swal({\n                            title: \"¿Estas seguro de subir la información?\",\n                            text: \"Una vez enviada la información no se podrá modificar\",\n                            icon: \"warning\",\n                            buttons: true,\n                            dangerMode: true,\n                        })\n                            .then((willDelete) => {\n                                if (willDelete) {\n                                    setOpen(true);\n                                    const storageRef = useStorage.ref(`id/${encryptData(uid)}`);\n                                    const task = storageRef.put(getStates(\"fileFirestore\"));\n                                    task.on('state_changed', snapshot => {\n                                        let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                                        setStates(\"setUploadValue\", percentage);\n                                    }, error => {\n\n                                    }, () => {\n                                        storageRef.getDownloadURL().then(url => {\n                                            db.collection('credentials').doc(uid).update({\n                                                profileStatus: 3,\n                                                doc: url,\n                                                fileType: getStates(\"fileObject\"),\n                                            }).then(() => {\n                                                setOpen(false);\n                                                swal(\"Información actualizada\", \"¡La información de tu perfil fue actualizada con éxito!\", \"success\");\n                                            });\n                                        })\n                                    })\n                                }\n                            });\n                    } else {\n                        swal(\"Te falta subir tu identifiación oficial\", \"Para poder continuar con la verificación de tus datos debes subir una foto o pdf de tu identifiacaión oficial de ambos lados!\", \"warning\");\n                    }\n\n                } else {\n                    swal(\"Información faltante\", \"Llena todos los campos correspondientes para poder continuar!\", \"warning\");\n                }\n            }\n\n        } catch (e) {\n\n        }\n    }\n\n    return (\n        <div>\n            <form className={classes.root}\n                  id={(masterCondition) ? \"profileform\" : \"\"}\n                  onSubmit={(masterCondition) ? handleSubmit : () => false}>\n\n                <div className=\"col-12\">\n                    <Typography className={classes.title} variant=\"h4\" component=\"h4\">\n                        Sube un documento oficial (INE, Pasaporte, Licencia de conducir...)\n                    </Typography>\n                </div>\n\n                <Typography className={classes.title} variant=\"subtitle2\" component=\"h2\"\n                            color=\"textSecondary\">\n                    Verifica que tus datos coincidan con los datos personales que nos proporcionaste previamente\n                </Typography>\n\n\n                <div className=\"row mb-5 mt-5\">\n\n                    <div className=\"col-12\">\n                        <Typography className={classes.title} variant=\"h6\" component=\"h6\">\n                            Identificación oficial\n                        </Typography>\n                    </div>\n\n                    <div className=\"col-12 mt-5 px-5\">\n                        {\n                            !(masterCondition) ? showFile() :\n                                <span className=\"form-regi col-xl-5 col-lg-7 text-dark\">ID\n                                                        <label className=\"btn form-regi\" htmlFor=\"cameraine\">\n                                                            <img src={Camaraine} alt=\"\" className=\"\"/>\n                                                        </label>\n\n                                                        <label htmlFor=\"pdfine\" className=\"btn form-regi\">\n                                                            <img src={Pdfine} alt=\"\" className=\"\"/>\n                                                        </label>\n                                                        <div className=\" form-group  form-registro col-12 \">\n\n                                                            <input type=\"file\" id=\"cameraine\" className=\" d-none\"\n                                                                   accept=\"image/*\"\n                                                                   onChange={e => setFile(e.target.files[0])}>\n                                                            </input>\n\n                                                            <input type=\"file\" id=\"pdfine\"\n                                                                   accept=\"application/pdf\" className=\"d-none\"\n                                                                   onChange={e => setFile(e.target.files[0])}>\n                                                            </input>\n\n                                                            <div style={{\n                                                                position: 'absolute',\n                                                                justifycontent: \"center\",\n                                                                bottom: '10px',\n                                                                left: '50vw'\n                                                            }}>\n                                                            </div>\n\n                                                            <div className=\"container\">\n                                                                {showFile()}\n                                                            </div>\n\n                                                            {/*}\n                                                            <div>\n                                                                <progress value={uploadValue} max=\"100\">\n                                                                    {uploadValue}%\n                                                                </progress>\n                                                                <p className=\"btn form-regi\">{`${uploadValue}%`}</p>\n                                                            </div>\n                                                            {*/}\n\n                                                        </div>\n                                                    </span>\n                        }\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"col-12 d-flex justify-content-center\">\n                        <Button\n                            disabled={!(masterCondition)}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"large\"\n                            className={classes.button}\n                            startIcon={<SaveIcon/>}\n                            type={(masterCondition) ? \"submit\" : \"button\"}\n                        >\n                            Enviar verificación\n                        </Button>\n                    </div>\n                </div>\n            </form>\n            <Backdrop className={classes.backdrop} open={open} >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </div>\n    );\n};\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 300,\n        paddingBottom: 20,\n        marginTop: 20,\n        marginBottom: 20\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        marginTop: 20,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    cardActions: {},\n    large: {\n        width: theme.spacing(25),\n        height: theme.spacing(25),\n    },\n    formControl: {\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    alert: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default VerifiedProfile;","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Settings.jsx",["316","317","318","319","320","321"],"import React, {useEffect, useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChangePassword from \"../../components/dashboard/settings/ChangePassword\";\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n}));\n\nexport default function Settings() {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const {currentUser, getAuthType, logout, credential} = useAuth();\n    const [logged, setLogged] = useState(false);\n    const [hasPassword, setHasPassword] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            if (!currentUser.emailVerified) {\n                setLogged(false);\n                logout();\n                history.push(\"/Home\");\n            } else {\n                setLogged(true);\n                history.push(\"/Settings\");\n                verifyAuthType(currentUser.providerData);\n            }\n        } catch (e) {\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    }, []);\n\n\n    const verifyAuthType = data => {\n        data.map(value => {\n            if (value.providerId === \"password\"){\n                setHasPassword(true);\n            }\n        });\n    }\n\n    const handleChange = (panel) => (event, isExpanded) => {\n        setExpanded(isExpanded ? panel : false);\n    };\n\n    return (\n        <div className=\"mt-5 pt-5 contenedor-profile px-2 px-md-5\">\n            <Accordion className=\"mt-3\" expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1bh-content\"\n                    id=\"panel1bh-header\"\n                >\n                    <Typography className={classes.heading}>Contraseña</Typography>\n                    <Typography className={classes.secondaryHeading}>Cambia tu contraseña</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    {hasPassword ? <ChangePassword /> : <h5 style={{marginLeft: 40}}>No puedes cambiar tu contraseña porque elegiste iniciar sesión con Google</h5>}\n                </AccordionDetails>\n            </Accordion>\n        </div>\n    );\n}\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/settings/ChangePassword.jsx",["322","323"],"import React, {useState} from 'react';\nimport {Button, TextField} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport firebase from \"firebase\";\nimport swal from \"sweetalert\";\nimport passwordValidator from \"password-validator\";\nimport swal2 from '@sweetalert/with-react';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst ChangePassword = () => {\n\n    const [lastPassword, setLastPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n\n    const verifyLastPassword = async () => {\n        let result = false;\n        try{\n            let user = firebase.auth().currentUser;\n            let credential = firebase.auth.EmailAuthProvider.credential(\n                firebase.auth().currentUser.email,\n                lastPassword\n            );\n\n            await user.reauthenticateWithCredential(credential).then(() => {\n                result = true;\n            });\n        } catch (e) {\n            swal({\n                title: \"Contraseña actual incorrecta\",\n                text: \"La contraseña proporcionada como actual no es correcta, intenta de nuevo\",\n                icon: \"warning\",\n                button: \"¡Entendido!\",\n                closeOnClickOutside: false\n            });\n        }\n        return result;\n\n    }\n\n    const clearInputs = () => {\n        setNewPassword(\"\");\n        setRepeatPassword(\"\");\n        setLastPassword(\"\");\n    }\n\n    const handleChangePassword = async (e) => {\n        e.preventDefault();\n        setOpen(true);\n        try{\n            if(await verifyLastPassword()){\n                if(newPassword === repeatPassword) {\n\n                    let schema = new passwordValidator();\n                    schema\n                        .is().min(8)\n                        .is().max(100)\n                        .has().uppercase()\n                        .has().lowercase()\n                        .has().digits(1)\n                        .has().not().spaces();\n\n                    if(schema.validate(newPassword)){\n                        let user = firebase.auth().currentUser;\n                        await user.updatePassword(newPassword).then(() => {\n                            clearInputs();\n                            swal({\n                                title: \"Contraseña cambiada exitosamente\",\n                                text: \"Ahora puedes iniciar sesión con tu nueva contraseña\",\n                                icon: \"success\",\n                                button: \"¡Entendido!\",\n                                closeOnClickOutside: false\n                            });\n                        });\n                    } else {\n                        swal2({\n                            text: \"Tu contraseña debe cumplir con los siguientes requisitos\",\n                            closeOnClickOutside: false,\n                            buttons: {\n                                cancel: \"Entendido\",\n                            },\n                            content: (\n                                <div className=\"container\">\n                                    <div className=\"row\">\n                                        <ul>\n                                            {\n                                                schema.validate(newPassword, {list: true}).map((element, index) => {\n                                                    switch (element) {\n                                                        case 'min':\n\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Mínimo 8 caracteres</p></li>\n                                                            )\n\n                                                        case 'max':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Máximo 100 caracteres</p></li>\n                                                            )\n\n                                                        case 'uppercase':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Mínimo una letra mayuscula</p></li>\n                                                            )\n\n                                                        case 'lowercase':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Mínimo 1 letra minuscula</p></li>\n                                                            )\n\n                                                        case 'spaces':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">No debe contener espacios</p></li>\n                                                            )\n\n                                                        case 'digits':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Mínimo 1 número</p></li>\n                                                            )\n\n                                                    }\n\n                                                })\n                                            }\n                                        </ul>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                } else {\n                    swal({\n                        title: \"Las contraseñas no coinciden\",\n                        text: \"Asegurate de que las contraseñas nuevas sean las mismas\",\n                        icon: \"info\",\n                        button: \"¡Entendido!\",\n                        closeOnClickOutside: false\n                    });\n                }\n            }\n        } catch (e) {\n\n\n        }\n        setOpen(false);\n\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleChangePassword}>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 mb-3\">\n                            <TextField variant=\"outlined\"\n                                       required\n                                       fullWidth\n                                       id=\"outlined-basic\"\n                                       label=\"Contraseña anterior\"\n                                       type={\"password\"}\n                                       style={{alignContent: \"center\"}}\n                                       value={lastPassword}\n                                       onChange={e => setLastPassword(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"col-12 mb-3\">\n                            <TextField variant=\"outlined\"\n                                       required\n                                       fullWidth\n                                       id=\"outlined-basic\"\n                                       label=\"Contraseña nueva\"\n                                       type={\"password\"}\n                                       style={{alignContent: \"center\"}}\n                                       value={newPassword}\n                                       onChange={e => setNewPassword(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"col-12 mb-3\">\n                            <TextField variant=\"outlined\"\n                                       required\n                                       fullWidth\n                                       id=\"outlined-basic\"\n                                       label=\"Repetir contraseña nueva\"\n                                       type={\"password\"}\n                                       style={{alignContent: \"center\"}}\n                                       value={repeatPassword}\n                                       onChange={e => setRepeatPassword(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"col-12\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                size=\"large\"\n                                startIcon={<SaveIcon/>}\n                                type={\"submit\"}\n                            >\n                                Cambiar contraseña\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n            <Backdrop className={classes.backdrop} open={open} >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </div>\n    );\n};\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\nexport default ChangePassword;","/home/snow/Documentos/ico-web-final/src/components/dashboard/PurchaseHistoryComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/context/AuthContext.jsx",["324"],"import React, { useContext, useState, useEffect, createContext } from \"react\"\nimport { auth } from \"../config/firebase\"\nimport {useHistory} from \"react-router-dom\";\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n    return useContext(AuthContext);\n}\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState();\n    const [loading, setLoading] = useState(true);\n    const [credential, setCredential] = useState();\n    const history = useHistory();\n\n    const signup = (email, password) => {\n        return auth.createUserWithEmailAndPassword(email, password);\n    }\n\n    const login = (email, password) => {\n        return auth.signInWithEmailAndPassword(email, password);\n    }\n\n    const logout = () => {\n        return auth.signOut();\n    }\n\n    const resetPassword = (email) => {\n        return auth.sendPasswordResetEmail(email);\n    }\n\n    const getAuthType = async () => {\n        await auth.getRedirectResult().then(r => console.log(r));\n    }\n\n    const updateEmail = (email) => {\n        return currentUser.updateEmail(email);\n    }\n\n    const updatePassword = (password) => {\n        return currentUser.updatePassword(password);\n    }\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            setCurrentUser(user);\n            setLoading(false);\n            setCredential(user);\n\n        });\n        return unsubscribe;\n    }, []);\n\n    const value = {\n        credential,\n        currentUser,\n        login,\n        signup,\n        logout,\n        resetPassword,\n        updateEmail,\n        updatePassword,\n        getAuthType\n    }\n\n    return (\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    )\n}","/home/snow/Documentos/ico-web-final/src/config/Particles-config.js",[],"/home/snow/Documentos/ico-web-final/src/components/PasswordRecoveryModal.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/SignUpModal.jsx",["325"],"import React, {useState} from 'react';\nimport \"./navbar/css/styles.css\"\nimport 'react-phone-number-input/style.css'\nimport {db, auth} from \"../config/firebase\";\nimport swal from \"sweetalert\";\nimport swal2 from '@sweetalert/with-react';\nimport firebase from 'firebase';\nimport \"firebase/auth\";\nimport GoogleButton from \"react-google-button\";\nimport passwordValidator from \"password-validator\";\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport {useHistory} from \"react-router-dom\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FilledInput from \"@material-ui/core/FilledInput\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport SunshineFinder from \"../apis/SunshineFinder\";\nrequire('dotenv').config();\n\n\nconst SignUpModal = () => {\n\n    const sendReCAPTCHAValue = async (value) => {\n        const response = await SunshineFinder.post(\"/api/recaptcha\", {\n            captchaValue: value\n        });\n\n        if (response.data.status === \"success\") {\n            setVerifiedCaptcha(true);\n        }\n\n    }\n\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [apellido, setApellido] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [repeatedPassword, setRepeteadPassword] = useState(\"\");\n    const [checkedValue, setCheckedValue] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [verifiedCaptcha, setVerifiedCaptcha] = useState(false);\n    const history = useHistory();\n\n    //VALIDATIONS\n    const validations = {\n        requiredFields: () => {\n            return (name !== '' && email !== '' && password !== '' && apellido !== '')\n        }\n    }\n\n    const handleCheckboxState = (e) => {\n        setCheckedValue(e.target.checked);\n    }\n\n    const saveDataInFirestore = (uid, data = {}) => {\n        if (Object.keys(data).length > 0) {\n            /*============GUARDAR DATOS EN FIRESTORE CON GOOGLE===========*/\n            db.collection(\"credentials\").doc(uid).set({\n                UUID: uid,\n                city: data.city.replace(/<[^>]+>/g, ''),\n                doc: \"\".replace(/<[^>]+>/g, ''),\n                email: data.email.replace(/<[^>]+>/g, ''),\n                name: data.name.replace(/<[^>]+>/g, ''),\n                phone: data.phone === null ? \"\".replace(/<[^>]+>/g, '') : data.phone.replace(/<[^>]+>/g, ''),\n                authType: data.authType.replace(/<[^>]+>/g, ''),\n                birthday: data.birthday.replace(/<[^>]+>/g, ''),\n                country: data.country.replace(/<[^>]+>/g, ''),\n                state: data.state.replace(/<[^>]+>/g, ''),\n                address: data.address.replace(/<[^>]+>/g, ''),\n                suns: 0,\n                countryComplete: data.countryComplete.replace(/<[^>]+>/g, ''),\n                profileStatus: data.profileStatus,\n                fileType: \"\".replace(/<[^>]+>/g, ''),\n                profilePicture: \"\".replace(/<[^>]+>/g, ''),\n                profilePictureStatus: 0,\n                addressToken: \"\",\n                privateKey: \"\"\n            }).then(docRef => {\n                history.push(\"/\");\n                window.location.reload();\n                clearStates();\n            }).catch((error) => {\n\n            });\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n        } else {\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n            db.collection(\"credentials\").doc(uid).set({\n                UUID: uid,\n                city: \"\".replace(/<[^>]+>/g, ''),\n                doc: \"\".replace(/<[^>]+>/g, ''),\n                email: email.replace(/<[^>]+>/g, ''),\n                name: name.replace(/<[^>]+>/g, ''),\n                lastname: apellido.replace(/<[^>]+>/g, ''),\n                phone: \"\".replace(/<[^>]+>/g, ''),\n                authType: \"EMAIL\".replace(/<[^>]+>/g, ''),\n                birthday: \"\".replace(/<[^>]+>/g, ''),\n                country: \"\".replace(/<[^>]+>/g, ''),\n                state: \"\".replace(/<[^>]+>/g, ''),\n                address: \"\".replace(/<[^>]+>/g, ''),\n                profileStatus: 0,\n                suns: 0,\n                countryComplete: \"\".replace(/<[^>]+>/g, ''),\n                fileType: \"\".replace(/<[^>]+>/g, ''),\n                profilePicture: \"\".replace(/<[^>]+>/g, ''),\n                profilePictureStatus: 0,\n                addressToken: \"\",\n                privateKey: \"\"\n            }).then(docRef => {\n                swal({\n                    title: \"¡Registro exitoso!\",\n                    text: \"Enviamos un enlace al correo electrónico que proporcionaste para verificar tu cuenta.\",\n                    icon: \"success\",\n                    button: \"¡Entendido!\",\n                    closeOnClickOutside: false\n                }).then(confirm => {\n                    if (confirm) {\n                        document.getElementById(\"closeModalSignUp\").click();\n                        document.getElementById(\"signInButton\").click();\n                    }\n                });\n                clearStates();\n                setLoading(false);\n            }).catch((error) => {\n                setLoading(false);\n\n            });\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n        }\n    }\n\n    const searchDataInFirestore = async id => {\n        let result = null;\n        await db.collection('credentials').doc(id).get().then(doc => {\n            result = doc.exists ? \"exists\" : \"not-exists\";\n        }).catch(error => {\n            result = \"error\";\n\n        });\n        return result;\n    }\n\n    const clearStates = () => {\n        setName('');\n        setEmail('');\n        setPassword('');\n        setRepeteadPassword('');\n        setApellido('');\n        setCheckedValue(false);\n        setVerifiedCaptcha(false);\n    }\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (validations.requiredFields()) {\n\n            let schema = new passwordValidator();\n            schema\n                .is().min(8)\n                .is().max(100)\n                .has().uppercase()\n                .has().lowercase()\n                .has().digits(1)\n                .has().not().spaces();\n\n            if (schema.validate(password)) {\n                if (password === repeatedPassword) {\n                    if (checkedValue) {\n                        if (verifiedCaptcha) {\n                            setLoading(true);\n                            auth.createUserWithEmailAndPassword(email, password)\n                                .then((user) => {\n\n                                    user.user.sendEmailVerification().then(r => {\n                                        saveDataInFirestore(user.user.uid);\n                                    }, (error) => {\n\n                                    })\n\n                                    auth.signOut();\n\n                                }).catch((error) => {\n                                setLoading(false);\n                                let errorCode = error.code;\n\n\n                                /*============== EL CORREO YA SE USA POR OTRA CUENTA ==================*/\n                                if (errorCode === \"auth/email-already-in-use\") {\n                                    swal({\n                                        title: \"Oops\",\n                                        text: \"La dirección de correo ya se encuentra en uso\",\n                                        icon: \"warning\",\n                                        button: \"¡Entendido!\",\n                                        closeOnClickOutside: false\n                                    });\n                                } else if (errorCode === \"auth/weak-password\") {\n                                    swal({\n                                        title: \"Oops\",\n                                        text: \"La contraseña debe tener al menos 8 caracteres!\",\n                                        icon: \"warning\",\n                                        button: \"¡Entendido!\"\n                                    });\n                                }\n\n                            });\n                        } else {\n                            swal({\n                                title: \"Verifica el CAPTCHA\",\n                                text: \"Intenta verificar el CAPTCHA de nuevo para poder continuar\",\n                                icon: \"warning\",\n                                button: \"¡Entendido!\"\n                            });\n                        }\n                    } else {\n                        swal({\n                            title: \"Advertencia\",\n                            text: \"Debes aceptar los términos y condiciones para poder registrarte\",\n                            icon: \"warning\",\n                            button: \"¡Entendido!\",\n                            closeOnClickOutside: false\n                        });\n                    }\n                } else {\n                    swal({\n                        title: \"Las contraseñas no coinciden\",\n                        text: \"Asegurate de escribir las mismas contraseñas en los campos correspondientes\",\n                        icon: \"warning\",\n                        button: \"¡Entendido!\",\n                        closeOnClickOutside: false\n                    });\n                }\n\n            } else {\n                swal2({\n                    text: \"Tu contraseña debe cumplir con los siguientes requisitos\",\n                    closeOnClickOutside: false,\n                    buttons: {\n                        cancel: \"Entendido\",\n                    },\n                    content: (\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <ul>\n                                    {\n                                        schema.validate(password, {list: true}).map((element, index) => {\n\n                                            switch (element) {\n                                                case 'min':\n\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo 8 caracteres</p></li>\n                                                    )\n\n                                                case 'max':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Máximo 100 caracteres</p></li>\n                                                    )\n\n                                                case 'uppercase':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo una letra mayuscula</p></li>\n                                                    )\n\n                                                case 'lowercase':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo 1 letra minuscula</p></li>\n                                                    )\n\n                                                case 'spaces':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">No debe contener espacios</p></li>\n                                                    )\n\n                                                case 'digits':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo 1 número</p></li>\n                                                    )\n\n                                                default:\n                                                    return\n                                            }\n                                        })\n                                    }\n                                </ul>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n\n        } else {\n            swal({\n                title: \"Advertencia\",\n                text: \"Debes llenar todos los campos\",\n                icon: \"warning\",\n                button: \"¡Entendido!\",\n                closeOnClickOutside: false\n            });\n        }\n    };\n\n    const signUpWithGoogle = async () => {\n\n        let provider = new firebase.auth.GoogleAuthProvider();\n        provider.addScope('https://www.googleapis.com/auth/userinfo.profile');\n        auth.languageCode = 'es';\n        await auth.signInWithPopup(provider).then(async (result) => {\n\n            let user = result.user;\n\n            if (user.emailVerified) {\n\n                let userStatus = await searchDataInFirestore(user.uid);\n                if(userStatus === \"exists\"){\n                    history.push(\"/\");\n                    window.location.reload();\n                    clearStates();\n                } else if (userStatus === \"not-exists\"){\n                    saveDataInFirestore(user.uid, {\n                        city: \"\",\n                        email: user.email,\n                        name: user.displayName,\n                        phone: user.phoneNumber,\n                        authType: \"GOOGLE\",\n                        birthday: \"\",\n                        country: \"\",\n                        state: \"\",\n                        address: \"\",\n                        profileStatus: 0,\n                        countryComplete: \"\",\n                        addressToken: \"\",\n                        privateKey: \"\"\n                    });\n                } else {\n                    swal({\n                        title: \"Ocurrió un error\",\n                        text: \"Ocurrió un error inesperado, inténtalo de nuevo más tarde\",\n                        icon: \"error\",\n                        button: \"Entendido!\",\n                        closeOnClickOutside: false\n                    });\n                }\n\n            } else {\n                user.sendEmailVerification().then(r => {\n                    saveDataInFirestore(user.uid, {\n                        city: \"\",\n                        email: user.email,\n                        name: user.displayName,\n                        phone: user.phoneNumber,\n                        authType: \"GOOGLE\",\n                        birthday: \"\",\n                        country: \"\",\n                        state: \"\",\n                        address: \"\",\n                        profileStatus: 0,\n                        countryComplete: \"\",\n                        addressToken: \"\",\n                        privateKey: \"\"\n                    });\n                }, (error) => {\n\n                });\n                auth.signOut();\n            }\n        }).catch((error) => {\n            auth.signOut();\n        })\n\n    }\n\n    const [values, setValues] = useState({\n        amount: '',\n        password: '',\n        weight: '',\n        weightRange: '',\n        showPassword1: false,\n        showPassword2: false\n    });\n\n    const handleClickShowPassword = (id) => {\n        if (id === 1) {\n            setValues({...values, showPassword1: !values.showPassword1});\n        } else if (id === 2) {\n            setValues({...values, showPassword2: !values.showPassword2});\n        }\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    return (\n\n        <div className=\"modal fade \" id=\"signUpModal\" data-backdrop=\"static\" data-keyboard=\"false\"\n             tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-xl modal-dialog-centered pl-xl-5 pr-xl-5\">\n                <div className=\"modal-content  registrobody pl-xl-5 pr-xl-5\">\n\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title col-12 text-light\" id=\"staticBackdropLabel\">Crea tu cuenta</h5>\n                        <button type=\"button\" id=\"closeModalSignUp\" className=\"close\" data-dismiss=\"modal\"\n                                aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n\n\n                    <div className=\"modal-body col-12 pl-xl-5 pr-xl-5\">\n\n\n                        <div className=\"form-group col-12 d-flex justify-content-center\">\n                            <GoogleButton\n                                label='Iniciar sesión con Google'\n                                onClick={signUpWithGoogle}\n                                style={{width: 500, borderRadius: 3}}\n                            />\n                        </div>\n\n                        <form className=\"form\" onSubmit={handleSubmit}>\n                            <div className=\"container mt-5 pl-xl-5 pr-xl-5\">\n                                <div className=\"row pl-xl-5 pr-xl-5\">\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"name\"\n                                                   name=\"name\"\n                                                   value={name}\n                                                   label=\"Nombre\"\n                                                   type=\"text\"\n                                                   onChange={(e) => setName(e.target.value)} variant=\"filled\"/>\n\n\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"lastname\"\n                                                   name=\"lastnane\"\n                                                   label=\"Apellido\"\n                                                   value={apellido}\n                                                   type=\"text\"\n                                                   onChange={(e) => setApellido(e.target.value)} variant=\"filled\"/>\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"outlined-basic\" label=\"Email\"\n                                                   value={email}\n                                                   type=\"email\"\n                                                   onChange={(e) => setEmail(e.target.value)} variant=\"filled\"/>\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <FormControl fullWidth className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                     variant=\"filled\">\n                                            <InputLabel htmlFor=\"filled-adornment-password\">Contraseña *</InputLabel>\n                                            <FilledInput\n                                                id=\"signup-password\"\n                                                type={values.showPassword1 ? 'text' : 'password'}\n                                                value={password}\n                                                onChange={(e) => setPassword(e.target.value)}\n                                                style={{backgroundColor: \"#FFFFFF\"}}\n                                                endAdornment={\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            aria-label=\"toggle password visibility\"\n                                                            onClick={() => handleClickShowPassword(1)}\n                                                            onMouseDown={handleMouseDownPassword}\n                                                            edge=\"end\"\n                                                        >\n                                                            {values.showPassword1 ? <Visibility/> : <VisibilityOff/>}\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                }\n                                            />\n                                        </FormControl>\n\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <FormControl fullWidth className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                     variant=\"filled\">\n                                            <InputLabel htmlFor=\"filled-adornment-password\">Repite tu contraseña\n                                                *</InputLabel>\n                                            <FilledInput\n                                                id=\"signup-password\"\n                                                type={values.showPassword2 ? 'text' : 'password'}\n                                                value={repeatedPassword}\n                                                onChange={(e) => setRepeteadPassword(e.target.value)}\n                                                style={{backgroundColor: \"#FFFFFF\"}}\n                                                endAdornment={\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            aria-label=\"toggle password visibility\"\n                                                            onClick={() => handleClickShowPassword(2)}\n                                                            onMouseDown={handleMouseDownPassword}\n                                                            edge=\"end\"\n                                                        >\n                                                            {values.showPassword2 ? <Visibility/> : <VisibilityOff/>}\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                }\n                                            />\n                                        </FormControl>\n\n                                    </div>\n\n                                    <div className=\"form-group form-check col-12 mb-3 pl-xl-5 pr-xl-5\">\n                                                    <span\n                                                        className=\"btn form-check ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5 form-regi\">\n\n                                                        <FormControlLabel\n                                                            control={\n                                                                <Checkbox className=\"form-check-input form-regi\"\n                                                                          checked={checkedValue}\n                                                                          onChange={handleCheckboxState}\n                                                                          required={true}\n                                                                          name=\"terminosyCondiciones\"/>}\n                                                            label=\"Aceptar términos y condiciones\" required\n                                                            name=\"terminosYCondiciones\"\n                                                        />\n                                                    </span>\n                                    </div>\n\n                                    <div className=\"form-group col-12 d-flex justify-content-center\">\n                                        <ReCAPTCHA sitekey={process.env.REACT_APP_RECAPTCHA}\n                                                   onChange={sendReCAPTCHAValue}/>\n                                    </div>\n\n                                    <div className=\"form-group col-12 mt-3\" id=\"signUpButtonDiv\">\n                                        <button type=\"submit\"\n                                                className=\"btn btn-registro\"\n                                                id=\"signUpButton\"\n                                                disabled={loading}>\n                                            {loading ? (\n                                                <div className=\"spinner-border text-dark\" role=\"status\">\n                                                    <span className=\"sr-only\">Registrando...</span>\n                                                </div>\n                                            ) : \"REGISTRATE\"}\n                                        </button>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </form>\n\n                    </div>\n\n                    <div className=\"modal-footer col-12 btn-footer\"></div>\n\n                </div>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default SignUpModal;","/home/snow/Documentos/ico-web-final/src/components/SignInModal.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/js/canvasUtils.js",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/js/encrypt.js",[],"/home/snow/Documentos/ico-web-final/src/components/Video.jsx",["326"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst Video = () => {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 videosunrep mt-5 p-0\">\n                <iframe src=\"https://www.youtube.com/embed/O5c2yMxyL54\" frameBorder=\"0\"\n                        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                        allowFullScreen></iframe>\n            </div>\n        </div>\n    );\n};\n\nexport default Video;","/home/snow/Documentos/ico-web-final/src/components/Countdown.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Soporte.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/PreguntasFrecuentes.jsx",["327"],"import React from 'react';\nimport Depmason from \"../images/depmason.svg\";\nimport Imgpreg from \"../images/imgpreg.svg\";\nimport Depmenos from \"../images/depmenos.svg\";\nimport Fade from 'react-reveal/Fade';\nimport {useTranslation} from 'react-i18next';\n\nconst PreguntasFrecuentes = () => {\n\n    const {t} = useTranslation();\n\n    const changeIcon = (imageID) => {\n        let image = document.getElementById(imageID)\n        if (image.src.match(\"on\")) {\n            image.src = Depmenos;\n        } else {\n            image.src = Depmason;\n        }\n    }\n\n    const items = [\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.0.Title'),\n            text: t('FAQ.Items.0.Text'),\n            id: \"myImageA\"\n        },\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.1.Title'),\n            text: t('FAQ.Items.1.Text'),\n            id: \"myImageB\"\n        },\n\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.2.Title'),\n            text: t('FAQ.Items.2.Text'),\n            id: \"myImageD\"\n        },\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.3.Title'),\n            text: t('FAQ.Items.3.Text'),\n            id: \"myImageE\"\n        },\n    ]\n\n    return (\n        <div className=\"row fondo-preg\">\n            <p className=\"frecprec\">{t('FAQ.Title')}</p>\n            <div className=\"col-lg-6 col-md-6 col-12 preguntas\">\n\n                {\n                    items.map((value, index) => (\n                        <div key={index}>\n                            <Fade left cascade>\n                                <p className=\"\">\n                                    <button className=\"btn btn-preg1\" onClick={() => changeIcon(value.id)}\n                                            type=\"button\" data-toggle=\"collapse\" data-target={\"#\" + value.id + \"target\"}\n                                            aria-expanded=\"false\" aria-controls=\"collapseExample\">\n                                        <img src={value.icon} id={value.id} alt=\"\" className=\"mas\"/>{value.title}\n                                    </button>\n                                </p>\n                                <div className=\"collapse btn-res1 \" id={value.id + \"target\"}>\n                                    <div className=\"text-preg\">\n                                        {value.text}\n                                    </div>\n                                </div>\n                            </Fade>\n                        </div>\n                    ))\n                }\n\n            </div>\n\n            <div className=\"col-md-6 col-12\">\n                <img src={Imgpreg} className=\"PREGIMG d-none d-lg-block d-md-block\"/>\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default PreguntasFrecuentes;","/home/snow/Documentos/ico-web-final/src/components/Newsletter.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Ventajas.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/MapaApp.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/WhitepaperHome.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/Home.jsx",["328","329","330"],"import React, {Suspense, lazy, useEffect} from 'react';\nimport '../App.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport monedag from \"../images/moneda.gif\";\nimport Banner from \"../components/Banner\";\nimport {useAuth} from \"../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\nconst Video = lazy(() => import ('../components/Video'));\nconst Countdown = lazy(() => import ('../components/Countdown'));\nconst Proyectos = lazy(() => import ('../components/ProyectosComponent'));\nconst Soporte = lazy(() => import ('../components/Soporte'));\nconst PreguntasFrecuentes = lazy(() => import ('../components/PreguntasFrecuentes'));\nconst Newsletter = lazy(() => import ('../components/Newsletter'));\nconst MapaApp = lazy(() => import ('../components/MapaApp'));\nconst Ventajas = lazy(() => import ('../components/Ventajas'));\nconst WhitepaperHome = lazy(() => import ('../components/WhitepaperHome'));\nconst Footer = lazy(() => import ('../components/Footer'));\n\n\nconst Home = () => {\n\n    const {currentUser} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {\n        }\n    }, []);\n\n    return (\n        <div className=\"container-fluid\">\n            <Banner/>\n            <Suspense fallback={\n                <div className=\"  container mt-5 text-center   justify-content-center\">\n                    <img className=\"moneda-carga\" align=\"top\" src={monedag}/><p>CARGANDO...</p>\n                </div>\n            }>\n                <Video/>\n                <Countdown/>\n                <WhitepaperHome/>\n                <Ventajas/>\n                <Proyectos/>\n                <MapaApp/>\n                <Soporte/>\n                <PreguntasFrecuentes/>\n                <Newsletter/>\n                <Footer/>\n            </Suspense>\n        </div>\n    )\n}\n\nexport default Home;\n","/home/snow/Documentos/ico-web-final/src/components/Banner.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Footer.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Navigation.jsx",["331","332","333","334","335","336"],"import '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport logonav from '../images/logonav.svg';\nimport React, {useState} from 'react';\nimport \"firebase/auth\";\nimport {NavLink, useHistory} from 'react-router-dom';\nimport 'firebase/firestore';\nimport SignUpModal from \"./SignUpModal\";\nimport SignInModal from \"./SignInModal\";\nimport '../js/mostrarmenu';\nimport {useTranslation} from 'react-i18next';\nimport i18next from 'i18next';\nimport USAFLAG from \"../images/usa_flag_icon.svg\";\nimport MEXICOFLAG from \"../images/mexico_flag_icon.svg\";\nimport {useAuth} from \"../context/AuthContext\";\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PasswordRecoveryModal from \"./PasswordRecoveryModal\";\n\nconst Navigation = () => {\n    const {t} = useTranslation();\n    const history = useHistory();\n    const {currentUser, logout} = useAuth();\n    const [logged] = useState(currentUser ? true : false);\n\n    function handleClick(lang) {\n        i18next.changeLanguage(lang)\n    }\n\n    async function handleLogout() {\n        try {\n            await logout();\n            window.location.reload();\n            history.push(\"/Home\");\n        } catch {\n        }\n    }\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick2 = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (e) => {\n        setAnchorEl(null);\n        console.log(e);\n        switch (e) {\n            case \"index\":\n                history.push(\"./\");\n                break;\n            case \"profile\":\n                history.push(\"./Profile\");\n                break;\n            case \"logout\":\n                handleLogout();\n                break;\n            case \"settings\":\n                history.push(\"./Settings\");\n                break;\n            default:\n                history.push(\"./\");\n                break;\n        }\n    };\n\n    const renderNavbar = () => {\n        if (logged) {\n\n            return (\n                <nav className=\"navbar navbar-expand-lg navbar-light fixed-top \" id=\"navbar\">\n                    <div className=\"container-fluid\">\n                        <NavLink className=\"navbar-brand navegacion  \" to=\"/\">\n                            <img alt=\"Navigation logo\" src={logonav}/>\n                        </NavLink>\n                        <button className=\"navbar-toggler mr-auto\" id=\"boton-nav\" type=\"button\" data-toggle=\"collapse\"\n                                data-target=\"#navbar-menu\"\n                                aria-controls=\"navbar-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div className=\" collapse navbar-collapse\" id=\"navbar-menu\">\n                            <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                                <li className=\"nav-item\">\n                                    <h5>SUNSHINE</h5>\n                                </li>\n                            </ul>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('en')}\n                               data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={USAFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('es')}\n                               data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={MEXICOFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                            <div>\n                                <Button aria-controls=\"simple-menu\" variant=\"contained\"\n                                        style={{backgroundColor: \"#0655af\", color: \"white\"}} aria-haspopup=\"true\"\n                                        onClick={handleClick2}>\n                                    {currentUser ? currentUser.email : \"Invitado\"} <ExpandMoreIcon/>\n                                </Button>\n                                <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={anchorEl}\n                                    keepMounted\n                                    open={Boolean(anchorEl)}\n                                    onClose={handleClose}\n                                >\n                                    <MenuItem id=\"index\" onClick={e => handleClose(e.target.id)}>Inicio</MenuItem>\n                                    <MenuItem id=\"profile\" onClick={e => handleClose(e.target.id)}>Perfil</MenuItem>\n                                    <MenuItem id=\"settings\" onClick={e => handleClose(e.target.id)}>Ajustes</MenuItem>\n                                    <MenuItem id=\"logout\" onClick={e => handleClose(e.target.id)}>Cerrar\n                                        sesión</MenuItem>\n                                </Menu>\n                            </div>\n\n                        </div>\n                    </div>\n                </nav>\n            )\n\n        } else {\n            return (\n                <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"navbar\">\n                    <div className=\"container-fluid\">\n                        <NavLink className=\"navbar-brand navegacion  \" to=\"/\">\n                            <img alt=\"Logo navigation\" src={logonav}/>\n                        </NavLink>\n                        <button className=\"navbar-toggler mr-auto\" id=\"boton-nav\" type=\"button\" data-toggle=\"collapse\"\n                                data-target=\"#navbar-menu\"\n                                aria-controls=\"navbar-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div className=\" collapse navbar-collapse\" id=\"navbar-menu\">\n                            <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                                <li className=\"nav-item\">\n                                    <NavLink className=\"navbar-brand nav-link navegacion\" data-toggle=\"collapse\"\n                                             data-target=\".navbar-collapse.show\"\n                                             to=\"./Acerca\">{t('Navbar.Acerca')}\n                                    </NavLink>\n                                </li>\n                                <li className=\"nav-item \">\n\n                                    <NavLink className=\"navbar-brand nav-link navegacion\" tap-index=\"-1\"\n                                             activeClassName=\"active\" area-disabled=\"true\" data-toggle=\"collapse\"\n                                             data-target=\".navbar-collapse.show\"\n                                             to=\"./Roaptomap\">{t('Navbar.RoadToMap')}\n                                    </NavLink>\n                                </li>\n                                <li className=\"nav-item \">\n\n                                    <NavLink className=\"navbar-brand nav-link navegacion\" activeClassName=\"active\"\n                                             area-disabled=\"true\" data-toggle=\"collapse\"\n                                             data-target=\".navbar-collapse.show\"\n                                             to=\"./ProyectosComponent\">{t('Navbar.Proyectos')}\n                                    </NavLink>\n                                </li>\n                            </ul>\n                            <a href=\"#\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <button type=\"button\" id=\"signInButton\" className=\"navsesion btn btn-link\"\n                                        data-toggle=\"modal\" data-target=\"#signInModal\"\n                                >{t('Navbar.SignIn')}\n                                </button>\n                            </a>\n\n                            <a href=\"#\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <button type=\"button\" className=\"navsesion btn btn-link\" data-toggle=\"modal\"\n                                        data-target=\"#signUpModal\"\n                                >\n                                    {t('Navbar.SignUp')}\n                                </button>\n                            </a>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('en')}\n                               data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={USAFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('es')}\n                               data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={MEXICOFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                        </div>\n                        <SignUpModal/>\n                        <SignInModal/>\n                        <PasswordRecoveryModal/>\n                    </div>\n                </nav>\n            )\n        }\n    }\n\n    return (\n\n        <>\n            {renderNavbar()}\n        </>\n    )\n}\nexport default Navigation;","/home/snow/Documentos/ico-web-final/src/components/ProyectosComponent.jsx",["337","338","339"],"import React, {useEffect} from 'react';\nimport Celsym from \"../images/celsym.svg\";\nimport circulo1 from \"../images/circulo1.svg\";\nimport Celhawk from \"../images/celhawk.svg\";\nimport circulo2 from \"../images/circulo2.svg\";\nimport Cellyon from \"../images/cellyon.svg\";\nimport circulo3 from \"../images/circulo3.svg\";\nimport Engranaje from \"../images/engranaje.svg\";\nimport fococontorno from \"../images/fococontorno.svg\";\nimport Engrane1 from \"../images/engrane1.svg\";\nimport Engrane2 from \"../images/engrane2.svg\";\nimport Engrane3 from \"../images/engrane3.svg\";\nimport Engrane4 from \"../images/engrane4.svg\";\nimport Engrane5 from \"../images/engrane5.svg\";\nimport Engrane6 from \"../images/engrane6.svg\";\nimport Engrane7 from \"../images/engrane7.svg\";\nimport Zoom from 'react-reveal/Zoom';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from \"react-router-dom\";\nimport {useAuth} from \"../context/AuthContext\";\n\nconst ProyectosComponent = () => {\n\n    const {t} = useTranslation();\n    const {currentUser, logout} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {\n        }\n    }, []);\n\n    return (\n        <div>\n\n            <div className=\"row\">\n                <div className=\"col-12 sec6\">\n                    <span className=\"titulo6 \">{t('Projects.Title')}</span>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12 contenedor-engra\">\n                    <div className=\" d-flex justify-content-start \">\n                        <button className=\" btn fap-btn2\" type=\"button\" data-toggle=\"modal\"\n                                data-target=\"#bd-example-modal-lg\">\n\n                            <div className=\"modal fade modal-fullscreen bd-example-modal-lg\" id=\"bd-example-modal-lg\"\n                                 data-backdrop=\"static\" data-keyboard=\"false\"\n                                 tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\n                                 aria-hidden=\"true\">\n                                <div className=\"modal-dialog modal-xl modal-dialog-centered\">\n                                    <button hidden type=\"button\" id=\"closeSynmphonyModal\" className=\"close\"\n                                            data-dismiss=\"modal\"\n                                            aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                    <Zoom>\n                                        <div className=\"modal-content modal-sym \">\n\n                                            <div className=\"modal-body row container-fluid \">\n\n                                                <div className=\"col-12 col-xl-4\">\n\n                                                    <img src={Celsym} alt=\"Celsym\" className=\"modal-imgsym img-fluid \"\n                                                    />\n                                                </div>\n                                                <div className=\"col-12 col-xl-8\">\n\n                                                 <span className=\"modal-titu\">{t('Projects.Symphony.ModalTitle')}\n                                                     <p className=\"modal-text\">({t('Projects.Symphony.Type')})\n                                                         <p className=\"modal-cuerpo\">\n                                                            {t('Projects.Symphony.Text')}\n                                                         </p>\n                                                     </p>\n                                                 </span>\n\n                                                </div>\n                                            </div>\n\n                                        </div>\n                                    </Zoom>\n                                </div>\n                            </div>\n\n                            <img src={circulo1} className=\"fap-btn2-1\" alt=\"Circle 1\"/>\n                            <svg className=\"svg1\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n                                 width=\"70mm\" height=\"70mm\" viewBox=\"0 0 120 120\">\n                                <circle className=\"circle1\" cx=\"60\" cy=\"60\" r=\"50\"\n                                        fill=\"transparent\"/>\n                            </svg>\n                            <p className=\"textbtn2\"> SYMPHONY</p></button>\n                        <br/>\n                        <div className=\"con-txtbtn\">\n                            <p className=\" textsyn\"><br/><br/><br/><br/>\n                                <br/><br/><br/> {t('Projects.Symphony.ModalTitle')} <br/></p><p\n                            className=\"mintext\">({t('Projects.Symphony.Type')})</p>\n                        </div>\n                    </div>\n\n                    <div className=\"col-12 d-flex justify-content-center \">\n                        <button className=\"btn fap-btn3\" type=\"button\" data-toggle=\"modal\"\n                                data-target=\".bd-example-modal-lg3\">\n                            <div className=\"modal  fade modal-fullscreen bd-example-modal-lg3\" tabIndex=\"-1\"\n                                 role=\"dialog\"\n                                 aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\">\n                                <div\n                                    className=\"modal-dialog modal-cont modal-dialog-centered modal-dialog-scrollable  modal-xl \">\n                                    <div className=\" modal-content p-0 modal-sym \">\n                                        <div className=\"modal-body row container-fluid \">\n\n                                            <div className=\"col-lg-4 col-12 justify-content-center\">\n                                                <img src={Celhawk} alt=\"Hawk\" className=\"modal-imgsym img-fluid \"\n                                                />\n                                            </div>\n                                            <div className=\"col-lg-8 col-12\">\n\n                                                 <span className=\"modal-titu\"> {t('Projects.Hawk.ModalTitle')}\n                                                     <p className=\"modal-text\">{t('Projects.Hawk.Type')}\n                                                         <p className=\"modal-cuerpo\">{t('Projects.Hawk.Text')}</p>\n                                                     </p>\n                                                 </span>\n\n                                            </div>\n\n\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <img src={circulo2} className=\"fap-btn3-2\" alt=\"Circle 2\"/>\n                            <svg className=\"svg2\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n                                 width=\"70mm\" height=\"70mm\" viewBox=\"0 0 120 120\">\n                                <circle cx=\"60\" className=\"circle2\" cy=\"60\" r=\"50\"\n                                        fill=\"transparent\"/>\n                            </svg>\n                            <p className=\"textbtn3\"> HAWK</p></button>\n                        <p className=\"textsyn2\"><br/> <br/> <br/>{t('Projects.Hawk.ModalTitle')}</p><p\n                        className=\" mintext2\">{t('Projects.Hawk.Type')}</p></div>\n\n\n                    <div className=\"d-flex justify-content-end\">\n\n                        <button className=\"btn fap-btn4\"\n                                type=\"button\" data-toggle=\"modal\"\n                                data-target=\".bd-example-modal-lg2\">\n                            <div className=\"modal  fade modal-fullscreen bd-example-modal-lg2\" tabIndex=\"-1\"\n                                 role=\"dialog\"\n                                 aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\">\n                                <div className=\"modal-dialog modal-cont modal-xl\">\n                                    <div className=\" modal-content modal-sym \">\n                                        <div className=\"row container-fluid \">\n\n                                            <div className=\"col-lg-3 col-12 cont-cel\">\n\n                                                <img src={Cellyon} alt=\"Lyon\" className=\"modal-imgsym img-fluid\"\n                                                />\n                                            </div>\n                                            <div className=\"col-lg-9 col-12\">\n\n                                             <span className=\"modal-titu\"> {t('Projects.Lion.ModalTitle')}\n                                                 <p className=\"modal-text\"> {t('Projects.Lion.Type')}<p\n                                                     className=\"modal-cuerpo\">\n                                             {t('Projects.Lion.Text')}\n                                             </p></p>\n\n                                             </span>\n\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <img src={circulo3} className=\"fap-btn4-3\" alt=\"Circle 3\"/>\n                            <svg className=\"svg3\" version=\"1.1\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 width=\"70mm\" height=\"70mm\" viewBox=\"0 0 120 120\">\n                                <circle cx=\"60\" cy=\"60\" r=\"50\"\n                                        fill=\"transparent\"/>\n                            </svg>\n                            <p className=\"textbtn4\"> LION</p>\n\n                        </button>\n                        <p className=\"textsyn3\"><br/>{t('Projects.Lion.ModalTitle')}</p><p\n                        className=\" mintext3\">{t('Projects.Lion.Type')}</p>\n                    </div>\n                    <img src={Engranaje} alt=\"Engranaje\" className=\"engranaje engranejegris\"/>\n\n                    <div className=\"row\">\n                        <div className=\"col-6 focoenv-cont\">\n                            <img src={fococontorno} alt=\"Foco 1\" className=\"focoenv\"/>\n                            <img src={Engrane1} alt=\"Foco 1\" className=\"engrane1foc engranaje\"/>\n                            <img src={Engrane2} alt=\"Foco 2\" className=\"engrane2foc engranaje\"/>\n                            <img src={Engrane3} alt=\"Foco 3\" className=\"engrane3foc engranaje\"/>\n                            <img src={Engrane4} alt=\"Foco 4\" className=\"engrane4foc engranaje\"/>\n                            <img src={Engrane5} alt=\"Foco 5\" className=\"engrane5foc engranaje\"/>\n                            <img src={Engrane6} alt=\"Foco 6\" className=\"engrane6foc engranaje\"/>\n                            <img src={Engrane7} alt=\"Foco 7\" className=\"engrane7foc engranaje\"/>\n\n                        </div>\n                    </div>\n\n                </div>\n\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default ProyectosComponent;","/home/snow/Documentos/ico-web-final/src/routes/Proyectos.jsx",[],"/home/snow/Documentos/ico-web-final/src/config/firebase.js",[],"/home/snow/Documentos/ico-web-final/src/routes/Roaptomap.jsx",["340","341"],"import '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, {useEffect} from \"react\";\nimport Footer from '../components/Footer';\nimport DemoCarousel from '../components/Carousel.jsx';\nimport maparoad from '../images/road-map.png';\nimport {useTranslation} from 'react-i18next';\nimport lineascar from \"../images/lineas.svg\";\nimport {useAuth} from \"../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\nconst RoaptoMapa = () => {\n    const {t} = useTranslation();\n    const {currentUser} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {\n        }\n    }, []);\n\n    return (\n        <div className=\"road\">\n            <div className=\"row\">\n                <img className=\"img-fluid linea-car-1 d-flex d-md-none\" src={lineascar} alt=\"linacarrusel\"/>\n                <p className=\"text-roap-map\">\n                    <h1 align=\"center\">ROAD MAP</h1>\n                    <p className=\"text-roap-1 d-none d-md-flex\">{t('RoadToMap.0')}</p>\n                    <p className=\"text-roap-2 d-none d-md-flex\">{t('RoadToMap.1')}</p>\n                    <p className=\"text-roap-3 d-none d-md-flex\">{t('RoadToMap.2')}</p>\n                    <p className=\"text-roap-4 d-none d-md-flex\">{t('RoadToMap.3')}</p>\n                    <p className=\"text-roap-5 d-none d-md-flex\">{t('RoadToMap.4')}</p>\n                    <p className=\"text-roap-6 d-none d-md-flex\">{t('RoadToMap.5')}</p>\n                    <p className=\"text-roap-7 d-none d-md-flex\">{t('RoadToMap.6')}</p>\n                    <p className=\"text-roap-8 d-none d-md-flex\">{t('RoadToMap.7')}</p>\n                </p>\n                <img src={maparoad} className=\"d-none d-md-flex maparoad\" alt=\"Roadmap\"/>\n            </div>\n            <DemoCarousel/>\n            <Footer/>\n        </div>\n    )\n}\n\n\nexport default RoaptoMapa;","/home/snow/Documentos/ico-web-final/src/components/Carousel.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/Pdf.jsx",["342"],"import React, {useState} from 'react';\nimport '../App.css';\nimport '../css/whitepaper.css';\nimport Docpdf from '../docs/Avance.pdf';\nimport Loader from '../components/Loader';\n\nimport {Document, Page} from 'react-pdf';\nimport {pdfjs} from 'react-pdf';\n\nimport ControlPanel from '../components/ControlPanel';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n\n\nconst Pdf = () => {\n\n    const [numPages, setNumPages] = useState(null);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [isLoading, setIsLoading] = useState(true);\n    const [scale, setScale] = useState(1.0);\n\n    function onDocumentLoadSuccess({numPages}) {\n        setNumPages(numPages);\n        setIsLoading(false);\n    }\n\n    return (\n\n        <div className=\"row\">\n\n            <div className=\"col-12 fondopdf p-3 d-none d-md-block\">\n\n                <iframe width='800' data-toggle=\"collapse\" data-target=\".navbar-collapse.show\"\n                         className=\"google-viewer\" height='600' frameborder='0'\n                         src=\"https://firebasestorage.googleapis.com/v0/b/sunshine-ico.appspot.com/o/WHITEPAPER%20SUNI.pdf?alt=media&token=6a606197-0768-449d-b35b-e9147ce27bfe\"></iframe>\n                <Loader isLoading={isLoading}/>\n\n            </div>\n            <div className=\"col-12 fondopdf p-3 d-block d-md-none\">\n                <Loader isLoading={isLoading}/>\n                <ControlPanel numPages={numPages}\n                              pageNumber={pageNumber}\n                              setPageNumber={setPageNumber}\n                              setScale={setScale}/>\n\n                <Document className=\"pdfcontainer\"\n                          file={Docpdf}\n                          onLoadSuccess={onDocumentLoadSuccess}>\n                    <Page pageNumber={pageNumber} scale={scale}/>\n                </Document>\n            </div>\n        </div>\n\n\n    );\n}\n\n\nexport default Pdf;\n        ","/home/snow/Documentos/ico-web-final/src/components/Loader.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/ControlPanel.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/Acerca.jsx",["343","344","345","346","347","348","349"],"                                                                                   import React, {useState, useEffect} from \"react\";\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Footer from '../components/Footer';\nimport Linkecontact from \"../images/linkecontact.svg\";\nimport Twitercontact from \"../images/twitercontact.svg\";\nimport '../css/acerca.css';\nimport {useTranslation} from 'react-i18next';\nimport ACCESIBILIDAD from '../images/Accesibilidad-01.png';\nimport PRIVACIDAD from '../images/provacidad-04.png';\nimport SOLIDEZ from '../images/solidez-02.png';\nimport TRABAJOEQUIPO from '../images/trabajo en equipo-03.png';\nimport VIRY from '../images/team/VIRY.jpg';\nimport JOSS from '../images/team/JOS.jpg';\nimport CHRIS from '../images/team/CHRIS.jpg';\nimport MANU from '../images/team/MANU.jpg';\nimport CRIS from '../images/team/CRIS.jpg';\nimport Fade from 'react-reveal/Fade';\nimport Zoom from 'react-reveal/Zoom';\nimport CardsWorkers from \"../components/CardsWorkers.jsx\";\nimport {useAuth} from \"../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\n\nconst Acerca = () => {\n\n    const {t} = useTranslation();\n    const {currentUser} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {}\n    }, []);\n\n    const differences = [\n        {\n            image: ACCESIBILIDAD,\n            title: t('AboutSection.Differences.Items.0.Title'),\n            description: t('AboutSection.Differences.Items.0.Text')\n        },\n        {\n            image: PRIVACIDAD,\n            title: t('AboutSection.Differences.Items.1.Title'),\n            description: t('AboutSection.Differences.Items.1.Text')\n        },\n        {\n            image: SOLIDEZ,\n            title: t('AboutSection.Differences.Items.2.Title'),\n            description: t('AboutSection.Differences.Items.2.Text')\n        },\n        {\n            image: TRABAJOEQUIPO,\n            title: t('AboutSection.Differences.Items.3.Title'),\n            description: t('AboutSection.Differences.Items.3.Text')\n        }\n    ];\n\n    const team2 = [\n        {\n            image: VIRY,\n            name: t('AboutSection.Team.Items.0.Name'),\n            career: t('AboutSection.Team.Items.0.Career'),\n            description: t('AboutSection.Team.Items.0.Description'),\n            social: {\n                linkedin: \"https://mx.linkedin.com/in/viry-uribe-879b68163/\",\n                twitter: \"https://twitter.com/home?lang=es\"\n            }\n        },\n        {\n            image: JOSS,\n            name: t('AboutSection.Team.Items.1.Name'),\n            career: t('AboutSection.Team.Items.1.Career'),\n            description: t('AboutSection.Team.Items.1.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/jocelyn-uribe-maldonado-720a90203/\",\n                twitter: \"https://twitter.com/jocelyn_um\"\n            }\n        },\n        {\n            image: CHRIS,\n            name: t('AboutSection.Team.Items.2.Name'),\n            career: t('AboutSection.Team.Items.2.Career'),\n            description: t('AboutSection.Team.Items.2.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/ahtziri-antonio-pe%C3%B1a-142705179/\",\n                twitter: \"\"\n            }\n        },\n        {\n            image: MANU,\n            name: t('AboutSection.Team.Items.3.Name'),\n            career: t('AboutSection.Team.Items.3.Career'),\n            description: t('AboutSection.Team.Items.3.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/jose-manuel-viniegra-molina-aab9a51a8/\",\n                twitter: \"https://twitter.com/manuel87129931\"\n            }\n        },\n        {\n            image: CRIS,\n            name: t('AboutSection.Team.Items.4.Name'),\n            career: t('AboutSection.Team.Items.4.Career'),\n            description: t('AboutSection.Team.Items.4.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/cristian-augusto-armenta-garcia/\",\n                twitter: \"https://twitter.com/CRISTIANAUGUS14\"\n            }\n        }\n    ]\n\n    return (\n        <div>\n            <div className=\"container-fluid\">\n                <Fade left cascade>\n                    <div className=\"row mt-5 mb-5 pt-5 pb-5 pl-md-5 pr-md-5 pl-lg-5 pr-lg-5 pl-xl-5 pr-xl-5 bg-about2\">\n                        <div className=\"col-12 mt-5  pb-5\">\n                            <h1 className=\"text-center text-preview text-size-banner\">\n                                {t('AboutSection.Title')}\n                            </h1>\n                            <hr/>\n                        </div>\n                        <div className=\"col-12 mb-5\">\n                            <p className=\"text-center mb-5 text-preview pl-md-5 pr-md-5 pl-lg-5 pr-lg-5 pl-xl-5 pr-xl-5\"\n                               style={{fontSize: 30}}>\n                                {t('AboutSection.Introduction.0')}\n                            </p>\n                        </div>\n                    </div>\n\n                    <div className=\"row justify-content-center\">\n                        <div className=\"  col-md-3 cont-card-mision p-5\">\n                            <div className=\"d-flex justify-content-center mt-5\">\n                                <h3 className=\"title-vision \">   {t('AboutSection.Mision.Title')}</h3>\n                            </div>\n                            <div className=\"col-12 d-flex text-center \">\n                                <h5 className=\"parrafo-vision p-1\"> {t('AboutSection.Mision.description')}</h5>\n                            </div>\n                        </div>\n\n                        <div className=\"col-md-3 cont-card-mision p-5\">\n                            <div className=\"d-flex justify-content-center mt-5\">\n                                <h3 className=\"title-vision\"> {t('AboutSection.Vision.Title')}</h3>\n                            </div>\n                            <div className=\"col-12 d-flex text-center\">\n                                <h5 className=\"parrafo-vision p-1\">{t('AboutSection.Vision.description')}</h5>\n                            </div>\n                        </div>\n                    </div>\n                </Fade>\n\n                <div className=\"row pb-5 justify-content-center\">\n                    <div className=\"col-12 pt-4 pb-4\">\n                        <h1 className=\"text-size-title-differences text-center\">\n                            <Fade left cascade>{t('AboutSection.Differences.Title')}</Fade>\n                        </h1>\n                    </div>\n                    {\n                        differences.map((value, index) => (\n                            <Zoom>\n                                <div id={index}\n                                     className=\" col-12 col-sm-12 row col-lg-4 col-xl-4 cont-diferencia\">\n                                    <img src={value.image} alt=\"Member photo\" className=\"icons-differences\"/>\n                                    <h3 className=\"text-center\">{value.title}</h3>\n                                    <p className=\"text-center\">{value.description}</p>\n                                </div>\n                            </Zoom>\n                        ))\n                    }\n                </div>\n                <CardsWorkers/>\n                <div className=\"container-fluid pb-5 d-block d-md-none\">\n                    <div className=\"container \">\n                        <div className=\"row pb-5\">\n                            {\n                                team2.map((value, index) => (\n                                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 col-xl-4\">\n                                        <div className=\"card text-light text-center mt-5 mb-5 bg-cards\">\n\n                                            <div className=\"card-img-top mt-5\">\n                                                <img className=\"rounded-circle img-fluid teams-images w-50\"\n                                                     src={value.image} alt=\"Card image cap\"/>\n                                            </div>\n\n                                            <div className=\"card-body mt-3 d-block\">\n                                                <h3 className=\"card-title mb-3\">{value.name}</h3>\n                                                <h6 className=\"card-subtitle mb-4\">{value.career}</h6>\n                                                <div style={{height: 120}}>\n                                                    <p className=\"card-text mb-4\">{value.description}</p>\n                                                </div>\n                                            </div>\n                                            <div className=\"card-body border-top\">\n                                                <div className=\"row\">\n                                                    <div className=\"col-6\">\n                                                        <a href={value.social.linkedin} target=\"_blank\">\n                                                            <img src={Linkecontact} alt=\"face\"/>\n                                                        </a>\n                                                    </div>\n                                                    <div className=\"col-6\">\n                                                        <a href={value.social.twitter || \"#\"}\n                                                           className={value.social.twitter || \"disabled\"}\n                                                           target=\"_blank\">\n                                                            <img src={Twitercontact} alt=\"face\"/>\n                                                        </a>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <button className=\"btn bg-cards text-light btn-lg btn-block\" data-toggle=\"modal\"\n                                    data-target=\"#staticBackdropcon\">{t('AboutSection.ButtonText')}</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container-fluid\">\n                <Footer/>\n            </div>\n        </div>\n    )\n}\n\nexport default Acerca;\n","/home/snow/Documentos/ico-web-final/src/components/CardsWorkers.jsx",[],"/home/snow/Documentos/ico-web-final/src/js/mostrarmenu.js",["350","351","352"],"import React, {Component} from 'react';\r\nimport $ from \"jquery\";\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\r\n\r\n    let ubicacionPrincipal = window.pageYOffset;\r\n    window.onscroll = function () {\r\n        let Dezplazamiento_actual = window.pageYOffset;\r\n        if (ubicacionPrincipal >= Dezplazamiento_actual) {\r\n            document.getElementById('navbar').style.top = '0';\r\n        } else {\r\n            document.getElementById('navbar').style.top = '-100px';\r\n        }\r\n        ubicacionPrincipal = Dezplazamiento_actual;\r\n    }\r\n});\r\n","/home/snow/Documentos/ico-web-final/src/js/cuentaregresiva.js",["353"],"import '../App.css';\nimport React from 'react';\nimport Lineadias from '../images/lineadias.svg';\n\nexport default function contador(id, limitDate, finalMessage) {\n    const $contador = document.getElementById(id), contadorDate = new Date(limitDate).getTime();\n    let contadorTempo = setInterval(() => {\n        let now = new Date().getTime(),\n            limitTime = contadorDate - now,\n            days = (Math.floor(limitTime / (1000 * 60 * 60 * 24))),\n            hours = (\"0\" + Math.floor(limitTime % (1000 * 60 * 60 * 24) / (1000 * 60 * 60))).slice(-2),\n            minutes = (\"0\" + Math.floor(limitTime % (1000 * 60 * 60) / (1000 * 60))).slice(-2),\n            seconds = (\"0\" + Math.floor(limitTime % (1000 * 60) / (1000))).slice(-2);\n        $contador.innerHTML = `<button class=\" btn contador-fap fap-dias fap-btn \"><p class=\"num-conta\"> ${days}</p> <img src=${Lineadias} alt=\"linea\" class=\"linea-dias\"/></button> <i class=\"texto-contenedor\">\n    <br/>dias</i> \n    \n    <button class=\"btn contador-fap fap-horas fap-btn\"><p class=\"num-conta\"> ${hours}</p></button> <br/><i class=\"texto-contenedor texto-horas\">\n    <br/>horas</i>\n     <button class=\"btn contador-fap fap-minutos fap-btn \"><p class=\"num-conta\">${minutes}</p></button><br/><i class=\"texto-contenedor texto-min\">\n     <br/>minutos</i>\n    <button class=\"btn contador-fap fap-seg fap-btn\"><p class=\"num-conta\">${seconds}</p></button><br/><i class=\"texto-contenedor texto-seg\">\n    <br/>segundos</i> `\n\n        if (limitTime < 0) {\n            clearInterval(contadorTempo);\n            $contador.innerHTML = `<h1 class=\"fintokens\">${finalMessage}</h1>  `\n        }\n\n\n    }, 1000);\n\n\n}","/home/snow/Documentos/ico-web-final/src/context/CheckoutContext.jsx",[],{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","replacedBy":"357"},{"ruleId":"358","severity":1,"message":"359","line":38,"column":8,"nodeType":"360","endLine":38,"endColumn":10,"suggestions":"361"},{"ruleId":"362","severity":1,"message":"363","line":79,"column":9,"nodeType":"364","messageId":"365","endLine":187,"endColumn":10},{"ruleId":"358","severity":1,"message":"366","line":299,"column":8,"nodeType":"360","endLine":299,"endColumn":10,"suggestions":"367"},{"ruleId":"358","severity":1,"message":"368","line":36,"column":8,"nodeType":"360","endLine":36,"endColumn":10,"suggestions":"369"},{"ruleId":"358","severity":1,"message":"370","line":59,"column":7,"nodeType":"360","endLine":59,"endColumn":20,"suggestions":"371"},{"ruleId":"372","severity":1,"message":"373","line":5,"column":8,"nodeType":"374","messageId":"375","endLine":5,"endColumn":20},{"ruleId":"372","severity":1,"message":"376","line":1,"column":16,"nodeType":"374","messageId":"375","endLine":1,"endColumn":24},{"ruleId":"377","severity":1,"message":"378","line":27,"column":53,"nodeType":"379","messageId":"380","endLine":27,"endColumn":57},{"ruleId":"372","severity":1,"message":"381","line":90,"column":11,"nodeType":"374","messageId":"375","endLine":90,"endColumn":16},{"ruleId":"358","severity":1,"message":"382","line":94,"column":8,"nodeType":"360","endLine":94,"endColumn":17,"suggestions":"383"},{"ruleId":"384","severity":1,"message":"385","line":118,"column":34,"nodeType":"386","messageId":"387","endLine":118,"endColumn":36},{"ruleId":"377","severity":1,"message":"378","line":120,"column":107,"nodeType":"379","messageId":"380","endLine":120,"endColumn":111},{"ruleId":"377","severity":1,"message":"378","line":120,"column":163,"nodeType":"379","messageId":"380","endLine":120,"endColumn":167},{"ruleId":"388","severity":1,"message":"389","line":164,"column":153,"nodeType":"390","endLine":164,"endColumn":242},{"ruleId":"391","severity":1,"message":"392","line":206,"column":40,"nodeType":"390","messageId":"393","endLine":206,"endColumn":130,"fix":"394"},{"ruleId":"391","severity":1,"message":"392","line":211,"column":40,"nodeType":"390","messageId":"393","endLine":211,"endColumn":125,"fix":"395"},{"ruleId":"372","severity":1,"message":"396","line":48,"column":25,"nodeType":"374","messageId":"375","endLine":48,"endColumn":31},{"ruleId":"372","severity":1,"message":"397","line":55,"column":12,"nodeType":"374","messageId":"375","endLine":55,"endColumn":20},{"ruleId":"372","severity":1,"message":"398","line":61,"column":12,"nodeType":"374","messageId":"375","endLine":61,"endColumn":27},{"ruleId":"372","severity":1,"message":"399","line":61,"column":29,"nodeType":"374","messageId":"375","endLine":61,"endColumn":47},{"ruleId":"372","severity":1,"message":"400","line":70,"column":17,"nodeType":"374","messageId":"375","endLine":70,"endColumn":22},{"ruleId":"358","severity":1,"message":"401","line":80,"column":8,"nodeType":"360","endLine":80,"endColumn":10,"suggestions":"402"},{"ruleId":"403","severity":1,"message":"404","line":136,"column":17,"nodeType":"405","messageId":"406","endLine":136,"endColumn":39},{"ruleId":"403","severity":1,"message":"404","line":196,"column":17,"nodeType":"405","messageId":"406","endLine":196,"endColumn":40},{"ruleId":"372","severity":1,"message":"407","line":216,"column":16,"nodeType":"374","messageId":"375","endLine":216,"endColumn":23},{"ruleId":"372","severity":1,"message":"408","line":216,"column":25,"nodeType":"374","messageId":"375","endLine":216,"endColumn":34},{"ruleId":"409","severity":1,"message":"410","line":268,"column":21,"nodeType":"390","endLine":269,"endColumn":60},{"ruleId":"388","severity":1,"message":"411","line":268,"column":21,"nodeType":"390","endLine":269,"endColumn":60},{"ruleId":"372","severity":1,"message":"412","line":4,"column":8,"nodeType":"374","messageId":"375","endLine":4,"endColumn":19},{"ruleId":"372","severity":1,"message":"413","line":5,"column":8,"nodeType":"374","messageId":"375","endLine":5,"endColumn":19},{"ruleId":"372","severity":1,"message":"414","line":17,"column":5,"nodeType":"374","messageId":"375","endLine":17,"endColumn":11},{"ruleId":"372","severity":1,"message":"415","line":19,"column":5,"nodeType":"374","messageId":"375","endLine":19,"endColumn":15},{"ruleId":"372","severity":1,"message":"416","line":21,"column":5,"nodeType":"374","messageId":"375","endLine":21,"endColumn":14},{"ruleId":"372","severity":1,"message":"417","line":22,"column":5,"nodeType":"374","messageId":"375","endLine":22,"endColumn":9},{"ruleId":"372","severity":1,"message":"418","line":23,"column":5,"nodeType":"374","messageId":"375","endLine":23,"endColumn":10},{"ruleId":"372","severity":1,"message":"419","line":57,"column":12,"nodeType":"374","messageId":"375","endLine":57,"endColumn":18},{"ruleId":"372","severity":1,"message":"420","line":63,"column":12,"nodeType":"374","messageId":"375","endLine":63,"endColumn":19},{"ruleId":"372","severity":1,"message":"421","line":72,"column":12,"nodeType":"374","messageId":"375","endLine":72,"endColumn":24},{"ruleId":"372","severity":1,"message":"422","line":73,"column":12,"nodeType":"374","messageId":"375","endLine":73,"endColumn":21},{"ruleId":"372","severity":1,"message":"423","line":74,"column":12,"nodeType":"374","messageId":"375","endLine":74,"endColumn":21},{"ruleId":"372","severity":1,"message":"424","line":74,"column":23,"nodeType":"374","messageId":"375","endLine":74,"endColumn":35},{"ruleId":"372","severity":1,"message":"425","line":76,"column":12,"nodeType":"374","messageId":"375","endLine":76,"endColumn":25},{"ruleId":"372","severity":1,"message":"426","line":77,"column":12,"nodeType":"374","messageId":"375","endLine":77,"endColumn":23},{"ruleId":"372","severity":1,"message":"427","line":77,"column":25,"nodeType":"374","messageId":"375","endLine":77,"endColumn":39},{"ruleId":"372","severity":1,"message":"428","line":81,"column":19,"nodeType":"374","messageId":"375","endLine":81,"endColumn":27},{"ruleId":"372","severity":1,"message":"400","line":86,"column":17,"nodeType":"374","messageId":"375","endLine":86,"endColumn":22},{"ruleId":"358","severity":1,"message":"429","line":105,"column":8,"nodeType":"360","endLine":105,"endColumn":22,"suggestions":"430"},{"ruleId":"362","severity":1,"message":"363","line":117,"column":21,"nodeType":"364","messageId":"365","endLine":131,"endColumn":22},{"ruleId":"431","severity":1,"message":"432","line":184,"column":29,"nodeType":"390","endLine":186,"endColumn":75},{"ruleId":"377","severity":1,"message":"378","line":279,"column":16,"nodeType":"379","messageId":"380","endLine":279,"endColumn":20},{"ruleId":"377","severity":1,"message":"378","line":283,"column":9,"nodeType":"379","messageId":"380","endLine":283,"endColumn":13},{"ruleId":"358","severity":1,"message":"433","line":43,"column":8,"nodeType":"360","endLine":43,"endColumn":47,"suggestions":"434"},{"ruleId":"372","severity":1,"message":"435","line":3,"column":17,"nodeType":"374","messageId":"375","endLine":3,"endColumn":26},{"ruleId":"372","severity":1,"message":"436","line":31,"column":25,"nodeType":"374","messageId":"375","endLine":31,"endColumn":36},{"ruleId":"372","severity":1,"message":"437","line":31,"column":46,"nodeType":"374","messageId":"375","endLine":31,"endColumn":56},{"ruleId":"372","severity":1,"message":"419","line":32,"column":12,"nodeType":"374","messageId":"375","endLine":32,"endColumn":18},{"ruleId":"372","severity":1,"message":"400","line":38,"column":17,"nodeType":"374","messageId":"375","endLine":38,"endColumn":22},{"ruleId":"358","severity":1,"message":"438","line":52,"column":8,"nodeType":"360","endLine":52,"endColumn":10,"suggestions":"439"},{"ruleId":"384","severity":1,"message":"385","line":56,"column":24,"nodeType":"386","messageId":"387","endLine":56,"endColumn":26},{"ruleId":"384","severity":1,"message":"440","line":91,"column":113,"nodeType":"386","messageId":"441","endLine":91,"endColumn":115},{"ruleId":"362","severity":1,"message":"363","line":92,"column":53,"nodeType":"364","messageId":"365","endLine":130,"endColumn":54},{"ruleId":"372","severity":1,"message":"442","line":15,"column":11,"nodeType":"374","messageId":"375","endLine":15,"endColumn":18},{"ruleId":"384","severity":1,"message":"385","line":293,"column":53,"nodeType":"443","messageId":"444","endLine":293,"endColumn":59},{"ruleId":"431","severity":1,"message":"432","line":8,"column":17,"nodeType":"390","endLine":10,"endColumn":41},{"ruleId":"445","severity":1,"message":"446","line":78,"column":17,"nodeType":"390","endLine":78,"endColumn":86},{"ruleId":"372","severity":1,"message":"400","line":29,"column":17,"nodeType":"374","messageId":"375","endLine":29,"endColumn":22},{"ruleId":"358","severity":1,"message":"447","line":33,"column":8,"nodeType":"360","endLine":33,"endColumn":10,"suggestions":"448"},{"ruleId":"445","severity":1,"message":"446","line":40,"column":21,"nodeType":"390","endLine":40,"endColumn":78},{"ruleId":"388","severity":1,"message":"411","line":91,"column":29,"nodeType":"390","endLine":92,"endColumn":91},{"ruleId":"388","severity":1,"message":"411","line":96,"column":29,"nodeType":"390","endLine":97,"endColumn":91},{"ruleId":"388","severity":1,"message":"411","line":164,"column":29,"nodeType":"390","endLine":164,"endColumn":100},{"ruleId":"388","severity":1,"message":"411","line":171,"column":29,"nodeType":"390","endLine":171,"endColumn":100},{"ruleId":"388","severity":1,"message":"411","line":179,"column":29,"nodeType":"390","endLine":180,"endColumn":91},{"ruleId":"388","severity":1,"message":"411","line":184,"column":29,"nodeType":"390","endLine":185,"endColumn":91},{"ruleId":"372","severity":1,"message":"396","line":25,"column":25,"nodeType":"374","messageId":"375","endLine":25,"endColumn":31},{"ruleId":"372","severity":1,"message":"400","line":30,"column":17,"nodeType":"374","messageId":"375","endLine":30,"endColumn":22},{"ruleId":"358","severity":1,"message":"447","line":34,"column":8,"nodeType":"360","endLine":34,"endColumn":10,"suggestions":"449"},{"ruleId":"372","severity":1,"message":"400","line":19,"column":17,"nodeType":"374","messageId":"375","endLine":19,"endColumn":22},{"ruleId":"358","severity":1,"message":"447","line":23,"column":8,"nodeType":"360","endLine":23,"endColumn":10,"suggestions":"450"},{"ruleId":"431","severity":1,"message":"432","line":33,"column":17,"nodeType":"390","endLine":35,"endColumn":178},{"ruleId":"372","severity":1,"message":"376","line":1,"column":99,"nodeType":"374","messageId":"375","endLine":1,"endColumn":107},{"ruleId":"372","severity":1,"message":"400","line":33,"column":17,"nodeType":"374","messageId":"375","endLine":33,"endColumn":22},{"ruleId":"358","severity":1,"message":"447","line":36,"column":8,"nodeType":"360","endLine":36,"endColumn":10,"suggestions":"451"},{"ruleId":"452","severity":1,"message":"453","line":165,"column":37,"nodeType":"390","endLine":165,"endColumn":110},{"ruleId":"452","severity":1,"message":"453","line":183,"column":49,"nodeType":"390","endLine":184,"endColumn":94},{"ruleId":"391","severity":1,"message":"392","line":197,"column":57,"nodeType":"390","messageId":"393","endLine":197,"endColumn":105,"fix":"454"},{"ruleId":"391","severity":1,"message":"392","line":202,"column":57,"nodeType":"390","messageId":"393","endLine":204,"endColumn":76,"fix":"455"},{"ruleId":"372","severity":1,"message":"456","line":1,"column":8,"nodeType":"374","messageId":"375","endLine":1,"endColumn":13},{"ruleId":"372","severity":1,"message":"457","line":1,"column":16,"nodeType":"374","messageId":"375","endLine":1,"endColumn":25},{"ruleId":"372","severity":1,"message":"458","line":2,"column":8,"nodeType":"374","messageId":"375","endLine":2,"endColumn":9},{"ruleId":"372","severity":1,"message":"456","line":2,"column":8,"nodeType":"374","messageId":"375","endLine":2,"endColumn":13},"no-native-reassign",["459"],"no-negated-in-lhs",["460"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allData.address', 'allData.addressToken', 'allData.city', 'allData.country', 'allData.lastname', 'allData.name', 'allData.state', and 'checkoutContext'. Either include them or remove the dependency array.","ArrayExpression",["461"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook React.useEffect has a missing dependency: 'checkoutContext.payment_method'. Either include it or remove the dependency array.",["462"],"React Hook useEffect has a missing dependency: 'currencyConversor'. Either include it or remove the dependency array. If 'currencyConversor' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["463"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["464"],"no-unused-vars","'NumberFormat' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'theme' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'retrieveTransactions'. Either include it or remove the dependency array.",["465"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"466","text":"467"},{"range":"468","text":"467"},"'logout' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'tokenPrivateKey' is assigned a value but never used.","'setTokenPrivateKey' is assigned a value but never used.","'email' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.email', 'currentUser.uid', and 'history'. Either include them or remove the dependency array.",["469"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'facing2' is assigned a value but never used.","'setFacing' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'CardHeader' is defined but never used.","'FormGroup' is defined but never used.","'Form' is defined but never used.","'Input' is defined but never used.","'logged' is assigned a value but never used.","'country' is assigned a value but never used.","'countriesAPI' is assigned a value but never used.","'statesAPI' is assigned a value but never used.","'citiesAPI' is assigned a value but never used.","'setCitiesAPI' is assigned a value but never used.","'fileFirestore' is assigned a value but never used.","'uploadValue' is assigned a value but never used.","'setUploadValue' is assigned a value but never used.","'setImage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.email', 'currentUser.emailVerified', 'currentUser.uid', 'getCountriesAPI', 'getUserData', 'history', and 'logout'. Either include them or remove the dependency array.",["470"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useCallback has a missing dependency: 'setStates'. Either include it or remove the dependency array. If 'setStates' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["471"],"'TextField' is defined but never used.","'getAuthType' is assigned a value but never used.","'credential' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.email', 'currentUser.emailVerified', 'currentUser.providerData', 'history', and 'logout'. Either include them or remove the dependency array.",["472"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'history' is assigned a value but never used.","ReturnStatement","expectedReturnValue","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'currentUser.email' and 'history'. Either include them or remove the dependency array.",["473"],["474"],["475"],["476"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",{"range":"477","text":"467"},{"range":"478","text":"467"},"'React' is defined but never used.","'Component' is defined but never used.","'$' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},[8084,8084]," rel=\"noreferrer\"",[8426,8426],{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},{"desc":"497","fix":"499"},{"desc":"497","fix":"500"},{"desc":"497","fix":"501"},[9135,9135],[9704,9704],"Update the dependencies array to be: [allData.address, allData.addressToken, allData.city, allData.country, allData.lastname, allData.name, allData.state, checkoutContext]",{"range":"502","text":"503"},"Update the dependencies array to be: [checkoutContext.payment_method]",{"range":"504","text":"505"},"Update the dependencies array to be: [currencyConversor]",{"range":"506","text":"507"},"Update the dependencies array to be: [currentUser, history]",{"range":"508","text":"509"},"Update the dependencies array to be: [address, retrieveTransactions]",{"range":"510","text":"511"},"Update the dependencies array to be: [currentUser.email, currentUser.uid, history]",{"range":"512","text":"513"},"Update the dependencies array to be: [currentUser.email, currentUser.emailVerified, currentUser.uid, getCountriesAPI, getUserData, history, jalaPorfavor, logout]",{"range":"514","text":"515"},"Update the dependencies array to be: [imageSrc, croppedAreaPixels, rotation, setStates]",{"range":"516","text":"517"},"Update the dependencies array to be: [currentUser.email, currentUser.emailVerified, currentUser.providerData, history, logout]",{"range":"518","text":"519"},"Update the dependencies array to be: [currentUser.email, history]",{"range":"520","text":"521"},{"range":"522","text":"521"},{"range":"523","text":"521"},{"range":"524","text":"521"},[1625,1627],"[allData.address, allData.addressToken, allData.city, allData.country, allData.lastname, allData.name, allData.state, checkoutContext]",[14728,14730],"[checkoutContext.payment_method]",[829,831],"[currencyConversor]",[1974,1987],"[currentUser, history]",[3086,3095],"[address, retrieveTransactions]",[3139,3141],"[currentUser.email, currentUser.uid, history]",[3737,3751],"[currentUser.email, currentUser.emailVerified, currentUser.uid, getCountriesAPI, getUserData, history, jalaPorfavor, logout]",[1635,1674],"[imageSrc, croppedAreaPixels, rotation, setStates]",[1756,1758],"[currentUser.email, currentUser.emailVerified, currentUser.providerData, history, logout]",[1272,1274],"[currentUser.email, history]",[1224,1226],[717,719],[1373,1375]]