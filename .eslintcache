[{"/home/snow/Documentos/ico-web-final/src/index.js":"1","/home/snow/Documentos/ico-web-final/src/App.js":"2","/home/snow/Documentos/ico-web-final/src/i18n.js":"3","/home/snow/Documentos/ico-web-final/src/apis/SunshineFinder.js":"4","/home/snow/Documentos/ico-web-final/src/apis/CoingeckoFinder.js":"5","/home/snow/Documentos/ico-web-final/src/apis/PlacesFinder.js":"6","/home/snow/Documentos/ico-web-final/src/apis/TronscanFinder.js":"7","/home/snow/Documentos/ico-web-final/src/components/dashboard/DollarMarktComponent.jsx":"8","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Checkout.jsx":"9","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/AddressForm.jsx":"10","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/PaymentForm.jsx":"11","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Review.jsx":"12","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/TokenAmount.jsx":"13","/home/snow/Documentos/ico-web-final/src/components/dashboard/PaymentComponent.jsx":"14","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Dashboard.jsx":"15","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/HeaderCards.jsx":"16","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/CryptoList.jsx":"17","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/TransactionsHistory.jsx":"18","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Wallet.jsx":"19","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Profile.jsx":"20","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/ExpansionComponent.jsx":"21","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/UploadImage.jsx":"22","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/PersonalData.jsx":"23","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/VerifiedProfile.jsx":"24","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Settings.jsx":"25","/home/snow/Documentos/ico-web-final/src/components/dashboard/settings/ChangePassword.jsx":"26","/home/snow/Documentos/ico-web-final/src/components/dashboard/PurchaseHistoryComponent.jsx":"27","/home/snow/Documentos/ico-web-final/src/context/AuthContext.jsx":"28","/home/snow/Documentos/ico-web-final/src/config/Particles-config.js":"29","/home/snow/Documentos/ico-web-final/src/components/PasswordRecoveryModal.jsx":"30","/home/snow/Documentos/ico-web-final/src/components/SignUpModal.jsx":"31","/home/snow/Documentos/ico-web-final/src/components/SignInModal.jsx":"32","/home/snow/Documentos/ico-web-final/src/components/dashboard/js/canvasUtils.js":"33","/home/snow/Documentos/ico-web-final/src/components/dashboard/js/encrypt.js":"34","/home/snow/Documentos/ico-web-final/src/components/Video.jsx":"35","/home/snow/Documentos/ico-web-final/src/components/Countdown.jsx":"36","/home/snow/Documentos/ico-web-final/src/components/Soporte.jsx":"37","/home/snow/Documentos/ico-web-final/src/components/PreguntasFrecuentes.jsx":"38","/home/snow/Documentos/ico-web-final/src/components/Newsletter.jsx":"39","/home/snow/Documentos/ico-web-final/src/components/Ventajas.jsx":"40","/home/snow/Documentos/ico-web-final/src/components/MapaApp.jsx":"41","/home/snow/Documentos/ico-web-final/src/components/WhitepaperHome.jsx":"42","/home/snow/Documentos/ico-web-final/src/routes/Home.jsx":"43","/home/snow/Documentos/ico-web-final/src/components/Banner.jsx":"44","/home/snow/Documentos/ico-web-final/src/components/Footer.jsx":"45","/home/snow/Documentos/ico-web-final/src/components/Navigation.jsx":"46","/home/snow/Documentos/ico-web-final/src/components/ProyectosComponent.jsx":"47","/home/snow/Documentos/ico-web-final/src/routes/Proyectos.jsx":"48","/home/snow/Documentos/ico-web-final/src/config/firebase.js":"49","/home/snow/Documentos/ico-web-final/src/routes/Roaptomap.jsx":"50","/home/snow/Documentos/ico-web-final/src/components/Carousel.jsx":"51","/home/snow/Documentos/ico-web-final/src/routes/Pdf.jsx":"52","/home/snow/Documentos/ico-web-final/src/components/Loader.jsx":"53","/home/snow/Documentos/ico-web-final/src/components/ControlPanel.jsx":"54","/home/snow/Documentos/ico-web-final/src/routes/Acerca.jsx":"55","/home/snow/Documentos/ico-web-final/src/components/CardsWorkers.jsx":"56","/home/snow/Documentos/ico-web-final/src/js/mostrarmenu.js":"57","/home/snow/Documentos/ico-web-final/src/js/cuentaregresiva.js":"58","/home/snow/Documentos/ico-web-final/src/context/CheckoutContext.jsx":"59","/home/snow/Documentos/ico-web-final/src/context/ProfileContext.jsx":"60"},{"size":296,"mtime":1626125393939,"results":"61","hashOfConfig":"62"},{"size":2368,"mtime":1627415720329,"results":"63","hashOfConfig":"62"},{"size":1645,"mtime":1621626270725,"results":"64","hashOfConfig":"62"},{"size":139,"mtime":1626796331916,"results":"65","hashOfConfig":"62"},{"size":104,"mtime":1624906925521,"results":"66","hashOfConfig":"62"},{"size":113,"mtime":1624907114457,"results":"67","hashOfConfig":"62"},{"size":107,"mtime":1624907189001,"results":"68","hashOfConfig":"62"},{"size":3164,"mtime":1628019519597,"results":"69","hashOfConfig":"62"},{"size":16722,"mtime":1628098968326,"results":"70","hashOfConfig":"62"},{"size":3730,"mtime":1628027303473,"results":"71","hashOfConfig":"62"},{"size":3673,"mtime":1628027151541,"results":"72","hashOfConfig":"62"},{"size":18437,"mtime":1628098405278,"results":"73","hashOfConfig":"62"},{"size":5150,"mtime":1628025964457,"results":"74","hashOfConfig":"62"},{"size":2610,"mtime":1628020688505,"results":"75","hashOfConfig":"62"},{"size":4098,"mtime":1628019415121,"results":"76","hashOfConfig":"62"},{"size":2332,"mtime":1628102001930,"results":"77","hashOfConfig":"62"},{"size":3441,"mtime":1627421422138,"results":"78","hashOfConfig":"62"},{"size":10850,"mtime":1628104481078,"results":"79","hashOfConfig":"62"},{"size":28649,"mtime":1628192311369,"results":"80","hashOfConfig":"62"},{"size":17596,"mtime":1628533348092,"results":"81","hashOfConfig":"62"},{"size":2402,"mtime":1628192771421,"results":"82","hashOfConfig":"62"},{"size":8336,"mtime":1628533482824,"results":"83","hashOfConfig":"62"},{"size":21628,"mtime":1628191848585,"results":"84","hashOfConfig":"62"},{"size":9186,"mtime":1628532898512,"results":"85","hashOfConfig":"62"},{"size":3091,"mtime":1628534911636,"results":"86","hashOfConfig":"62"},{"size":11411,"mtime":1628535427708,"results":"87","hashOfConfig":"62"},{"size":14281,"mtime":1628020304365,"results":"88","hashOfConfig":"62"},{"size":1703,"mtime":1627421690182,"results":"89","hashOfConfig":"62"},{"size":2358,"mtime":1621626270673,"results":"90","hashOfConfig":"62"},{"size":3940,"mtime":1626895090227,"results":"91","hashOfConfig":"62"},{"size":26675,"mtime":1627492411960,"results":"92","hashOfConfig":"62"},{"size":16224,"mtime":1628272695192,"results":"93","hashOfConfig":"62"},{"size":2388,"mtime":1621626640957,"results":"94","hashOfConfig":"62"},{"size":317,"mtime":1621626640957,"results":"95","hashOfConfig":"62"},{"size":519,"mtime":1627326425543,"results":"96","hashOfConfig":"62"},{"size":1637,"mtime":1627326504643,"results":"97","hashOfConfig":"62"},{"size":1395,"mtime":1627326700175,"results":"98","hashOfConfig":"62"},{"size":2765,"mtime":1627326722047,"results":"99","hashOfConfig":"62"},{"size":529,"mtime":1627326740991,"results":"100","hashOfConfig":"62"},{"size":2970,"mtime":1627327057391,"results":"101","hashOfConfig":"62"},{"size":9387,"mtime":1627327002207,"results":"102","hashOfConfig":"62"},{"size":777,"mtime":1627327069423,"results":"103","hashOfConfig":"62"},{"size":1973,"mtime":1627326425399,"results":"104","hashOfConfig":"62"},{"size":2113,"mtime":1626893769443,"results":"105","hashOfConfig":"62"},{"size":8248,"mtime":1627327205939,"results":"106","hashOfConfig":"62"},{"size":9706,"mtime":1628018947709,"results":"107","hashOfConfig":"62"},{"size":11260,"mtime":1627326666227,"results":"108","hashOfConfig":"62"},{"size":430,"mtime":1627327279875,"results":"109","hashOfConfig":"62"},{"size":633,"mtime":1624990558028,"results":"110","hashOfConfig":"62"},{"size":1936,"mtime":1627327833699,"results":"111","hashOfConfig":"62"},{"size":2790,"mtime":1626894203323,"results":"112","hashOfConfig":"62"},{"size":1971,"mtime":1627327259979,"results":"113","hashOfConfig":"62"},{"size":449,"mtime":1624978343384,"results":"114","hashOfConfig":"62"},{"size":1821,"mtime":1626894229887,"results":"115","hashOfConfig":"62"},{"size":10790,"mtime":1627329171607,"results":"116","hashOfConfig":"62"},{"size":5481,"mtime":1626894015835,"results":"117","hashOfConfig":"62"},{"size":565,"mtime":1624910189605,"results":"118","hashOfConfig":"62"},{"size":1655,"mtime":1624916558231,"results":"119","hashOfConfig":"62"},{"size":1902,"mtime":1627402345833,"results":"120","hashOfConfig":"62"},{"size":2286,"mtime":1627582666936,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"11dj60e",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"124"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"124"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"124"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"124"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"163","usedDeprecatedRules":"124"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"124"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"124"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"124"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"124"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"124"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"124"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"124"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"124"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"124"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"124"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"248","usedDeprecatedRules":"124"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"124"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"124"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"/home/snow/Documentos/ico-web-final/src/index.js",[],["261","262"],"/home/snow/Documentos/ico-web-final/src/App.js",[],"/home/snow/Documentos/ico-web-final/src/i18n.js",[],"/home/snow/Documentos/ico-web-final/src/apis/SunshineFinder.js",[],"/home/snow/Documentos/ico-web-final/src/apis/CoingeckoFinder.js",[],"/home/snow/Documentos/ico-web-final/src/apis/PlacesFinder.js",[],"/home/snow/Documentos/ico-web-final/src/apis/TronscanFinder.js",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/DollarMarktComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Checkout.jsx",["263","264"],"import React, {useState, useEffect, useContext} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport AddressForm from './AddressForm';\nimport PaymentForm from './PaymentForm';\nimport Review from './Review';\nimport './css/style.css';\nimport TokenAmount from \"./TokenAmount\";\nimport DONE from '../../../images/done.png';\nimport swal from \"sweetalert\";\nimport SunshineFinder from \"../../../apis/SunshineFinder\";\nimport {CheckoutContext} from \"../../../context/CheckoutContext\";\nimport {useTranslation} from \"react-i18next\";\n\n\nexport default function Checkout({uid, email, allData}) {\n    const {t} = useTranslation();\n    const checkoutContext = useContext(CheckoutContext);\n\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n    //SI TU EDITOR DE TEXTO TE INDICA QUE DICHOS ESTADOS NO ESTAN SIENDO UTILIZADOS REVISA LAS 2 FUNCIONES DE ABAJO\n\n    const steps = [\n        t('Dashboard.Index.BuyComponent.Menu.Token'),\n        t('Dashboard.Index.BuyComponent.Menu.Method'),\n        t('Dashboard.Index.BuyComponent.Menu.Data'),\n        t('Dashboard.Index.BuyComponent.Menu.Buy')\n    ];\n\n    useEffect(() => {\n        checkoutContext.setName(allData.name);\n        checkoutContext.setLastname(allData.lastname);\n        checkoutContext.setAddress(allData.address);\n        checkoutContext.setCity(allData.city);\n        checkoutContext.setStateLocation(allData.state);\n        checkoutContext.setCountry(allData.country);\n        checkoutContext.setAddressToken(allData.addressToken);\n    }, []);\n\n    const currencyConversor = async (from, to) => {\n        try {\n            await SunshineFinder.get('/api/exchange-currency', {\n                params: {\n                    from,\n                    to\n                }\n            }).then(response => {\n                if (from === \"USD\" && to === \"MXN\") {\n                    checkoutContext.setUsdToMxn(response.data);\n                } else if (from === \"MXN\" && to === \"USD\") {\n                    checkoutContext.setMxnToUsd(response.data);\n                } else if(from === \"TRX\" && to === \"USD\"){\n                    checkoutContext.setTrxToUsd(response.data);\n                } else if (from === \"USD\" && to === \"TRX\"){\n                    checkoutContext.setUsdToTrx(response.data);\n                }\n            });\n        } catch (e) {}\n    }\n\n    const getStepContent = (step) => {\n        switch (step) {\n            case 0:\n                return <TokenAmount currencyConversor={currencyConversor}/>;\n            case 1:\n                return <PaymentForm handleNext={handleNext}/>;\n            case 2:\n                return <AddressForm />;\n            case 3:\n                return <Review uid={uid} handleNext={handleNext} email={email}/>;\n            default:\n                throw new Error('Unknown step');\n        }\n    }\n\n    const handleNext = (payment = false, paymentOption = \"\") => {\n        switch (activeStep) {\n            case 0:\n                if (allData.profileStatus === 4) {\n                    if (checkoutContext.currencyType === \"USD\") {\n                        if (parseFloat(checkoutContext.currency) >= 1) {\n                            if (parseFloat(checkoutContext.currency) <= 999999) {\n                                setActiveStep(activeStep + 1);\n                            } else {\n                                swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Title1'), t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Text1'), \"warning\");\n                            }\n                        } else {\n                            swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Title'), t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Text'), \"warning\");\n                        }\n                    } else if (checkoutContext.currencyType === \"MX\") {\n                        if (parseFloat(checkoutContext.currency) >= checkoutContext.usdToMxn.toFixed(2)) {\n                            if (parseFloat(checkoutContext.currency) <= 999999) {\n                                setActiveStep(activeStep + 1);\n                            } else {\n                                swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Title1'), t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Text1'), \"warning\");\n                            }\n                        } else {\n                            swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Title'), `${t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Abbr')} ${checkoutContext.usdToMxn.toFixed(2)} MXN`, \"warning\");\n                        }\n                    } else if (checkoutContext.currencyType === \"SUN\") {\n                        if (parseFloat(checkoutContext.currency) >= 1) {\n                            setActiveStep(activeStep + 1);\n                        } else {\n                            swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Title'), t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Text'), \"warning\");\n                        }\n                    } else if(checkoutContext.currencyType === \"TRX\"){\n                        if (parseFloat(checkoutContext.currency) >= checkoutContext.usdToTrx.toFixed(2)) {\n                            if (parseFloat(checkoutContext.currency) <= 999999) {\n                                setActiveStep(activeStep + 1);\n                            } else {\n                                swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Title1'), t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Text1'), \"warning\");\n                            }\n                        } else {\n                            swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Title'), `${t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Abbr')} ${checkoutContext.usdToMxn.toFixed(2)} MXN`, \"warning\");\n                        }\n                    }\n                } else {\n\n                    if (checkoutContext.currencyType === \"USD\") {\n                        if (parseFloat(checkoutContext.currency) >= 1) {\n                            if (parseFloat(checkoutContext.currency) <= 1000) {\n                                setActiveStep(activeStep + 1);\n                            } else {\n                                swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Title2'), t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Text2'), \"warning\");\n                            }\n                        } else {\n                            swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Title'), t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Text'), \"warning\");\n                        }\n                    } else if (checkoutContext.currencyType === \"MX\") {\n\n                        if (parseFloat(checkoutContext.currency) >= checkoutContext.usdToMxn.toFixed(2)) {\n                            if (parseFloat(checkoutContext.currency) <= checkoutContext.usdToMxn.toFixed(2) * 1000) {\n                                setActiveStep(activeStep + 1);\n                            } else {\n                                swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Title2'), `${t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Abbr21')} $${checkoutContext.usdToMxn.toFixed(2) * 1000} MXN, ${t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.Abbr22')}`, \"warning\");\n                            }\n                        } else {\n                            swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Title'), `${t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Abbr')} ${checkoutContext.usdToMxn.toFixed(2)} MXN`, \"warning\");\n                        }\n                    } else if (checkoutContext.currencyType === \"SUN\") {\n                        if (parseFloat(checkoutContext.currency) >= 1) {\n                            setActiveStep(activeStep + 1);\n                        } else {\n                            swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Title'), t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Text'), \"warning\");\n                        }\n                    } else if (checkoutContext.currencyType === \"TRX\") {\n                        if (parseFloat(checkoutContext.currency) >= checkoutContext.usdToTrx.toFixed(2)) {\n                            setActiveStep(activeStep + 1);\n                        } else {\n                            swal(t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Title'), `${t('Dashboard.Index.BuyComponent.TokenOption.Modals.LimitAmount.InvalidAmount.Abbr')} ${checkoutContext.usdToTrx.toFixed(2)} TRX`, \"warning\");\n                        }\n                    }\n\n                }\n\n                break;\n            case 1:\n                if (paymentOption === \"card\") {\n                    if (checkoutContext.currencyType.toUpperCase() === \"TRX\"){\n                        swal(t('Dashboard.Index.BuyComponent.MethodOption.Modals.Card.Title'), t('Dashboard.Index.BuyComponent.MethodOption.Modals.Card.Text'), \"warning\");\n                    } else {\n                        checkoutContext.setPaymentMethod(paymentOption);\n                        setActiveStep(activeStep + 1);\n                    }\n                } else if (paymentOption === \"oxxo\") {\n                    if (checkoutContext.currencyType.toUpperCase() === \"USD\") {\n                        swal(t('Dashboard.Index.BuyComponent.MethodOption.Modals.Oxxo.Title1'), t('Dashboard.Index.BuyComponent.MethodOption.Modals.Oxxo.Text1'), \"warning\");\n                    } else if (checkoutContext.currencyType.toUpperCase() === \"TRX\"){\n                        swal(t('Dashboard.Index.BuyComponent.MethodOption.Modals.Oxxo.Title2'), t('Dashboard.Index.BuyComponent.MethodOption.Modals.Oxxo.Text2'), \"warning\");\n                    } else {\n                        checkoutContext.setPaymentMethod(paymentOption);\n                        setActiveStep(activeStep + 1);\n                    }\n                } else if(paymentOption === \"trx\") {\n                    if(checkoutContext.currencyType.toUpperCase() === \"USD\" || checkoutContext.currencyType.toUpperCase() === \"MX\"){\n                        swal(t('Dashboard.Index.BuyComponent.MethodOption.Modals.Trx.Title'), t('Dashboard.Index.BuyComponent.MethodOption.Modals.Trx.Text'), \"warning\");\n                    } else {\n                        checkoutContext.setPaymentMethod(paymentOption);\n                        setActiveStep(activeStep + 1);\n                    }\n                }\n                break;\n            case 2:\n                if (checkoutContext.name !== \"\" && checkoutContext.lastname !== \"\" && checkoutContext.address !== \"\" && checkoutContext.city !== \"\" && checkoutContext.stateLocation !== \"\" && checkoutContext.country !== \"\") {\n                    setActiveStep(activeStep + 1);\n                }\n                break;\n            case 3:\n                if (payment) {\n                    setActiveStep(activeStep + 1);\n                }\n                break;\n        }\n    };\n\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n\n    const buyAgain = () => {\n        setActiveStep(0);\n        checkoutContext.setCurrencyType('USD');\n        checkoutContext.setPaymentMethod('');\n        checkoutContext.setCurrency(null);\n        checkoutContext.setPaymentID(\"\");\n        checkoutContext.setPaymentDone(false);\n    }\n\n    return (\n        <div className=\"mt-0\">\n            <React.Fragment>\n                <CssBaseline/>\n                <main className={classes.layout}>\n                    <Paper className={classes.paper}>\n                        <Stepper activeStep={activeStep} className={classes.stepper}>\n                            {steps.map((label) => (\n                                <Step key={label}>\n                                    <StepLabel>{label}</StepLabel>\n                                </Step>\n                            ))}\n                        </Stepper>\n                        <React.Fragment>\n                            {activeStep === steps.length ? (\n                                <React.Fragment>\n                                    <Typography variant=\"h5\" gutterBottom>\n                                        {checkoutContext.paymentMethod === \"card\" ? t('Dashboard.Index.BuyComponent.SuccessPayment.CardTitle') : checkoutContext.paymentMethod === \"oxxo\" ? t('Dashboard.Index.BuyComponent.SuccessPayment.OxxoTitle') : t('Dashboard.Index.BuyComponent.SuccessPayment.TrxTitle')}\n                                    </Typography>\n                                    <img src={DONE} className=\"img-fluid mb-3\" width=\"13%\" alt=\"PAGO REALIZADO\"/>\n                                    <Typography variant=\"subtitle1\">\n                                        {checkoutContext.paymentMethod === \"card\" ? t('Dashboard.Index.BuyComponent.SuccessPayment.CardText') : checkoutContext.paymentMethod === \"oxxo\" ? t('Dashboard.Index.BuyComponent.SuccessPayment.OxxoText') : t('Dashboard.Index.BuyComponent.SuccessPayment.TrxText')}\n                                    </Typography>\n                                    <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={buyAgain}>\n                                        {t('Dashboard.Index.BuyComponent.SuccessPayment.BuyAgainButton')}\n                                    </Button>\n                                </React.Fragment>\n                            ) : (\n                                <React.Fragment>\n                                    {getStepContent(activeStep)}\n                                    <div className={classes.buttons}>\n                                        {activeStep !== 0 && (\n                                            <Button onClick={handleBack} className={classes.button}>\n                                                {t('Dashboard.Index.BuyComponent.MethodOption.BackButton')}\n                                            </Button>\n                                        )}\n                                        {activeStep === steps.length - 1  ? null : (\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={handleNext}\n                                                className={classes.button}\n                                            >\n                                                {t('Dashboard.Index.BuyComponent.TokenOption.NextButton')}\n                                            </Button>\n                                        )\n                                        }\n                                    </div>\n                                </React.Fragment>\n                            )}\n                        </React.Fragment>\n                    </Paper>\n                </main>\n            </React.Fragment>\n        </div>\n\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        width: 'auto',\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(0),\n            padding: theme.spacing(3),\n        },\n    },\n    stepper: {\n        padding: theme.spacing(3, 0, 5),\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    button: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n    },\n}));","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/AddressForm.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/PaymentForm.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Review.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/TokenAmount.jsx",["265"],"import React, {useContext, useEffect} from 'react';\nimport finalCoin from \"../../../images/monedafinal.png\";\nimport NumberFormat from 'react-number-format';\nimport TextField from '@material-ui/core/TextField';\nimport {CheckoutContext} from \"../../../context/CheckoutContext\";\nimport {useTranslation} from \"react-i18next\";\n\n\nconst currencies = [\n    {\n        value: \"USD\",\n        label: \"USD\",\n    },\n    {\n        value: \"MX\",\n        label: \"MX\",\n    },\n    {\n        value: \"SUN\",\n        label: \"SUN\",\n    },\n    {\n        value: \"TRX\",\n        label: \"TRON\",\n    },\n];\n\nconst TokenAmount = ({currencyConversor}) => {\n    const {t} = useTranslation();\n    const checkoutContext = useContext(CheckoutContext);\n\n    useEffect(() => {\n        currencyConversor(\"USD\", \"MXN\");\n        currencyConversor(\"MXN\", \"USD\");\n        currencyConversor(\"TRX\", \"USD\");\n        currencyConversor(\"USD\", \"TRX\");\n    }, []);\n\n    const conversor = (type, amount = \"USD\") => {\n        switch (type) {\n            case \"USD\":\n                return `${amount || 0} USD - ${amount * 1 || 0} SUNI - ${(amount * checkoutContext.usdToMxn).toFixed(2) || 0} MXN`;\n            case \"SUN\":\n                return `${amount * 1 || 0} USD - ${amount || 0} SUNI - ${(amount * checkoutContext.usdToMxn).toFixed(2) || 0} MXN`;\n            case \"MX\":\n                return `${(amount * checkoutContext.mxnToUsd).toFixed(6) || 0} USD - ${(amount * checkoutContext.mxnToUsd).toFixed(6) || 0} SUN - ${amount || 0} MXN`;\n            case \"TRX\":\n                return `${amount || 0} TRX - ${(amount * checkoutContext.trxToUsd).toFixed(6)|| 0} SUNI`;\n            default:\n                return `${amount || 0} USD - ${amount * 1 || 0} SUNI - ${(amount * checkoutContext.usdToMxn.toFixed(2))} MXN`;\n        }\n    }\n\n    const typeCurrency = (val) => {\n        checkoutContext.setCurrency(val);\n        let dollar = parseFloat(checkoutContext.usdToMxn.toFixed(2));\n        let dollarTrx = parseFloat(checkoutContext.usdToTrx.toFixed(2));\n        val = parseFloat(val);\n        if ( (val >= 1 && val<=999999 && checkoutContext.currencyType === \"USD\") ||\n            (val >= dollar && val<=999999 && checkoutContext.currencyType === \"MX\") ||\n            (val >= 1 && val<=999999 && checkoutContext.currencyType === \"SUN\") ||\n            (val >= dollarTrx && val <=999999 && checkoutContext.currencyType === \"TRX\")\n        ) {\n            document.getElementById(\"inlineFormInputGroupCurrency\").classList.remove(\"is-invalid\");\n            document.getElementById(\"inlineFormInputGroupCurrency\").classList.add(\"is-valid\");\n        } else {\n            document.getElementById(\"inlineFormInputGroupCurrency\").classList.remove(\"is-valid\");\n            document.getElementById(\"inlineFormInputGroupCurrency\").classList.add(\"is-invalid\");\n        }\n    }\n\n    const handleChange = (event) => {\n        checkoutContext.setCurrencyType(event.target.value);\n    };\n\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <img src={finalCoin} style={{width: 150}} className=\"img-fluid\" alt=\"SUNSHINE COIN\"/>\n                        <h5 className=\"currency-value-title font-weight-bold mt-3\">{conversor(checkoutContext.currencyType, checkoutContext.currency)}</h5>\n                    </div>\n                </div>\n\n                <div className=\"row mt-5\">\n                    <div className=\"col-12 col-md-3 mb-3 mb-md-0\">\n                        <TextField\n                            id=\"outlined-select-currency-native\"\n                            select\n                            value={checkoutContext.currencyType}\n                            onChange={handleChange}\n                            SelectProps={{\n                                native: true,\n                            }}\n                            fullWidth\n                            helperText={t('Dashboard.Index.BuyComponent.TokenOption.CurrencySelect')}\n                        >\n                            {currencies.map((option) => (\n                                <option key={option.value} value={option.value}>\n                                    {option.label}\n                                </option>\n                            ))}\n                        </TextField>\n                    </div>\n\n                    <div className=\"col-12 col-md-9\">\n                        <NumberFormat\n                            className=\"form-control\"\n                            id=\"inlineFormInputGroupCurrency\"\n                            name=\"input-name\"\n                            placeholder=\"Cantidad en dolares\"\n                            value={checkoutContext.currency}\n                            thousandSeparator={checkoutContext.currencyType !== \"SUN\"}\n                            onValueChange={(values) => typeCurrency(values.value)}\n                            prefix={checkoutContext.currencyType === \"SUN\" ? '' : '$'}\n                        />\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\nexport default TokenAmount;","/home/snow/Documentos/ico-web-final/src/components/dashboard/PaymentComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/dashboard/Dashboard.jsx",["266"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\nimport moneda_dashboard from \"../../images/moneda-dashboard.svg\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DollarMarktComponent from \"../../components/dashboard/DollarMarktComponent\";\nimport PaymentComponent from \"../../components/dashboard/PaymentComponent\";\nimport {db} from \"../../config/firebase\";\nimport PurchaseHistoryComponent from \"../../components/dashboard/PurchaseHistoryComponent\";\nimport SunshineFinder from \"../../apis/SunshineFinder\";\nimport {useTranslation} from \"react-i18next\";\nrequire('dotenv').config();\n\nconst Dashboard = () => {\n    const {t} = useTranslation();\n    const {currentUser} = useAuth();\n    const [signinEmail, setSigninEmail] = useState(\"\");\n    const [uid, setUid] = useState(\"\");\n    const [amount, setAmount] = useState(0);\n    const [logged, setLogged] = useState(false);\n    const [userInfo, setUserInfo] = useState({});\n    const history = useHistory();\n\n    const getUserData = async(id) => {\n        try{\n            let docRef = db.collection('credentials').doc(id);\n            await docRef.onSnapshot(doc => {\n                if(doc.exists){\n                    setUserInfo(doc.data());\n                }\n            });\n            const response = await SunshineFinder.get(\"/get-token\", {\n                params: {\n                    uid: id\n                }\n            });\n            setAmount(response.data.amount);\n        } catch (e) {}\n    }\n\n    useEffect(() => {\n        try{\n            let email = currentUser.email;\n            let id = currentUser.uid;\n            setSigninEmail(email);\n            setUid(id);\n            setLogged(true);\n            history.push(\"/\");\n            getUserData(id);\n        } catch (e) {\n\n            setSigninEmail(\"\");\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    },[currentUser]);\n\n\n    const renderData = () => {\n        if(logged && Object.keys(userInfo).length !== 0){\n            return (\n                <div className=\"container-fluid\">\n                    <div className=\"row mt-5\">\n\n                        <div className=\"col-12 mt-5 d-flex justify-content-center\">\n                            <img src={moneda_dashboard} className=\"img-fluid\" style={{width: 400}} alt=\"MONEDA-SUNSHINE\"/>\n                        </div>\n\n                        <div className=\"col-12 d-flex justify-content-center\">\n                            <h1>\n                                {signinEmail ? (amount.toString().slice(0, amount.toString().length-6) + \".\" + amount.toString().slice(amount.toString().length-6)) : \"Invitado\"}\n                                <br/>SUNIS</h1>\n                        </div>\n\n                        <div className=\"col-12 d-flex justify-content-center mt-5\">\n                            <button className=\"material\" data-toggle=\"modal\" data-target=\"#exampleModal\">{t('Dashboard.Index.Buttons.CryptoMarkt')}<ExpandMoreIcon style={{ fontSize: 40 }} /> </button>\n                        </div>\n\n                        <div className=\"col-12\">\n                            <button className=\"btn material2 ml-3 mr-3\" data-toggle=\"modal\" data-target=\"#paymentModal\" data-backdrop='static' data-keyboard='false'>{t('Dashboard.Index.Buttons.Buy')}</button>\n                            <a className=\"btn material2 ml-3 mr-3\" href=\"Wallet\">{t('Dashboard.Index.Buttons.Wallet')}</a>\n                        </div>\n\n                        <DollarMarktComponent />\n                        <PaymentComponent email={signinEmail} userData={uid} allData={userInfo} />\n\n                    </div>\n\n                    <div className=\"row mt-5\">\n                        <PurchaseHistoryComponent uid={uid} />\n                    </div>\n\n                </div>\n\n            )\n        } else {\n            return null\n        }\n    }\n\n    return (\n        <div className=\"container-fluid fondo-dashboard\">\n            {renderData()}\n        </div>\n    )\n\n};\n\nexport default Dashboard;","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/HeaderCards.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/CryptoList.jsx",["267"],"import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Avatar from '@material-ui/core/Avatar';\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\n\n//Icons\nimport TRX from \"../../../images/cryptoicons/trx_icon.png\";\n\nexport default function CryptoList({tokensArray, allInfoTokens}) {\n    const classes = useStyles();\n\n    const columns = [\n        { id: 'icon', label: 'Icon', minWidth: 170 },\n        { id: 'name', label: 'Name', minWidth: 170 },\n        { id: 'abbr', label: 'ISO\\u00a0Code', minWidth: 100 },\n        {\n            id: 'value',\n            label: 'Size\\u00a0(km\\u00b2)',\n            minWidth: 170,\n            align: 'right',\n            format: (value, precision=6) => value / parseFloat(\"1e\"+precision)\n        },\n    ];\n\n    return (\n        <Paper className={'bg-gradient-default shadow w-100'}>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableBody>\n                        {tokensArray.map((row, index) => {\n                            return (\n                                <TableRow hover tabIndex={-1} key={index}>\n                                    {columns.map((column) => {\n                                        let value1;\n                                        if(row.key === \"0000000\"){\n                                            value1 = {...row, ...{name: \"TRON\", abbr: \"TRX\", icon: <Avatar src={TRX}>$</Avatar>, precision: 6}}\n                                        } else{\n                                            try{\n                                                value1 = {...row, ...allInfoTokens[index], ...{icon: <Avatar src={`https://coin.top/production/upload/logo/${row.key}.png`}>$</Avatar>}}\n                                            } catch (e) {\n\n                                            }\n                                        }\n                                        const value = value1[column.id];\n                                        return (\n                                            <TableCell className={classes.text} key={column.id} align={column.align}>\n                                                {column.format && typeof value === 'number' ? column.format(value, value1[\"precision\"]) : value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 600,\n    },\n    orange: {\n        color: theme.palette.getContrastText(deepOrange[500]),\n        backgroundColor: deepOrange[500],\n    },\n    purple: {\n        color: theme.palette.getContrastText(deepPurple[500]),\n        backgroundColor: deepPurple[500],\n    },\n    text: {\n        color: \"white\"\n    }\n}));\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/TransactionsHistory.jsx",["268","269","270","271","272","273"],"import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { useTheme } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport DONE from '../../../images/done.png';\nimport TronscanFinder from \"../../../apis/TronscanFinder\";\nimport {useTranslation} from \"react-i18next\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\nconst TransactionsHistory = ({address}) => {\n    const {t} = useTranslation();\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [transactions, setTransactions] = useState([{}]);\n    const [allTransactions, setAllTransactions] = useState([{}]);\n\n    const columns = [\n        { id: 'hash', label: 'Hash', minWidth: 170 },\n        { id: 'amount', label: t('Dashboard.Index.Wallet.TransactionsHistory.Amount'), minWidth: 100, format: (value) => value },\n        {\n            id: 'date',\n            label: t('Dashboard.Index.Wallet.TransactionsHistory.Date'),\n            minWidth: 170,\n            align: 'right',\n            format: (value) => value,\n        },\n        {\n            id: 'block',\n            label: t('Dashboard.Index.Wallet.TransactionsHistory.Block'),\n            minWidth: 170,\n            align: 'right',\n        },\n        {\n            id: 'token',\n            label: 'Token',\n            minWidth: 170,\n            align: 'right',\n        },\n    ];\n\n    const createData = (hash, amount, date, block, token) => {\n        return { hash, amount, date, block, token };\n    }\n\n    const timeConverter = (UNIX_timestamp) => {\n        let a = new Date(UNIX_timestamp);\n        let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        let year = a.getFullYear();\n        let month = months[a.getMonth()];\n        let date = a.getDate();\n        let hour = a.getHours();\n        let min = a.getMinutes();\n        let sec = a.getSeconds();\n        let time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n        return time;\n    }\n\n    const formattedAmount = (amount= \"0\") => {\n        return amount.toString().slice(0, amount.toString().length-6) + \".\" + amount.toString().slice(amount.toString().length-6);\n    }\n\n\n    const[transactionDetails, setTransactionDetails] = useState({contractData: {}, tokenInfo: {}, });\n\n    const theme = useTheme();\n\n    useEffect(() => {\n        retrieveTransactions(address);\n    }, [address]);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const retrieveTransactions = async (walletAddress) => {\n        try{\n            const result = await TronscanFinder.get(`/api/transaction?sort=-timestamp&count=true&limit=50&start=0&address=${walletAddress}`);\n            let data = result.data.data;\n            let row = [];\n            await data.map(value => {\n                let decimal = value.tokenInfo.tokenDecimal;\n                row.push(createData(value.hash, value.toAddress === address ? value.contractData.amount / parseFloat(\"1e\"+decimal) || 0 : - value.contractData.amount / parseFloat(\"1e\"+decimal) || 0, timeConverter(value.timestamp), value.toAddress === address ? <Chip label={t('Dashboard.Index.Wallet.TransactionsHistory.Received')} color=\"primary\" /> : <Chip label={t('Dashboard.Index.Wallet.TransactionsHistory.Sended')} color=\"secondary\" />, (value.tokenInfo.tokenAbbr).toString().toUpperCase()));\n            });\n            await setTransactions(row);\n            await setAllTransactions(data);\n\n        } catch (e) {\n\n        }\n    }\n\n    const onClickTransactionDetails = (hash) => {\n        let result = allTransactions.find(element => element.hash === hash);\n        setTransactionDetails(result);\n        handleClickOpen();\n    }\n\n\n    return (\n        <>\n            <Paper className={classes.root}>\n                <TableContainer className={classes.container}>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        align={column.align}\n                                        style={{ minWidth: column.minWidth }}\n                                    >\n                                        {column.label}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {transactions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n                                return (\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n                                        {columns.map((column) => {\n                                            const value = row[column.id];\n                                            return (\n                                                <TableCell key={column.id} align={column.align}>\n                                                    {column.id !== \"hash\" ? column.format && typeof value === 'number' ? column.format(value) : value : <a className=\"btn btn-link\" onClick={e => onClickTransactionDetails(e.target.innerText)}>{value}</a>}\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={transactions.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">\n                    {t('Dashboard.Index.Wallet.TransactionsHistory.Details.Title')}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText component={\"div\"} id=\"alert-dialog-slide-description\">\n                        <div className=\"container-fluid\">\n\n\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <img src={DONE} className=\"img-fluid w-25 mb-4\" alt=\"\"/>\n                                </div>\n\n                                <strong>HASH:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p><a href={`https://tronscan.org/#/transaction/${transactionDetails.hash}`} target=\"_blank\">{transactionDetails.hash}</a> </p>\n                                </div>\n\n                                <strong>{t('Dashboard.Index.Wallet.TransactionsHistory.Details.Block')}:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p><a href={`https://tronscan.org/#/block/${transactionDetails.block}`} target=\"_blank\">{transactionDetails.block}</a> </p>\n                                </div>\n\n                                <strong>{t('Dashboard.Index.Wallet.TransactionsHistory.Details.Transmitter')}:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p>  {transactionDetails.contractData.owner_address}</p>\n                                </div>\n\n                                <strong>{t('Dashboard.Index.Wallet.TransactionsHistory.Details.Reveiver')}:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p>   {transactionDetails.contractData.to_address}</p>\n                                </div>\n\n                                <strong>{t('Dashboard.Index.Wallet.TransactionsHistory.Details.Amount')}:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p> { formattedAmount(transactionDetails.contractData.amount) } <img src={transactionDetails.tokenInfo.tokenLogo} className=\"img-fluid\" style={{width: 20}} alt=\"\"/> ({transactionDetails.tokenInfo.tokenAbbr})</p>\n                                </div>\n\n                                <strong>{t('Dashboard.Index.Wallet.TransactionsHistory.Details.Date')}:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p>   {timeConverter(transactionDetails.timestamp)}</p>\n                                </div>\n\n                            </div>\n\n                        </div>\n\n\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </>\n\n    );\n}\n\nexport default TransactionsHistory;\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 440,\n    },\n});","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Wallet.jsx",["274","275","276","277","278","279","280","281"],"import React, {useEffect, useState} from \"react\";\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    Container,\n    Row,\n    Col,\n} from \"reactstrap\";\n\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\n//OWN IMPORTATIONS\nimport \"../../components/dashboard/css/nucleo.css\";\nimport \"../../components/dashboard/scss/argon-dashboard-react.scss\";\nimport \"../../components/dashboard/checkout/css/style.css\";\nimport HeaderCards from \"../../components/dashboard/wallet/HeaderCards\";\nimport CryptoList from \"../../components/dashboard/wallet/CryptoList\";\nimport TransactionsHistory from \"../../components/dashboard/wallet/TransactionsHistory\";\n\n//MATERIAL IMPORTS\nimport TextField from '@material-ui/core/TextField';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport CropFreeIcon from '@material-ui/icons/CropFree';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\n//QR UTILITIES IMPORTATIONS\nimport QRCode from \"react-qr-code\";\nimport QrReader from 'react-qr-reader'\nimport swal from \"sweetalert\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {makeStyles, withStyles} from \"@material-ui/core/styles\";\nimport SunshineFinder from \"../../apis/SunshineFinder\";\nimport {Dialog, DialogActions, DialogContent, DialogTitle} from \"@material-ui/core\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport {useTranslation} from \"react-i18next\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\n\nconst Wallet = () => {\n    const {t} = useTranslation();\n    const {currentUser} = useAuth();\n    const history = useHistory();\n    const [scannerOpen, setScannerOpen] = useState(false);\n    const [scanValue, setScanValue] = useState(\"\");\n    const [logged, setLogged] = useState(false);\n    const [uid, setUid] = useState(\"\");\n    const [amount, setAmount] = useState(0);\n    const [tokensToSend, setTokensToSend] = useState(0);\n    const [tokensArray, setTokensArray] = useState([{}]);\n    const [allInfoTokens, setAllInfoTokens] = useState([{}]);\n    const [tokenAddress, setTokenAddress] = useState(\"\");\n    const [open, setOpen] = useState(false);\n    const [smsCode, setSmsCode] = useState(\"\");\n    const [openSmsModal, setOpenSmsModal] = useState(false);\n    const [requestNewCode, setRequestNewCode] = useState(false);\n    const [newCodeSeconds, setNewCodeSeconds] = useState(0);\n    const [openTooltip, setOpenTooltip] = useState(false);\n\n\n    useEffect(() => {\n        try {\n            let id = currentUser.uid;\n            setUid(id);\n            setLogged(true);\n            getData(id);\n        } catch (e) {\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    }, []);\n\n\n    const getData = async (id) => {\n        await SunshineFinder.get(\"/tron-data\", {\n            params: {\n                uid: id\n            }\n        }).then(response => {\n            setTokenAddress(response.data.tokenAddress);\n            if(response.data.tokensArray){\n                setTokensArray(response.data.tokensArray);\n                setAmount(response.data.tokensArray.find(element => element.key === \"1003948\").value);\n                setAllInfoTokens(response.data.allInfo);\n            }\n        }).catch(e => {});\n    }\n\n    const clearFields = () => {\n        setTokensToSend(0);\n        setScanValue(\"\");\n    }\n\n    const sendTokens = async () => {\n        setOpen(true);\n        try {\n            const verifySMS = await SunshineFinder.post(\"/verify-number\", {uid, code: smsCode});\n            if(verifySMS.data.status){\n                const response = await SunshineFinder.post(\"/send-tokens\", {\n                    uid,\n                    amount: convertForSend(tokensToSend),\n                    toAddress: scanValue\n                });\n\n                if(response.data.sendTokenResponse === \"success\"){\n                    setOpenSmsModal(false);\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Success.Title'), `${tokensToSend} ${t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Success.Text[0]')} ${scanValue}, ${t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Success.Text[1]')}`, \"success\");\n                    await getData(uid);\n                    clearFields();\n                } else {\n                    throw response.data.sendTokenResponse.toString();\n                }\n            } else {\n                throw \"sms-incorrect\";\n            }\n        } catch (e) {\n            switch (e.message || e){\n                case \"success\":\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Success.Title'), `${tokensToSend} ${t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Success.Text[0]')} ${scanValue}, ${t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Success.Text[1]')}`, \"success\");\n                    clearFields();\n                    break;\n                case \"without-tokens\":\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.0.Title'), t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.0.Text'), \"warning\");\n                    break;\n                case \"BANDWITH_ERROR\":\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.1.Title'), t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.1.Text'), \"warning\");\n                    break;\n                case \"tokens-not-found\":\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.2.Title'), t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.2.Text'), \"warning\");\n                    break;\n                case \"invalid-address\":\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.3.Title'), t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.3.Text'), \"warning\");\n                    break;\n                case \"Invalid count value\":\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.4.Title'), t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.4.Text'), \"warning\");\n                    break;\n                case \"sms-incorrect\":\n\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.5.Title'), t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.5.Text'), \"warning\");\n                    break;\n                default:\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.6.Title'), t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.6.Text'), \"error\");\n            }\n        }\n        setOpen(false);\n    }\n\n    const enableRequestSms = () => {\n        setTimeout(() => {\n            setRequestNewCode(true);\n        }, 60000);\n    }\n\n    const startTimer = () => {\n        let timeleft = 60;\n        let downloadTimer = setInterval(() => {\n            timeleft--;\n            setNewCodeSeconds(timeleft);\n            if(timeleft <= 0)\n                clearInterval(downloadTimer);\n        },1000);\n    }\n\n    const sendSmsCode = async e => {\n        e.preventDefault();\n        setOpen(true);\n        try{\n            const sendSMS = await SunshineFinder.post(\"/send-sms\", {uid});\n            if(sendSMS.data.status){\n                setRequestNewCode(false);\n                setOpenSmsModal(true);\n                enableRequestSms();\n                startTimer();\n            } else {\n                throw \"sms-not-sended\";\n            }\n\n        } catch (e) {\n            switch (e.message || e){\n                case \"sms-not-sended\":\n                    const title = t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.5.Title');\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.5.Title'), t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.5.Text'), \"warning\");\n                    clearFields();\n                    break;\n                default:\n                    swal(t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.6.Title'), t('Dashboard.Index.Wallet.TransactionsHistory.Modals.Errors.6.Text'), \"error\");\n            }\n        }\n        await setOpen(false);\n        //CONECTARSE CON /send-tokens EN BACKEND Y MANDAR uid, amount, toAddress\n    }\n\n    const ReadQR = ({setScanValue}) => {\n\n        const [value, setValue] = useState(\"\");\n\n        if(value){\n            setScanValue(value);\n            document.getElementById(\"closeScanner\").click();\n            return null;\n        } else {\n\n            return (\n                    <QrReader\n                        delay={1000}\n                        style={{width: 350}}\n                        onScan={data => {\n                            if(data){\n                                setValue(data)\n                            }\n                        }}\n                        facingMode=\"environment\"\n                    />\n            )\n        }\n    }\n\n    const convertForSend = (number) => {\n        try{\n            if(number > 0){\n                if(number % 1 === 0){\n                    // es entero\n                    return parseInt(number + \"0\".repeat(6));\n                } else {\n                    // es decimal\n                    let positionPoint = number.toString().indexOf(\".\");\n                    return (number + \"0\".repeat(6 - (number.toString().substring(positionPoint+1).length))).replace(\".\", \"\");\n                }\n            } else {\n                return number;\n            }\n        } catch (e) {\n        }\n\n    }\n\n    const classes = useStyles();\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(tokenAddress.toString());\n        setOpenTooltip(true);\n        setTimeout(() => {\n            setOpenTooltip(false);\n        }, 3000);\n    }\n\n    const handleClose = () => {\n        setOpenSmsModal(false);\n    };\n\n    const styles = (theme) => ({\n        root: {\n            margin: 0,\n            padding: theme.spacing(2),\n        },\n        closeButton: {\n            position: 'absolute',\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n            color: theme.palette.grey[500],\n        },\n    });\n\n    const DialogTitle = withStyles(styles)((props) => {\n        const { children, classes, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    });\n\n    const renderWallet = () => {\n        if(logged){\n            return(\n                <div className=\"mt-5 mt-md-0 bodyWallet\">\n                    <a href=\"#\" type=\"button\" id=\"openScanner\" data-toggle=\"modal\"\n                       data-target=\"#exampleModalCenter\" />\n\n                    <div className=\"modal fade\" id=\"exampleModalCenter\" tabIndex=\"-1\" role=\"dialog\"\n                         aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\" data-backdrop=\"static\"\n                         data-keyboard=\"false\">\n                        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div className=\"modal-header\">\n                                    <button type=\"button\" onClick={() => {setScannerOpen(false)}} id=\"closeScanner\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span className=\"text-dark\" aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                </div>\n                                <div className=\"qr-modal-body d-flex justify-content-center\">\n                                    {scannerOpen ? <ReadQR setScanValue={setScanValue} /> : null}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <HeaderCards tokensNumber={amount}/>\n                    <Container className=\"mt--7\" fluid>\n                        <Row className=\"d-flex justify-content-center\">\n                            <Col className=\"mb-5 mb-xl-0\" xl=\"7\">\n                                <Card className=\"bg-gradient-default shadow\">\n                                    <CardHeader className=\"bg-transparent\">\n                                        <Row className=\"align-items-center\">\n                                            <div className=\"col-12\">\n                                                <p className=\"text-uppercase text-light mb-0\">\n                                                    Spot wallet\n                                                </p>\n                                                <h6 className=\"text-white mb-3\">TUAHS</h6>\n                                            </div>\n                                            <div className=\"col-12\">\n                                                <div className=\"nav-wrapper\">\n                                                    <ul className=\"nav nav-pills nav-fill flex-column flex-md-row\"\n                                                        id=\"tabs-icons-text\" role=\"tablist\">\n                                                        <li className=\"nav-item\">\n                                                            <a className=\"nav-link mb-sm-3 mb-md-0 active\"\n                                                               id=\"tabs-icons-text-1-tab\" data-toggle=\"tab\"\n                                                               href=\"#tabs-icons-text-1\" role=\"tab\"\n                                                               aria-controls=\"tabs-icons-text-1\"\n                                                               aria-selected=\"true\">\n                                                                {t('Dashboard.Index.Wallet.SpotWallet.Receive')}\n                                                            </a>\n                                                        </li>\n                                                        <li className=\"nav-item\">\n                                                            <a className=\"nav-link mb-sm-3 mb-md-0\" id=\"tabs-icons-text-2-tab\"\n                                                               data-toggle=\"tab\" href=\"#tabs-icons-text-2\" role=\"tab\"\n                                                               aria-controls=\"tabs-icons-text-2\"\n                                                               aria-selected=\"false\">\n                                                                {t('Dashboard.Index.Wallet.SpotWallet.Send')}\n                                                            </a>\n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </Row>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <div className=\"card-body\">\n                                            <div className=\"tab-content\" id=\"myTabContent\">\n                                                <div className=\"tab-pane fade show active\" id=\"tabs-icons-text-1\"\n                                                     role=\"tabpanel\" aria-labelledby=\"tabs-icons-text-1-tab\">\n                                                    <div className=\"col-12 d-flex justify-content-center\">\n                                                        <div style={{borderColor: \"white\", border: \"solid\", backgroundColor: \"white\", width: \"min-content\"}}>\n                                                            <QRCode value={tokenAddress} />\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"col-12 mt-5\">\n                                                        <h6 className=\"text-uppercase text-light ls-1 mb-3\">\n                                                            Wallet address\n                                                        </h6>\n                                                        <Tooltip title={openTooltip ? t('Dashboard.Index.Wallet.SpotWallet.Copied') : t('Dashboard.Index.Wallet.SpotWallet.Copy')}>\n                                                            <p className=\"text-light\" onClick={copyToClipboard} style={{cursor: \"pointer\"}}>\n                                                                {tokenAddress} <FileCopyIcon style={{ fontSize: 15 }}/>\n                                                            </p>\n                                                        </Tooltip>\n                                                    </div>\n                                                </div>\n                                                <div className=\"tab-pane fade\" id=\"tabs-icons-text-2\" role=\"tabpanel\"\n                                                     aria-labelledby=\"tabs-icons-text-2-tab\">\n                                                    <form onSubmit={sendSmsCode}>\n\n                                                        <div className=\"container px-md-5\">\n                                                            <div className=\"row px-md-5\">\n\n                                                                <div className=\"col-12 mb-4 px-md-5\">\n                                                                    <FormControl fullWidth style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\", borderRadius: 4}} variant=\"filled\">\n                                                                        <InputLabel htmlFor=\"filled-adornment-password\">\n                                                                            {t('Dashboard.Index.Wallet.SpotWallet.DestinationAddressField')}\n                                                                        </InputLabel>\n                                                                        <FilledInput\n                                                                            id=\"filled-adornment-password\"\n                                                                            required\n                                                                            type={'text'}\n                                                                            value={scanValue}\n                                                                            onChange={e => setScanValue(e.target.value)}\n                                                                            endAdornment={\n                                                                                <InputAdornment position=\"end\">\n                                                                                    <IconButton\n                                                                                        aria-label=\"toggle password visibility\"\n                                                                                        onClick={() => {\n                                                                                            setScannerOpen(true);\n                                                                                            document.getElementById(\"openScanner\").click();\n                                                                                        }}\n                                                                                        edge=\"end\"\n                                                                                    >\n                                                                                        <CropFreeIcon />\n                                                                                    </IconButton>\n                                                                                </InputAdornment>\n                                                                            }\n                                                                        />\n                                                                    </FormControl>\n                                                                </div>\n\n                                                                <div className=\"col-12 mb-4 px-md-5\">\n\n                                                                    <TextField\n                                                                        fullWidth\n                                                                        required\n                                                                        id=\"filled-basic\"\n                                                                        label={t('Dashboard.Index.Wallet.SpotWallet.AmountField')}\n                                                                        value={tokensToSend}\n                                                                        onChange={e => {\n                                                                            if(tokensToSend === 0){\n                                                                                setTokensToSend(null);\n                                                                            }\n                                                                            setTokensToSend(e.target.value);\n\n                                                                        }}\n                                                                        variant=\"filled\"\n                                                                        style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\", borderRadius: 4}}\n                                                                    />\n\n                                                                </div>\n                                                            </div>\n\n                                                            <div className=\"row mt-2 px-md-5\">\n\n                                                                <div className=\"col-12 px-md-5 d-flex justify-content-start\">\n                                                                    <p className=\"text-light\">{t('Dashboard.Index.Wallet.SpotWallet.AmountToSend')}: <strong>{tokensToSend}</strong></p>\n                                                                </div>\n\n                                                                <div className=\"col-12 px-md-5 d-flex justify-content-start\">\n                                                                    <p className=\"text-light\">{t('Dashboard.Index.Wallet.SpotWallet.RemainingAmount')}:\n                                                                        <strong className={amount - convertForSend(tokensToSend) < 0 ? \"text-danger\" : \"\"}>\n                                                                            {(amount - convertForSend(tokensToSend)).toString().slice(0, (amount - convertForSend(tokensToSend)).toString().length-6) + \".\" + (amount - convertForSend(tokensToSend)).toString().slice((amount - tokensToSend).toString().length-6)}\n                                                                        </strong>\n                                                                    </p>\n                                                                </div>\n\n                                                                <div className=\"col-12 px-md-5 d-flex justify-content-start\">\n                                                                    <p className=\"text-danger\"><strong>{amount - convertForSend(tokensToSend) < 0 ? t('Dashboard.Index.Wallet.SpotWallet.WithoutTokens') : \"\"}</strong></p>\n                                                                </div>\n\n                                                                <div className=\"col-12 px-md-5\">\n                                                                    <Divider light style={{backgroundColor: \"#FFFFFF\"}} />\n                                                                </div>\n                                                            </div>\n\n                                                            <div className=\"row mt-5 px-md-5\">\n                                                                <div className=\"col-12 px-md-5\">\n                                                                    <Button fullWidth variant=\"contained\" size=\"large\" type=\"submit\" style={{backgroundColor: \"#0655af\", color: \"white\"}}>\n                                                                        {t('Dashboard.Index.Wallet.SpotWallet.SendButton')}\n                                                                    </Button>\n                                                                </div>\n                                                            </div>\n\n                                                        </div>\n                                                    </form>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                            <Col className=\"mb-5 mb-xl-0\" xl=\"5\">\n                                <CryptoList tokensArray={tokensArray} allInfoTokens={allInfoTokens} />\n                            </Col>\n                        </Row>\n\n                        <Row className=\"d-flex justify-content-center\">\n                            <Col className=\"mb-5 mb-xl-0\" xl=\"12\">\n                                <TransactionsHistory address={tokenAddress}/>\n                            </Col>\n                        </Row>\n                    </Container>\n                    <Backdrop className={classes.backdrop} open={open} >\n                        <CircularProgress color=\"inherit\" />\n                    </Backdrop>\n\n\n                    <Dialog open={openSmsModal} aria-labelledby=\"customized-dialog-title\" aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle onClose={handleClose} id=\"customized-dialog-title\">\n                            {t('Dashboard.Index.PhoneMessages.Title')}\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                {t('Dashboard.Index.PhoneMessages.Text')}\n                            </DialogContentText>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"smscode\"\n                                label=\"Código\"\n                                type=\"number\"\n                                fullWidth\n                                value={smsCode}\n                                onChange={e => setSmsCode(e.target.value)}\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={requestNewCode ? sendSmsCode : null} disabled={!requestNewCode} color=\"primary\">\n                                {t('Dashboard.Index.PhoneMessages.AskNewCode')} ({newCodeSeconds})\n                            </Button>\n                            <Button onClick={sendTokens} color=\"primary\">\n                                {t('Dashboard.Index.PhoneMessages.Verify')}\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n\n                </div>\n            )\n        } else {\n            return null;\n        }\n    }\n\n\n    return (\n        <>\n            {renderWallet()}\n        </>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default Wallet;\n","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Profile.jsx",["282","283","284","285","286"],"/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/ExpansionComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/UploadImage.jsx",["287"],"/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/PersonalData.jsx",["288","289","290","291"],"import 'date-fns';\nimport React, {useContext, useState} from 'react';\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {KeyboardDatePicker, MuiPickersUtilsProvider} from '@material-ui/pickers';\nimport SaveIcon from '@material-ui/icons/Save';\nimport swal from \"sweetalert\";\nimport {db} from \"../../../config/firebase\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/material.css'\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {ProfileContext} from \"../../../context/ProfileContext\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport SunshineFinder from \"../../../apis/SunshineFinder\";\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {useTranslation} from \"react-i18next\";\n\nconst PersonalData = ({uid}) => {\n    const {t} = useTranslation();\n    const classes = useStyles();\n    const profileContext = useContext(ProfileContext);\n    const [open, setOpen] = useState(false);\n    const masterCondition = profileContext.profileStatus === 0 || profileContext.profileStatus === 6 || profileContext.profileStatus === 7;\n    const [smsCode, setSmsCode] = useState(\"\");\n    const [openSmsModal, setOpenSmsModal] = useState(false);\n    const [requestNewCode, setRequestNewCode] = useState(false);\n    const  [newCodeSeconds, setNewCodeSeconds] = useState(0);\n\n    const getAge = (birthDateString) => {\n        let today = new Date();\n        let birthDate = new Date(birthDateString);\n        let age = today.getFullYear() - birthDate.getFullYear();\n        let m = today.getMonth() - birthDate.getMonth();\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n            age--;\n        }\n        return age;\n    }\n\n    const handleDateChange = (date) => {\n        profileContext.setBirthday(date);\n    };\n\n    const handleSubmit = async () => {\n        setOpen(true);\n        try{\n            const verifySMS = await SunshineFinder.post(\"/verify-number-profile\", {uid, code: smsCode});\n            if(verifySMS.data.status){\n                db.collection('credentials').doc(uid).update({\n                    birthday: profileContext.birthday,\n                    city: profileContext.city,\n                    country: profileContext.country,\n                    lastname: profileContext.lastname,\n                    name: profileContext.name,\n                    phone: profileContext.phone,\n                    state: profileContext.stateLocation,\n                    countryComplete: profileContext.countryCompleteName,\n                    address: profileContext.address,\n                    profileStatus: 1,\n                }).then(() => {\n                    swal(t('Dashboard.Index.Profile.PersonalData.Modals.0.Title'), t('Dashboard.Index.Profile.PersonalData.Modals.0.Text'), \"success\");\n                    setOpenSmsModal(false);\n                    setOpen(false);\n                });\n            } else {\n                throw \"sms-incorrect\";\n            }\n        } catch (e) {\n            switch (e.message || e){\n                case \"sms-incorrect\":\n                    swal(t('Dashboard.Index.Profile.PersonalData.Modals.1.Title'), t('Dashboard.Index.Profile.PersonalData.Modals.1.Text'), \"warning\");\n                    break;\n                default:\n                    swal(t('Dashboard.Index.Profile.PersonalData.Modals.2.Title'), t('Dashboard.Index.Profile.PersonalData.Modals.2.Text'), \"error\");\n            }\n        }\n\n    }\n\n    const enableRequestSms = () => {\n        setTimeout(() => {\n            setRequestNewCode(true);\n        }, 60000);\n    }\n\n    const startTimer = () => {\n        let timeleft = 60;\n        let downloadTimer = setInterval(() => {\n            timeleft--;\n            setNewCodeSeconds(timeleft);\n            if(timeleft <= 0)\n                clearInterval(downloadTimer);\n        },1000);\n    }\n\n    const sendSmsCode = async () => {\n        setOpen(true);\n        try {\n            if (masterCondition) {\n                if (profileContext.name !== \"\" && profileContext.lastname !== \"\" && profileContext.birthday !== \"\" && profileContext.country !== \"\" && profileContext.stateLocation !== \"\" && profileContext.city !== \"\" && profileContext.phone !== \"\" && profileContext.address !== \"\") {\n                    if (getAge(profileContext.birthday) >= 18) {\n                        swal({\n                            \"title\": t('Dashboard.Index.Profile.PersonalData.Modals.3.Title'),\n                            text: t('Dashboard.Index.Profile.PersonalData.Modals.3.Text'),\n                            icon: \"warning\",\n                            buttons: true,\n                            dangerMode: true,\n                        })\n                            .then(async (willConfirm) => {\n                                if (willConfirm) {\n                                    const sendSMS = await SunshineFinder.post(\"/send-sms-profile\", {uid, phone: profileContext.phone});\n                                    if(sendSMS.data.status){\n                                        setOpen(false);\n                                        setRequestNewCode(false);\n                                        setOpenSmsModal(true);\n                                        enableRequestSms();\n                                        startTimer();\n                                    } else {\n                                        throw \"sms-not-sended\";\n                                    }\n                                } else {\n                                    setOpen(false);\n                                }\n                            });\n\n                    } else {\n                        setOpen(false);\n                        swal(t('Dashboard.Index.Profile.PersonalData.Modals.4.Title'), t('Dashboard.Index.Profile.PersonalData.Modals.4.Text'), \"warning\");\n                    }\n\n                } else {\n                    setOpen(false);\n                    swal(t('Dashboard.Index.Profile.PersonalData.Modals.5.Title'), t('Dashboard.Index.Profile.PersonalData.Modals.5.Text'), \"warning\");\n                }\n            }\n\n        } catch (e) {\n            switch (e.message || e){\n                case \"sms-not-sended\":\n                    swal(t('Dashboard.Index.Profile.PersonalData.Modals.1.Title'), t('Dashboard.Index.Profile.PersonalData.Modals.1.Text'), \"warning\");\n                    break;\n                default:\n                    swal(t('Dashboard.Index.Profile.PersonalData.Modals.2.Title'), t('Dashboard.Index.Profile.PersonalData.Modals.2.Text'), \"error\");\n            }\n        }\n    }\n\n    const handleClose = () => {\n        setOpenSmsModal(false);\n    };\n\n    const styles = (theme) => ({\n        root: {\n            margin: 0,\n            padding: theme.spacing(2),\n        },\n        closeButton: {\n            position: 'absolute',\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n            color: theme.palette.grey[500],\n        },\n    });\n\n    const DialogTitle = withStyles(styles)((props) => {\n        const { children, classes, onClose, ...other } = props;\n        return (\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\n                <Typography variant=\"h6\">{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n        );\n    });\n\n    return (\n        <div>\n\n            <Typography className={classes.title} variant=\"h4\" component=\"h4\">\n                {t('Dashboard.Index.Profile.PersonalData.Title')}\n            </Typography>\n                <Typography className={classes.title} variant=\"subtitle2\" component=\"h2\"\n                            color=\"textSecondary\">\n                    {t('Dashboard.Index.Profile.PersonalData.Text')}\n                </Typography>\n                <div className=\"row mt-3\">\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <TextField variant=\"outlined\" required\n                                   disabled={!(masterCondition)}\n                                   fullWidth id=\"outlined-basic\" label={t('Dashboard.Index.Profile.PersonalData.Name')}\n                                   style={{alignContent: \"center\"}} value={profileContext.name}\n                                   onChange={(masterCondition) ? e => profileContext.setName(e.target.value) : () => false}/>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <TextField variant=\"outlined\" required\n                                   disabled={!(masterCondition)}\n                                   fullWidth id=\"outlined-basic\" label={t('Dashboard.Index.Profile.PersonalData.Lastname')} value={profileContext.lastname}\n                                   onChange={(masterCondition) ? e => profileContext.setLastname(e.target.value): () => false}/>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                            <KeyboardDatePicker\n                                inputVariant=\"outlined\"\n                                required\n                                id=\"date-picker-dialog\"\n                                disabled={!(masterCondition)}\n                                fullWidth\n                                label={t('Dashboard.Index.Profile.PersonalData.Date')}\n                                format=\"dd/MM/yyyy\"\n                                value={profileContext.birthday ? profileContext.birthday : null}\n                                onChange={(masterCondition) ? handleDateChange : () => false}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}\n                            />\n                        </MuiPickersUtilsProvider>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <FormControl variant=\"outlined\" fullWidth className={classes.formControl}>\n                            {\n                                (masterCondition) ? (\n                                    <>\n                                        <InputLabel id=\"demo-simple-select-label\">{t('Dashboard.Index.Profile.PersonalData.Country')}</InputLabel>\n                                        <Select\n                                            required\n                                            disabled={!(masterCondition)}\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select\"\n                                            value={(masterCondition) ? profileContext.country : false}\n                                            onChange={\n                                                (masterCondition) ?\n                                                    e => {\n                                                        profileContext.setCountry(e.target.value)\n                                                        profileContext.setStateLocation(\"\")\n                                                        profileContext.setCity(\"\")\n                                                        profileContext.getStatesAPI(e.currentTarget.id);\n                                                        profileContext.setCountryCompleteName(e.currentTarget.id)\n                                                    } : () => false}>\n                                            {\n                                                profileContext.countriesAPI.map((value, index) => (\n                                                    <MenuItem key={index} id={value.country_name}\n                                                              value={value.country_short_name}>{value.country_name}</MenuItem>\n                                                ))\n                                            }\n                                        </Select>\n                                    </>\n                                ) : (\n                                    <TextField variant=\"outlined\" required\n                                               disabled={!(masterCondition)}\n                                               fullWidth id=\"outlined-basic\" label={t('Dashboard.Index.Profile.PersonalData.Country')} value={profileContext.country}\n                                    />\n                                )\n                            }\n\n                        </FormControl>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <FormControl variant=\"outlined\" fullWidth className={classes.formControl}>\n\n                            {\n                                (masterCondition) ? (\n                                    <>\n                                        <InputLabel id=\"demo-simple-select-label\">{t('Dashboard.Index.Profile.PersonalData.State')}</InputLabel>\n                                        <Select\n                                            required\n                                            disabled={!(masterCondition)}\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select-state\"\n                                            value={(masterCondition) ? profileContext.stateLocation : false}\n                                            onChange={\n                                                (masterCondition) ?\n                                                    e => {\n                                                        profileContext.setStateLocation(e.target.value);\n                                                        profileContext.setCity(\"\");\n                                                    } : () => false}>\n                                            {\n                                                profileContext.statesAPI.map((value, index) => (\n                                                    <MenuItem key={index}\n                                                              value={value.state_name}>{value.state_name}</MenuItem>\n                                                ))\n                                            }\n                                        </Select>\n                                    </>\n                                ) : (\n                                    <TextField variant=\"outlined\" required\n                                               disabled={!(masterCondition)}\n                                               fullWidth id=\"outlined-basic\" label={t('Dashboard.Index.Profile.PersonalData.State')}\n                                               value={profileContext.stateLocation}\n                                    />\n                                )\n                            }\n\n                        </FormControl>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <TextField variant=\"outlined\" required\n                                   disabled={!(masterCondition)}\n                                   fullWidth id=\"outlined-basic\" label={t('Dashboard.Index.Profile.PersonalData.City')} value={profileContext.city}\n                                   onChange={(masterCondition) ? e => profileContext.setCity(e.target.value): () => false}/>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        {!(masterCondition) ?\n                            <TextField required variant=\"outlined\"\n                                       disabled={!(masterCondition)}\n                                       fullWidth id=\"outlined-basic\" label={t('Dashboard.Index.Profile.PersonalData.Phone')}\n                                       value={\"+\" + profileContext.phone}\n                                       onChange={(masterCondition) ? e => profileContext.setPhone(e.target.value) : () => false}/> :\n                            <PhoneInput\n                                disabled={!(masterCondition)}\n                                country={'mx'}\n                                inputStyle={{height: 56, width: \"100%\"}}\n                                value={profileContext.phone}\n                                onChange={(masterCondition) ? e => profileContext.setPhone(e): () => false}\n                            />}\n\n                    </div>\n\n                    <div className=\"row mt-5 mb-5 px-5 mt-5\">\n                        <div className=\"col-12\">\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                disabled={!(masterCondition)}\n                                fullWidth\n                                id=\"standard-multiline-static\"\n                                label={t('Dashboard.Index.Profile.PersonalData.Address')}\n                                multiline\n                                rows={4}\n                                value={profileContext.address}\n                                onChange={(masterCondition) ? e => profileContext.setAddress(e.target.value) : () => false}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"col-12 d-flex justify-content-center\">\n                        <Button\n                            disabled={!(masterCondition)}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"large\"\n                            className={classes.button}\n                            onClick={sendSmsCode}\n                            startIcon={<SaveIcon/>}\n                            type={(masterCondition) ? \"submit\" : \"button\"}\n                        >\n                            {t('Dashboard.Index.Profile.PersonalData.SendButton')}\n                        </Button>\n                    </div>\n                </div>\n            <Backdrop className={classes.backdrop} open={open} >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n\n\n            <Dialog open={openSmsModal} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                    {t('Dashboard.Index.PhoneMessages.Title')}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {t('Dashboard.Index.PhoneMessages.Text')}\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"smscode\"\n                        label={t('Dashboard.Index.PhoneMessages.Code')}\n                        type=\"number\"\n                        fullWidth\n                        value={smsCode}\n                        onChange={e => setSmsCode(e.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={requestNewCode ? sendSmsCode : null} disabled={!requestNewCode} color=\"primary\">\n                        {t('Dashboard.Index.PhoneMessages.AskNewCode')} ({newCodeSeconds})\n                    </Button>\n                    <Button onClick={handleSubmit} color=\"primary\">\n                        {t('Dashboard.Index.PhoneMessages.Verify')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n        </div>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 300,\n        paddingBottom: 20,\n        marginTop: 20,\n        marginBottom: 20\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        marginTop: 20,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    cardActions: {},\n    large: {\n        width: theme.spacing(25),\n        height: theme.spacing(25),\n        marginBottom: 10\n    },\n    formControl: {\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    alert: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default PersonalData;","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/VerifiedProfile.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/dashboard/Settings.jsx",["292","293","294","295","296","297"],"/home/snow/Documentos/ico-web-final/src/components/dashboard/settings/ChangePassword.jsx",["298","299"],"/home/snow/Documentos/ico-web-final/src/components/dashboard/PurchaseHistoryComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/context/AuthContext.jsx",[],"/home/snow/Documentos/ico-web-final/src/config/Particles-config.js",[],"/home/snow/Documentos/ico-web-final/src/components/PasswordRecoveryModal.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/SignUpModal.jsx",["300"],"import React, {useState} from 'react';\nimport \"./navbar/css/styles.css\"\nimport 'react-phone-number-input/style.css'\nimport {db, auth} from \"../config/firebase\";\nimport swal from \"sweetalert\";\nimport swal2 from '@sweetalert/with-react';\nimport firebase from 'firebase';\nimport \"firebase/auth\";\nimport GoogleButton from \"react-google-button\";\nimport passwordValidator from \"password-validator\";\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport {useHistory} from \"react-router-dom\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FilledInput from \"@material-ui/core/FilledInput\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport SunshineFinder from \"../apis/SunshineFinder\";\nrequire('dotenv').config();\n\n\nconst SignUpModal = () => {\n\n    const sendReCAPTCHAValue = async (value) => {\n        const response = await SunshineFinder.post(\"/api/recaptcha\", {\n            captchaValue: value\n        });\n\n        if (response.data.status === \"success\") {\n            setVerifiedCaptcha(true);\n        }\n\n    }\n\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [apellido, setApellido] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [repeatedPassword, setRepeteadPassword] = useState(\"\");\n    const [checkedValue, setCheckedValue] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [verifiedCaptcha, setVerifiedCaptcha] = useState(false);\n    const history = useHistory();\n\n    //VALIDATIONS\n    const validations = {\n        requiredFields: () => {\n            return (name !== '' && email !== '' && password !== '' && apellido !== '')\n        }\n    }\n\n    const handleCheckboxState = (e) => {\n        setCheckedValue(e.target.checked);\n    }\n\n    const saveDataInFirestore = (uid, data = {}) => {\n        if (Object.keys(data).length > 0) {\n            /*============GUARDAR DATOS EN FIRESTORE CON GOOGLE===========*/\n            db.collection(\"credentials\").doc(uid).set({\n                UUID: uid,\n                city: \"\".replace(/<[^>]+>/g, ''),\n                doc: \"\".replace(/<[^>]+>/g, ''),\n                email: data.email.replace(/<[^>]+>/g, ''),\n                name: data.name.replace(/<[^>]+>/g, ''),\n                phone: data.phone === null ? \"\".replace(/<[^>]+>/g, '') : data.phone.replace(/<[^>]+>/g, ''),\n                authType: \"GOOGLE\".replace(/<[^>]+>/g, ''),\n                birthday: \"\".replace(/<[^>]+>/g, ''),\n                country: \"\".replace(/<[^>]+>/g, ''),\n                state: \"\".replace(/<[^>]+>/g, ''),\n                address: \"\".replace(/<[^>]+>/g, ''),\n                suns: 0,\n                countryComplete: \"\".replace(/<[^>]+>/g, ''),\n                profileStatus: 0,\n                fileType: \"\".replace(/<[^>]+>/g, ''),\n                profilePicture: \"\".replace(/<[^>]+>/g, ''),\n                profilePictureStatus: 0,\n                addressToken: \"\",\n                privateKey: \"\"\n            }).then(docRef => {\n                history.push(\"/\");\n                window.location.reload();\n                clearStates();\n            }).catch((error) => {\n\n            });\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n        } else {\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n            db.collection(\"credentials\").doc(uid).set({\n                UUID: uid,\n                city: \"\".replace(/<[^>]+>/g, ''),\n                doc: \"\".replace(/<[^>]+>/g, ''),\n                email: email.replace(/<[^>]+>/g, ''),\n                name: name.replace(/<[^>]+>/g, ''),\n                lastname: apellido.replace(/<[^>]+>/g, ''),\n                phone: \"\".replace(/<[^>]+>/g, ''),\n                authType: \"EMAIL\".replace(/<[^>]+>/g, ''),\n                birthday: \"\".replace(/<[^>]+>/g, ''),\n                country: \"\".replace(/<[^>]+>/g, ''),\n                state: \"\".replace(/<[^>]+>/g, ''),\n                address: \"\".replace(/<[^>]+>/g, ''),\n                profileStatus: 0,\n                suns: 0,\n                countryComplete: \"\".replace(/<[^>]+>/g, ''),\n                fileType: \"\".replace(/<[^>]+>/g, ''),\n                profilePicture: \"\".replace(/<[^>]+>/g, ''),\n                profilePictureStatus: 0,\n                addressToken: \"\",\n                privateKey: \"\"\n            }).then(docRef => {\n                swal({\n                    title: \"¡Registro exitoso!\",\n                    text: \"Enviamos un enlace al correo electrónico que proporcionaste para verificar tu cuenta.\",\n                    icon: \"success\",\n                    button: \"¡Entendido!\",\n                    closeOnClickOutside: false\n                }).then(confirm => {\n                    if (confirm) {\n                        document.getElementById(\"closeModalSignUp\").click();\n                        document.getElementById(\"signInButton\").click();\n                    }\n                });\n                clearStates();\n                setLoading(false);\n            }).catch((error) => {\n                setLoading(false);\n\n            });\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n        }\n    }\n\n    const searchDataInFirestore = async id => {\n        let result = null;\n        await db.collection('credentials').doc(id).get().then(doc => {\n            result = doc.exists ? \"exists\" : \"not-exists\";\n        }).catch(error => {\n            result = \"error\";\n\n        });\n        return result;\n    }\n\n    const clearStates = () => {\n        setName('');\n        setEmail('');\n        setPassword('');\n        setRepeteadPassword('');\n        setApellido('');\n        setCheckedValue(false);\n        setVerifiedCaptcha(false);\n    }\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (validations.requiredFields()) {\n\n            let schema = new passwordValidator();\n            schema\n                .is().min(8)\n                .is().max(100)\n                .has().uppercase()\n                .has().lowercase()\n                .has().digits(1)\n                .has().not().spaces();\n\n            if (schema.validate(password)) {\n                if (password === repeatedPassword) {\n                    if (checkedValue) {\n                        if (verifiedCaptcha) {\n                            setLoading(true);\n                            auth.createUserWithEmailAndPassword(email, password)\n                                .then((user) => {\n\n                                    user.user.sendEmailVerification().then(r => {\n                                        saveDataInFirestore(user.user.uid);\n                                    }, (error) => {\n\n                                    })\n\n                                    auth.signOut();\n\n                                }).catch((error) => {\n                                setLoading(false);\n                                let errorCode = error.code;\n\n\n                                /*============== EL CORREO YA SE USA POR OTRA CUENTA ==================*/\n                                if (errorCode === \"auth/email-already-in-use\") {\n                                    swal({\n                                        title: \"Oops\",\n                                        text: \"La dirección de correo ya se encuentra en uso\",\n                                        icon: \"warning\",\n                                        button: \"¡Entendido!\",\n                                        closeOnClickOutside: false\n                                    });\n                                } else if (errorCode === \"auth/weak-password\") {\n                                    swal({\n                                        title: \"Oops\",\n                                        text: \"La contraseña debe tener al menos 8 caracteres!\",\n                                        icon: \"warning\",\n                                        button: \"¡Entendido!\"\n                                    });\n                                }\n\n                            });\n                        } else {\n                            swal({\n                                title: \"Verifica el CAPTCHA\",\n                                text: \"Intenta verificar el CAPTCHA de nuevo para poder continuar\",\n                                icon: \"warning\",\n                                button: \"¡Entendido!\"\n                            });\n                        }\n                    } else {\n                        swal({\n                            title: \"Advertencia\",\n                            text: \"Debes aceptar los términos y condiciones para poder registrarte\",\n                            icon: \"warning\",\n                            button: \"¡Entendido!\",\n                            closeOnClickOutside: false\n                        });\n                    }\n                } else {\n                    swal({\n                        title: \"Las contraseñas no coinciden\",\n                        text: \"Asegurate de escribir las mismas contraseñas en los campos correspondientes\",\n                        icon: \"warning\",\n                        button: \"¡Entendido!\",\n                        closeOnClickOutside: false\n                    });\n                }\n\n            } else {\n                swal2({\n                    text: \"Tu contraseña debe cumplir con los siguientes requisitos\",\n                    closeOnClickOutside: false,\n                    buttons: {\n                        cancel: \"Entendido\",\n                    },\n                    content: (\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <ul>\n                                    {\n                                        schema.validate(password, {list: true}).map((element, index) => {\n\n                                            switch (element) {\n                                                case 'min':\n\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo 8 caracteres</p></li>\n                                                    )\n\n                                                case 'max':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Máximo 100 caracteres</p></li>\n                                                    )\n\n                                                case 'uppercase':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo una letra mayuscula</p></li>\n                                                    )\n\n                                                case 'lowercase':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo 1 letra minuscula</p></li>\n                                                    )\n\n                                                case 'spaces':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">No debe contener espacios</p></li>\n                                                    )\n\n                                                case 'digits':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo 1 número</p></li>\n                                                    )\n\n                                                default:\n                                                    return\n                                            }\n                                        })\n                                    }\n                                </ul>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n\n        } else {\n            swal({\n                title: \"Advertencia\",\n                text: \"Debes llenar todos los campos\",\n                icon: \"warning\",\n                button: \"¡Entendido!\",\n                closeOnClickOutside: false\n            });\n        }\n    };\n\n    const signUpWithGoogle = async () => {\n\n        let provider = new firebase.auth.GoogleAuthProvider();\n        provider.addScope('https://www.googleapis.com/auth/userinfo.profile');\n        auth.languageCode = 'es';\n        await auth.signInWithPopup(provider).then(async (result) => {\n\n            let user = result.user;\n\n            if (user.emailVerified) {\n\n                let userStatus = await searchDataInFirestore(user.uid);\n                if(userStatus === \"exists\"){\n                    history.push(\"/\");\n                    window.location.reload();\n                    clearStates();\n                } else if (userStatus === \"not-exists\"){\n                    saveDataInFirestore(user.uid, {\n                        email: user.email,\n                        name: user.displayName,\n                        phone: user.phoneNumber,\n                    });\n                } else {\n                    swal({\n                        title: \"Ocurrió un error\",\n                        text: \"Ocurrió un error inesperado, inténtalo de nuevo más tarde\",\n                        icon: \"error\",\n                        button: \"Entendido!\",\n                        closeOnClickOutside: false\n                    });\n                }\n\n            } else {\n                user.sendEmailVerification().then(r => {\n                    saveDataInFirestore(user.uid, {\n                        email: user.email,\n                        name: user.displayName,\n                        phone: user.phoneNumber,\n                    });\n                }, (error) => {\n\n                });\n                auth.signOut();\n            }\n        }).catch((error) => {\n            auth.signOut();\n        })\n\n    }\n\n    const [values, setValues] = useState({\n        amount: '',\n        password: '',\n        weight: '',\n        weightRange: '',\n        showPassword1: false,\n        showPassword2: false\n    });\n\n    const handleClickShowPassword = (id) => {\n        if (id === 1) {\n            setValues({...values, showPassword1: !values.showPassword1});\n        } else if (id === 2) {\n            setValues({...values, showPassword2: !values.showPassword2});\n        }\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    return (\n\n        <div className=\"modal fade \" id=\"signUpModal\" data-backdrop=\"static\" data-keyboard=\"false\"\n             tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-xl modal-dialog-centered pl-xl-5 pr-xl-5\">\n                <div className=\"modal-content  registrobody pl-xl-5 pr-xl-5\">\n\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title col-12 text-light\" id=\"staticBackdropLabel\">Crea tu cuenta</h5>\n                        <button type=\"button\" id=\"closeModalSignUp\" className=\"close\" data-dismiss=\"modal\"\n                                aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n\n\n                    <div className=\"modal-body col-12 pl-xl-5 pr-xl-5\">\n\n\n                        <div className=\"form-group col-12 d-flex justify-content-center\">\n                            <GoogleButton\n                                label='Iniciar sesión con Google'\n                                onClick={signUpWithGoogle}\n                                style={{width: 500, borderRadius: 3}}\n                            />\n                        </div>\n\n                        <form className=\"form\" onSubmit={handleSubmit}>\n                            <div className=\"container mt-5 pl-xl-5 pr-xl-5\">\n                                <div className=\"row pl-xl-5 pr-xl-5\">\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"name\"\n                                                   name=\"name\"\n                                                   value={name}\n                                                   label=\"Nombre\"\n                                                   type=\"text\"\n                                                   onChange={(e) => setName(e.target.value)} variant=\"filled\"/>\n\n\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"lastname\"\n                                                   name=\"lastnane\"\n                                                   label=\"Apellido\"\n                                                   value={apellido}\n                                                   type=\"text\"\n                                                   onChange={(e) => setApellido(e.target.value)} variant=\"filled\"/>\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"outlined-basic\" label=\"Email\"\n                                                   value={email}\n                                                   type=\"email\"\n                                                   onChange={(e) => setEmail(e.target.value)} variant=\"filled\"/>\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <FormControl fullWidth className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                     variant=\"filled\">\n                                            <InputLabel htmlFor=\"filled-adornment-password\">Contraseña *</InputLabel>\n                                            <FilledInput\n                                                id=\"signup-password\"\n                                                type={values.showPassword1 ? 'text' : 'password'}\n                                                value={password}\n                                                onChange={(e) => setPassword(e.target.value)}\n                                                style={{backgroundColor: \"#FFFFFF\"}}\n                                                endAdornment={\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            aria-label=\"toggle password visibility\"\n                                                            onClick={() => handleClickShowPassword(1)}\n                                                            onMouseDown={handleMouseDownPassword}\n                                                            edge=\"end\"\n                                                        >\n                                                            {values.showPassword1 ? <Visibility/> : <VisibilityOff/>}\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                }\n                                            />\n                                        </FormControl>\n\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <FormControl fullWidth className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                     variant=\"filled\">\n                                            <InputLabel htmlFor=\"filled-adornment-password\">Repite tu contraseña\n                                                *</InputLabel>\n                                            <FilledInput\n                                                id=\"signup-password\"\n                                                type={values.showPassword2 ? 'text' : 'password'}\n                                                value={repeatedPassword}\n                                                onChange={(e) => setRepeteadPassword(e.target.value)}\n                                                style={{backgroundColor: \"#FFFFFF\"}}\n                                                endAdornment={\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            aria-label=\"toggle password visibility\"\n                                                            onClick={() => handleClickShowPassword(2)}\n                                                            onMouseDown={handleMouseDownPassword}\n                                                            edge=\"end\"\n                                                        >\n                                                            {values.showPassword2 ? <Visibility/> : <VisibilityOff/>}\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                }\n                                            />\n                                        </FormControl>\n\n                                    </div>\n\n                                    <div className=\"form-group form-check col-12 mb-3 pl-xl-5 pr-xl-5\">\n                                                    <span\n                                                        className=\"btn form-check ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5 form-regi\">\n\n                                                        <FormControlLabel\n                                                            control={\n                                                                <Checkbox className=\"form-check-input form-regi\"\n                                                                          checked={checkedValue}\n                                                                          onChange={handleCheckboxState}\n                                                                          required={true}\n                                                                          name=\"terminosyCondiciones\"/>}\n                                                            label=\"Aceptar términos y condiciones\" required\n                                                            name=\"terminosYCondiciones\"\n                                                        />\n                                                    </span>\n                                    </div>\n\n                                    <div className=\"form-group col-12 d-flex justify-content-center\">\n                                        <ReCAPTCHA sitekey={process.env.REACT_APP_RECAPTCHA}\n                                                   onChange={sendReCAPTCHAValue}/>\n                                    </div>\n\n                                    <div className=\"form-group col-12 mt-3\" id=\"signUpButtonDiv\">\n                                        <button type=\"submit\"\n                                                className=\"btn btn-registro\"\n                                                id=\"signUpButton\"\n                                                disabled={loading}>\n                                            {loading ? (\n                                                <div className=\"spinner-border text-dark\" role=\"status\">\n                                                    <span className=\"sr-only\">Registrando...</span>\n                                                </div>\n                                            ) : \"REGISTRATE\"}\n                                        </button>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </form>\n\n                    </div>\n\n                    <div className=\"modal-footer col-12 btn-footer\"></div>\n\n                </div>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default SignUpModal;","/home/snow/Documentos/ico-web-final/src/components/SignInModal.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/js/canvasUtils.js",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/js/encrypt.js",[],"/home/snow/Documentos/ico-web-final/src/components/Video.jsx",["301"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst Video = () => {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 videosunrep mt-5 p-0\">\n                <iframe src=\"https://www.youtube.com/embed/O5c2yMxyL54\" frameBorder=\"0\"\n                        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                        allowFullScreen></iframe>\n            </div>\n        </div>\n    );\n};\n\nexport default Video;","/home/snow/Documentos/ico-web-final/src/components/Countdown.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Soporte.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/PreguntasFrecuentes.jsx",["302"],"import React from 'react';\nimport Depmason from \"../images/depmason.svg\";\nimport Imgpreg from \"../images/imgpreg.svg\";\nimport Depmenos from \"../images/depmenos.svg\";\nimport Fade from 'react-reveal/Fade';\nimport {useTranslation} from 'react-i18next';\n\nconst PreguntasFrecuentes = () => {\n\n    const {t} = useTranslation();\n\n    const changeIcon = (imageID) => {\n        let image = document.getElementById(imageID)\n        if (image.src.match(\"on\")) {\n            image.src = Depmenos;\n        } else {\n            image.src = Depmason;\n        }\n    }\n\n    const items = [\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.0.Title'),\n            text: t('FAQ.Items.0.Text'),\n            id: \"myImageA\"\n        },\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.1.Title'),\n            text: t('FAQ.Items.1.Text'),\n            id: \"myImageB\"\n        },\n\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.2.Title'),\n            text: t('FAQ.Items.2.Text'),\n            id: \"myImageD\"\n        },\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.3.Title'),\n            text: t('FAQ.Items.3.Text'),\n            id: \"myImageE\"\n        },\n    ]\n\n    return (\n        <div className=\"row fondo-preg\">\n            <p className=\"frecprec\">{t('FAQ.Title')}</p>\n            <div className=\"col-lg-6 col-md-6 col-12 preguntas\">\n\n                {\n                    items.map((value, index) => (\n                        <div key={index}>\n                            <Fade left cascade>\n                                <p className=\"\">\n                                    <button className=\"btn btn-preg1\" onClick={() => changeIcon(value.id)}\n                                            type=\"button\" data-toggle=\"collapse\" data-target={\"#\" + value.id + \"target\"}\n                                            aria-expanded=\"false\" aria-controls=\"collapseExample\">\n                                        <img src={value.icon} id={value.id} alt=\"\" className=\"mas\"/>{value.title}\n                                    </button>\n                                </p>\n                                <div className=\"collapse btn-res1 \" id={value.id + \"target\"}>\n                                    <div className=\"text-preg\">\n                                        {value.text}\n                                    </div>\n                                </div>\n                            </Fade>\n                        </div>\n                    ))\n                }\n\n            </div>\n\n            <div className=\"col-md-6 col-12\">\n                <img src={Imgpreg} className=\"PREGIMG d-none d-lg-block d-md-block\"/>\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default PreguntasFrecuentes;","/home/snow/Documentos/ico-web-final/src/components/Newsletter.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Ventajas.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/MapaApp.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/WhitepaperHome.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/Home.jsx",["303","304","305"],"import React, {Suspense, lazy, useEffect} from 'react';\nimport '../App.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport monedag from \"../images/moneda.gif\";\nimport Banner from \"../components/Banner\";\nimport {useAuth} from \"../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\nconst Video = lazy(() => import ('../components/Video'));\nconst Countdown = lazy(() => import ('../components/Countdown'));\nconst Proyectos = lazy(() => import ('../components/ProyectosComponent'));\nconst Soporte = lazy(() => import ('../components/Soporte'));\nconst PreguntasFrecuentes = lazy(() => import ('../components/PreguntasFrecuentes'));\nconst Newsletter = lazy(() => import ('../components/Newsletter'));\nconst MapaApp = lazy(() => import ('../components/MapaApp'));\nconst Ventajas = lazy(() => import ('../components/Ventajas'));\nconst WhitepaperHome = lazy(() => import ('../components/WhitepaperHome'));\nconst Footer = lazy(() => import ('../components/Footer'));\n\n\nconst Home = () => {\n\n    const {currentUser} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {\n        }\n    }, []);\n\n    return (\n        <div className=\"container-fluid\">\n            <Banner/>\n            <Suspense fallback={\n                <div className=\"  container mt-5 text-center   justify-content-center\">\n                    <img className=\"moneda-carga\" align=\"top\" src={monedag}/><p>CARGANDO...</p>\n                </div>\n            }>\n                <Video/>\n                <Countdown/>\n                <WhitepaperHome/>\n                <Ventajas/>\n                <Proyectos/>\n                <MapaApp/>\n                <Soporte/>\n                <PreguntasFrecuentes/>\n                <Newsletter/>\n                <Footer/>\n            </Suspense>\n        </div>\n    )\n}\n\nexport default Home;\n","/home/snow/Documentos/ico-web-final/src/components/Banner.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Footer.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Navigation.jsx",["306","307","308","309","310","311"],"import '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport logonav from '../images/logonav.svg';\nimport React, {useState} from 'react';\nimport \"firebase/auth\";\nimport {NavLink, useHistory} from 'react-router-dom';\nimport 'firebase/firestore';\nimport SignUpModal from \"./SignUpModal\";\nimport SignInModal from \"./SignInModal\";\nimport '../js/mostrarmenu';\nimport {useTranslation} from 'react-i18next';\nimport i18next from 'i18next';\nimport USAFLAG from \"../images/usa_flag_icon.svg\";\nimport MEXICOFLAG from \"../images/mexico_flag_icon.svg\";\nimport {useAuth} from \"../context/AuthContext\";\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PasswordRecoveryModal from \"./PasswordRecoveryModal\";\n\nconst Navigation = () => {\n    const {t} = useTranslation();\n    const history = useHistory();\n    const {currentUser, logout} = useAuth();\n    const [logged] = useState(currentUser ? true : false);\n\n    function handleClick(lang) {\n        i18next.changeLanguage(lang)\n    }\n\n    async function handleLogout() {\n        try {\n            await logout();\n            window.location.reload();\n            history.push(\"/Home\");\n        } catch {\n        }\n    }\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick2 = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (e) => {\n        setAnchorEl(null);\n        console.log(e);\n        switch (e) {\n            case \"index\":\n                history.push(\"./\");\n                break;\n            case \"profile\":\n                history.push(\"./Profile\");\n                break;\n            case \"logout\":\n                handleLogout();\n                break;\n            case \"settings\":\n                history.push(\"./Settings\");\n                break;\n            default:\n                history.push(\"./\");\n                break;\n        }\n    };\n\n    const renderNavbar = () => {\n        if (logged) {\n\n            return (\n                <nav className=\"navbar navbar-expand-lg navbar-light fixed-top \" id=\"navbar\">\n                    <div className=\"container-fluid\">\n                        <NavLink className=\"navbar-brand navegacion  \" to=\"/\">\n                            <img alt=\"Navigation logo\" src={logonav}/>\n                        </NavLink>\n                        <button className=\"navbar-toggler mr-auto\" id=\"boton-nav\" type=\"button\" data-toggle=\"collapse\"\n                                data-target=\"#navbar-menu\"\n                                aria-controls=\"navbar-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div className=\" collapse navbar-collapse\" id=\"navbar-menu\">\n                            <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                                <li className=\"nav-item\">\n                                    <h5>SUNSHINE</h5>\n                                </li>\n                            </ul>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('en')}\n                               data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={USAFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('es')}\n                               data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={MEXICOFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                            <div>\n                                <Button aria-controls=\"simple-menu\" variant=\"contained\"\n                                        style={{backgroundColor: \"#0655af\", color: \"white\"}} aria-haspopup=\"true\"\n                                        onClick={handleClick2}>\n                                    {currentUser ? currentUser.email : \"Invitado\"} <ExpandMoreIcon/>\n                                </Button>\n                                <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={anchorEl}\n                                    keepMounted\n                                    open={Boolean(anchorEl)}\n                                    onClose={handleClose}\n                                >\n                                    <MenuItem id=\"index\" onClick={e => handleClose(e.target.id)}>{t('Dashboard.Menu.Home')}</MenuItem>\n                                    <MenuItem id=\"profile\" onClick={e => handleClose(e.target.id)}>{t('Dashboard.Menu.Profile')}</MenuItem>\n                                    <MenuItem id=\"settings\" onClick={e => handleClose(e.target.id)}>{t('Dashboard.Menu.Settings')}</MenuItem>\n                                    <MenuItem id=\"logout\" onClick={e => handleClose(e.target.id)}>{t('Dashboard.Menu.Logout')}</MenuItem>\n                                </Menu>\n                            </div>\n\n                        </div>\n                    </div>\n                </nav>\n            )\n\n        } else {\n            return (\n                <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"navbar\">\n                    <div className=\"container-fluid\">\n                        <NavLink className=\"navbar-brand navegacion  \" to=\"/\">\n                            <img alt=\"Logo navigation\" src={logonav}/>\n                        </NavLink>\n                        <button className=\"navbar-toggler mr-auto\" id=\"boton-nav\" type=\"button\" data-toggle=\"collapse\"\n                                data-target=\"#navbar-menu\"\n                                aria-controls=\"navbar-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div className=\" collapse navbar-collapse\" id=\"navbar-menu\">\n                            <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                                <li className=\"nav-item\">\n                                    <NavLink className=\"navbar-brand nav-link navegacion\" data-toggle=\"collapse\"\n                                             data-target=\".navbar-collapse.show\"\n                                             to=\"./Acerca\">{t('Navbar.Acerca')}\n                                    </NavLink>\n                                </li>\n                                <li className=\"nav-item \">\n\n                                    <NavLink className=\"navbar-brand nav-link navegacion\" tap-index=\"-1\"\n                                             activeClassName=\"active\" area-disabled=\"true\" data-toggle=\"collapse\"\n                                             data-target=\".navbar-collapse.show\"\n                                             to=\"./Roaptomap\">{t('Navbar.RoadToMap')}\n                                    </NavLink>\n                                </li>\n                                <li className=\"nav-item \">\n\n                                    <NavLink className=\"navbar-brand nav-link navegacion\" activeClassName=\"active\"\n                                             area-disabled=\"true\" data-toggle=\"collapse\"\n                                             data-target=\".navbar-collapse.show\"\n                                             to=\"./ProyectosComponent\">{t('Navbar.Proyectos')}\n                                    </NavLink>\n                                </li>\n                            </ul>\n                            <a href=\"#\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <button type=\"button\" id=\"signInButton\" className=\"navsesion btn btn-link\"\n                                        data-toggle=\"modal\" data-target=\"#signInModal\"\n                                >{t('Navbar.SignIn')}\n                                </button>\n                            </a>\n\n                            <a href=\"#\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <button type=\"button\" className=\"navsesion btn btn-link\" data-toggle=\"modal\"\n                                        data-target=\"#signUpModal\"\n                                >\n                                    {t('Navbar.SignUp')}\n                                </button>\n                            </a>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('en')}\n                               data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={USAFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('es')}\n                               data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={MEXICOFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                        </div>\n                        <SignUpModal/>\n                        <SignInModal/>\n                        <PasswordRecoveryModal/>\n                    </div>\n                </nav>\n            )\n        }\n    }\n\n    return (\n\n        <>\n            {renderNavbar()}\n        </>\n    )\n}\nexport default Navigation;","/home/snow/Documentos/ico-web-final/src/components/ProyectosComponent.jsx",["312","313","314"],"import React, {useEffect} from 'react';\nimport Celsym from \"../images/celsym.svg\";\nimport circulo1 from \"../images/circulo1.svg\";\nimport Celhawk from \"../images/celhawk.svg\";\nimport circulo2 from \"../images/circulo2.svg\";\nimport Cellyon from \"../images/cellyon.svg\";\nimport circulo3 from \"../images/circulo3.svg\";\nimport Engranaje from \"../images/engranaje.svg\";\nimport fococontorno from \"../images/fococontorno.svg\";\nimport Engrane1 from \"../images/engrane1.svg\";\nimport Engrane2 from \"../images/engrane2.svg\";\nimport Engrane3 from \"../images/engrane3.svg\";\nimport Engrane4 from \"../images/engrane4.svg\";\nimport Engrane5 from \"../images/engrane5.svg\";\nimport Engrane6 from \"../images/engrane6.svg\";\nimport Engrane7 from \"../images/engrane7.svg\";\nimport Zoom from 'react-reveal/Zoom';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from \"react-router-dom\";\nimport {useAuth} from \"../context/AuthContext\";\n\nconst ProyectosComponent = () => {\n\n    const {t} = useTranslation();\n    const {currentUser, logout} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {\n        }\n    }, []);\n\n    return (\n        <div>\n\n            <div className=\"row\">\n                <div className=\"col-12 sec6\">\n                    <span className=\"titulo6 \">{t('Projects.Title')}</span>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12 contenedor-engra\">\n                    <div className=\" d-flex justify-content-start \">\n                        <button className=\" btn fap-btn2\" type=\"button\" data-toggle=\"modal\"\n                                data-target=\"#bd-example-modal-lg\">\n\n                            <div className=\"modal fade modal-fullscreen bd-example-modal-lg\" id=\"bd-example-modal-lg\"\n                                 data-backdrop=\"static\" data-keyboard=\"false\"\n                                 tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\n                                 aria-hidden=\"true\">\n                                <div className=\"modal-dialog modal-xl modal-dialog-centered\">\n                                    <button hidden type=\"button\" id=\"closeSynmphonyModal\" className=\"close\"\n                                            data-dismiss=\"modal\"\n                                            aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                    <Zoom>\n                                        <div className=\"modal-content modal-sym \">\n\n                                            <div className=\"modal-body row container-fluid \">\n\n                                                <div className=\"col-12 col-xl-4\">\n\n                                                    <img src={Celsym} alt=\"Celsym\" className=\"modal-imgsym img-fluid \"\n                                                    />\n                                                </div>\n                                                <div className=\"col-12 col-xl-8\">\n\n                                                 <span className=\"modal-titu\">{t('Projects.Symphony.ModalTitle')}\n                                                     <p className=\"modal-text\">({t('Projects.Symphony.Type')})\n                                                         <p className=\"modal-cuerpo\">\n                                                            {t('Projects.Symphony.Text')}\n                                                         </p>\n                                                     </p>\n                                                 </span>\n\n                                                </div>\n                                            </div>\n\n                                        </div>\n                                    </Zoom>\n                                </div>\n                            </div>\n\n                            <img src={circulo1} className=\"fap-btn2-1\" alt=\"Circle 1\"/>\n                            <svg className=\"svg1\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n                                 width=\"70mm\" height=\"70mm\" viewBox=\"0 0 120 120\">\n                                <circle className=\"circle1\" cx=\"60\" cy=\"60\" r=\"50\"\n                                        fill=\"transparent\"/>\n                            </svg>\n                            <p className=\"textbtn2\"> SYMPHONY</p></button>\n                        <br/>\n                        <div className=\"con-txtbtn\">\n                            <p className=\" textsyn\"><br/><br/><br/><br/>\n                                <br/><br/><br/> {t('Projects.Symphony.ModalTitle')} <br/></p><p\n                            className=\"mintext\">({t('Projects.Symphony.Type')})</p>\n                        </div>\n                    </div>\n\n                    <div className=\"col-12 d-flex justify-content-center \">\n                        <button className=\"btn fap-btn3\" type=\"button\" data-toggle=\"modal\"\n                                data-target=\".bd-example-modal-lg3\">\n                            <div className=\"modal  fade modal-fullscreen bd-example-modal-lg3\" tabIndex=\"-1\"\n                                 role=\"dialog\"\n                                 aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\">\n                                <div\n                                    className=\"modal-dialog modal-cont modal-dialog-centered modal-dialog-scrollable  modal-xl \">\n                                    <div className=\" modal-content p-0 modal-sym \">\n                                        <div className=\"modal-body row container-fluid \">\n\n                                            <div className=\"col-lg-4 col-12 justify-content-center\">\n                                                <img src={Celhawk} alt=\"Hawk\" className=\"modal-imgsym img-fluid \"\n                                                />\n                                            </div>\n                                            <div className=\"col-lg-8 col-12\">\n\n                                                 <span className=\"modal-titu\"> {t('Projects.Hawk.ModalTitle')}\n                                                     <p className=\"modal-text\">{t('Projects.Hawk.Type')}\n                                                         <p className=\"modal-cuerpo\">{t('Projects.Hawk.Text')}</p>\n                                                     </p>\n                                                 </span>\n\n                                            </div>\n\n\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <img src={circulo2} className=\"fap-btn3-2\" alt=\"Circle 2\"/>\n                            <svg className=\"svg2\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n                                 width=\"70mm\" height=\"70mm\" viewBox=\"0 0 120 120\">\n                                <circle cx=\"60\" className=\"circle2\" cy=\"60\" r=\"50\"\n                                        fill=\"transparent\"/>\n                            </svg>\n                            <p className=\"textbtn3\"> HAWK</p></button>\n                        <p className=\"textsyn2\"><br/> <br/> <br/>{t('Projects.Hawk.ModalTitle')}</p><p\n                        className=\" mintext2\">{t('Projects.Hawk.Type')}</p></div>\n\n\n                    <div className=\"d-flex justify-content-end\">\n\n                        <button className=\"btn fap-btn4\"\n                                type=\"button\" data-toggle=\"modal\"\n                                data-target=\".bd-example-modal-lg2\">\n                            <div className=\"modal  fade modal-fullscreen bd-example-modal-lg2\" tabIndex=\"-1\"\n                                 role=\"dialog\"\n                                 aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\">\n                                <div className=\"modal-dialog modal-cont modal-xl\">\n                                    <div className=\" modal-content modal-sym \">\n                                        <div className=\"row container-fluid \">\n\n                                            <div className=\"col-lg-3 col-12 cont-cel\">\n\n                                                <img src={Cellyon} alt=\"Lyon\" className=\"modal-imgsym img-fluid\"\n                                                />\n                                            </div>\n                                            <div className=\"col-lg-9 col-12\">\n\n                                             <span className=\"modal-titu\"> {t('Projects.Lion.ModalTitle')}\n                                                 <p className=\"modal-text\"> {t('Projects.Lion.Type')}<p\n                                                     className=\"modal-cuerpo\">\n                                             {t('Projects.Lion.Text')}\n                                             </p></p>\n\n                                             </span>\n\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <img src={circulo3} className=\"fap-btn4-3\" alt=\"Circle 3\"/>\n                            <svg className=\"svg3\" version=\"1.1\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 width=\"70mm\" height=\"70mm\" viewBox=\"0 0 120 120\">\n                                <circle cx=\"60\" cy=\"60\" r=\"50\"\n                                        fill=\"transparent\"/>\n                            </svg>\n                            <p className=\"textbtn4\"> LION</p>\n\n                        </button>\n                        <p className=\"textsyn3\"><br/>{t('Projects.Lion.ModalTitle')}</p><p\n                        className=\" mintext3\">{t('Projects.Lion.Type')}</p>\n                    </div>\n                    <img src={Engranaje} alt=\"Engranaje\" className=\"engranaje engranejegris\"/>\n\n                    <div className=\"row\">\n                        <div className=\"col-6 focoenv-cont\">\n                            <img src={fococontorno} alt=\"Foco 1\" className=\"focoenv\"/>\n                            <img src={Engrane1} alt=\"Foco 1\" className=\"engrane1foc engranaje\"/>\n                            <img src={Engrane2} alt=\"Foco 2\" className=\"engrane2foc engranaje\"/>\n                            <img src={Engrane3} alt=\"Foco 3\" className=\"engrane3foc engranaje\"/>\n                            <img src={Engrane4} alt=\"Foco 4\" className=\"engrane4foc engranaje\"/>\n                            <img src={Engrane5} alt=\"Foco 5\" className=\"engrane5foc engranaje\"/>\n                            <img src={Engrane6} alt=\"Foco 6\" className=\"engrane6foc engranaje\"/>\n                            <img src={Engrane7} alt=\"Foco 7\" className=\"engrane7foc engranaje\"/>\n\n                        </div>\n                    </div>\n\n                </div>\n\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default ProyectosComponent;","/home/snow/Documentos/ico-web-final/src/routes/Proyectos.jsx",[],"/home/snow/Documentos/ico-web-final/src/config/firebase.js",[],"/home/snow/Documentos/ico-web-final/src/routes/Roaptomap.jsx",["315","316"],"import '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, {useEffect} from \"react\";\nimport Footer from '../components/Footer';\nimport DemoCarousel from '../components/Carousel.jsx';\nimport maparoad from '../images/road-map.png';\nimport {useTranslation} from 'react-i18next';\nimport lineascar from \"../images/lineas.svg\";\nimport {useAuth} from \"../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\nconst RoaptoMapa = () => {\n    const {t} = useTranslation();\n    const {currentUser} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {\n        }\n    }, []);\n\n    return (\n        <div className=\"road\">\n            <div className=\"row\">\n                <img className=\"img-fluid linea-car-1 d-flex d-md-none\" src={lineascar} alt=\"linacarrusel\"/>\n                <p className=\"text-roap-map\">\n                    <h1 align=\"center\">ROAD MAP</h1>\n                    <p className=\"text-roap-1 d-none d-md-flex\">{t('RoadToMap.0')}</p>\n                    <p className=\"text-roap-2 d-none d-md-flex\">{t('RoadToMap.1')}</p>\n                    <p className=\"text-roap-3 d-none d-md-flex\">{t('RoadToMap.2')}</p>\n                    <p className=\"text-roap-4 d-none d-md-flex\">{t('RoadToMap.3')}</p>\n                    <p className=\"text-roap-5 d-none d-md-flex\">{t('RoadToMap.4')}</p>\n                    <p className=\"text-roap-6 d-none d-md-flex\">{t('RoadToMap.5')}</p>\n                    <p className=\"text-roap-7 d-none d-md-flex\">{t('RoadToMap.6')}</p>\n                    <p className=\"text-roap-8 d-none d-md-flex\">{t('RoadToMap.7')}</p>\n                </p>\n                <img src={maparoad} className=\"d-none d-md-flex maparoad\" alt=\"Roadmap\"/>\n            </div>\n            <DemoCarousel/>\n            <Footer/>\n        </div>\n    )\n}\n\n\nexport default RoaptoMapa;","/home/snow/Documentos/ico-web-final/src/components/Carousel.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/Pdf.jsx",["317"],"import React, {useState} from 'react';\nimport '../App.css';\nimport '../css/whitepaper.css';\nimport Docpdf from '../docs/Avance.pdf';\nimport Loader from '../components/Loader';\n\nimport {Document, Page} from 'react-pdf';\nimport {pdfjs} from 'react-pdf';\n\nimport ControlPanel from '../components/ControlPanel';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n\n\nconst Pdf = () => {\n\n    const [numPages, setNumPages] = useState(null);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [isLoading, setIsLoading] = useState(true);\n    const [scale, setScale] = useState(1.0);\n\n    function onDocumentLoadSuccess({numPages}) {\n        setNumPages(numPages);\n        setIsLoading(false);\n    }\n\n    return (\n\n        <div className=\"row\">\n\n            <div className=\"col-12 fondopdf p-3 d-none d-md-block\">\n\n                <iframe width='800' data-toggle=\"collapse\" data-target=\".navbar-collapse.show\"\n                         className=\"google-viewer\" height='600' frameborder='0'\n                         src=\"https://firebasestorage.googleapis.com/v0/b/sunshine-ico.appspot.com/o/WHITEPAPER%20SUNI.pdf?alt=media&token=6a606197-0768-449d-b35b-e9147ce27bfe\"></iframe>\n                <Loader isLoading={isLoading}/>\n\n            </div>\n            <div className=\"col-12 fondopdf p-3 d-block d-md-none\">\n                <Loader isLoading={isLoading}/>\n                <ControlPanel numPages={numPages}\n                              pageNumber={pageNumber}\n                              setPageNumber={setPageNumber}\n                              setScale={setScale}/>\n\n                <Document className=\"pdfcontainer\"\n                          file={Docpdf}\n                          onLoadSuccess={onDocumentLoadSuccess}>\n                    <Page pageNumber={pageNumber} scale={scale}/>\n                </Document>\n            </div>\n        </div>\n\n\n    );\n}\n\n\nexport default Pdf;\n        ","/home/snow/Documentos/ico-web-final/src/components/Loader.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/ControlPanel.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/Acerca.jsx",["318","319","320","321","322","323","324"],"                                                                                   import React, {useState, useEffect} from \"react\";\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Footer from '../components/Footer';\nimport Linkecontact from \"../images/linkecontact.svg\";\nimport Twitercontact from \"../images/twitercontact.svg\";\nimport '../css/acerca.css';\nimport {useTranslation} from 'react-i18next';\nimport ACCESIBILIDAD from '../images/Accesibilidad-01.png';\nimport PRIVACIDAD from '../images/provacidad-04.png';\nimport SOLIDEZ from '../images/solidez-02.png';\nimport TRABAJOEQUIPO from '../images/trabajo en equipo-03.png';\nimport VIRY from '../images/team/VIRY.jpg';\nimport JOSS from '../images/team/JOS.jpg';\nimport CHRIS from '../images/team/CHRIS.jpg';\nimport MANU from '../images/team/MANU.jpg';\nimport CRIS from '../images/team/CRIS.jpg';\nimport Fade from 'react-reveal/Fade';\nimport Zoom from 'react-reveal/Zoom';\nimport CardsWorkers from \"../components/CardsWorkers.jsx\";\nimport {useAuth} from \"../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\n\nconst Acerca = () => {\n\n    const {t} = useTranslation();\n    const {currentUser} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {}\n    }, []);\n\n    const differences = [\n        {\n            image: ACCESIBILIDAD,\n            title: t('AboutSection.Differences.Items.0.Title'),\n            description: t('AboutSection.Differences.Items.0.Text')\n        },\n        {\n            image: PRIVACIDAD,\n            title: t('AboutSection.Differences.Items.1.Title'),\n            description: t('AboutSection.Differences.Items.1.Text')\n        },\n        {\n            image: SOLIDEZ,\n            title: t('AboutSection.Differences.Items.2.Title'),\n            description: t('AboutSection.Differences.Items.2.Text')\n        },\n        {\n            image: TRABAJOEQUIPO,\n            title: t('AboutSection.Differences.Items.3.Title'),\n            description: t('AboutSection.Differences.Items.3.Text')\n        }\n    ];\n\n    const team2 = [\n        {\n            image: VIRY,\n            name: t('AboutSection.Team.Items.0.Name'),\n            career: t('AboutSection.Team.Items.0.Career'),\n            description: t('AboutSection.Team.Items.0.Description'),\n            social: {\n                linkedin: \"https://mx.linkedin.com/in/viry-uribe-879b68163/\",\n                twitter: \"https://twitter.com/home?lang=es\"\n            }\n        },\n        {\n            image: JOSS,\n            name: t('AboutSection.Team.Items.1.Name'),\n            career: t('AboutSection.Team.Items.1.Career'),\n            description: t('AboutSection.Team.Items.1.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/jocelyn-uribe-maldonado-720a90203/\",\n                twitter: \"https://twitter.com/jocelyn_um\"\n            }\n        },\n        {\n            image: CHRIS,\n            name: t('AboutSection.Team.Items.2.Name'),\n            career: t('AboutSection.Team.Items.2.Career'),\n            description: t('AboutSection.Team.Items.2.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/ahtziri-antonio-pe%C3%B1a-142705179/\",\n                twitter: \"\"\n            }\n        },\n        {\n            image: MANU,\n            name: t('AboutSection.Team.Items.3.Name'),\n            career: t('AboutSection.Team.Items.3.Career'),\n            description: t('AboutSection.Team.Items.3.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/jose-manuel-viniegra-molina-aab9a51a8/\",\n                twitter: \"https://twitter.com/manuel87129931\"\n            }\n        },\n        {\n            image: CRIS,\n            name: t('AboutSection.Team.Items.4.Name'),\n            career: t('AboutSection.Team.Items.4.Career'),\n            description: t('AboutSection.Team.Items.4.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/cristian-augusto-armenta-garcia/\",\n                twitter: \"https://twitter.com/CRISTIANAUGUS14\"\n            }\n        }\n    ]\n\n    return (\n        <div>\n            <div className=\"container-fluid\">\n                <Fade left cascade>\n                    <div className=\"row mt-5 mb-5 pt-5 pb-5 pl-md-5 pr-md-5 pl-lg-5 pr-lg-5 pl-xl-5 pr-xl-5 bg-about2\">\n                        <div className=\"col-12 mt-5  pb-5\">\n                            <h1 className=\"text-center text-preview text-size-banner\">\n                                {t('AboutSection.Title')}\n                            </h1>\n                            <hr/>\n                        </div>\n                        <div className=\"col-12 mb-5\">\n                            <p className=\"text-center mb-5 text-preview pl-md-5 pr-md-5 pl-lg-5 pr-lg-5 pl-xl-5 pr-xl-5\"\n                               style={{fontSize: 30}}>\n                                {t('AboutSection.Introduction.0')}\n                            </p>\n                        </div>\n                    </div>\n\n                    <div className=\"row justify-content-center\">\n                        <div className=\"  col-md-3 cont-card-mision p-5\">\n                            <div className=\"d-flex justify-content-center mt-5\">\n                                <h3 className=\"title-vision \">   {t('AboutSection.Mision.Title')}</h3>\n                            </div>\n                            <div className=\"col-12 d-flex text-center \">\n                                <h5 className=\"parrafo-vision p-1\"> {t('AboutSection.Mision.description')}</h5>\n                            </div>\n                        </div>\n\n                        <div className=\"col-md-3 cont-card-mision p-5\">\n                            <div className=\"d-flex justify-content-center mt-5\">\n                                <h3 className=\"title-vision\"> {t('AboutSection.Vision.Title')}</h3>\n                            </div>\n                            <div className=\"col-12 d-flex text-center\">\n                                <h5 className=\"parrafo-vision p-1\">{t('AboutSection.Vision.description')}</h5>\n                            </div>\n                        </div>\n                    </div>\n                </Fade>\n\n                <div className=\"row pb-5 justify-content-center\">\n                    <div className=\"col-12 pt-4 pb-4\">\n                        <h1 className=\"text-size-title-differences text-center\">\n                            <Fade left cascade>{t('AboutSection.Differences.Title')}</Fade>\n                        </h1>\n                    </div>\n                    {\n                        differences.map((value, index) => (\n                            <Zoom>\n                                <div id={index}\n                                     className=\" col-12 col-sm-12 row col-lg-4 col-xl-4 cont-diferencia\">\n                                    <img src={value.image} alt=\"Member photo\" className=\"icons-differences\"/>\n                                    <h3 className=\"text-center\">{value.title}</h3>\n                                    <p className=\"text-center\">{value.description}</p>\n                                </div>\n                            </Zoom>\n                        ))\n                    }\n                </div>\n                <CardsWorkers/>\n                <div className=\"container-fluid pb-5 d-block d-md-none\">\n                    <div className=\"container \">\n                        <div className=\"row pb-5\">\n                            {\n                                team2.map((value, index) => (\n                                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 col-xl-4\">\n                                        <div className=\"card text-light text-center mt-5 mb-5 bg-cards\">\n\n                                            <div className=\"card-img-top mt-5\">\n                                                <img className=\"rounded-circle img-fluid teams-images w-50\"\n                                                     src={value.image} alt=\"Card image cap\"/>\n                                            </div>\n\n                                            <div className=\"card-body mt-3 d-block\">\n                                                <h3 className=\"card-title mb-3\">{value.name}</h3>\n                                                <h6 className=\"card-subtitle mb-4\">{value.career}</h6>\n                                                <div style={{height: 120}}>\n                                                    <p className=\"card-text mb-4\">{value.description}</p>\n                                                </div>\n                                            </div>\n                                            <div className=\"card-body border-top\">\n                                                <div className=\"row\">\n                                                    <div className=\"col-6\">\n                                                        <a href={value.social.linkedin} target=\"_blank\">\n                                                            <img src={Linkecontact} alt=\"face\"/>\n                                                        </a>\n                                                    </div>\n                                                    <div className=\"col-6\">\n                                                        <a href={value.social.twitter || \"#\"}\n                                                           className={value.social.twitter || \"disabled\"}\n                                                           target=\"_blank\">\n                                                            <img src={Twitercontact} alt=\"face\"/>\n                                                        </a>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <button className=\"btn bg-cards text-light btn-lg btn-block\" data-toggle=\"modal\"\n                                    data-target=\"#staticBackdropcon\">{t('AboutSection.ButtonText')}</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container-fluid\">\n                <Footer/>\n            </div>\n        </div>\n    )\n}\n\nexport default Acerca;\n","/home/snow/Documentos/ico-web-final/src/components/CardsWorkers.jsx",[],"/home/snow/Documentos/ico-web-final/src/js/mostrarmenu.js",["325","326","327"],"import React, {Component} from 'react';\r\nimport $ from \"jquery\";\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\r\n\r\n    let ubicacionPrincipal = window.pageYOffset;\r\n    window.onscroll = function () {\r\n        let Dezplazamiento_actual = window.pageYOffset;\r\n        if (ubicacionPrincipal >= Dezplazamiento_actual) {\r\n            document.getElementById('navbar').style.top = '0';\r\n        } else {\r\n            document.getElementById('navbar').style.top = '-100px';\r\n        }\r\n        ubicacionPrincipal = Dezplazamiento_actual;\r\n    }\r\n});\r\n","/home/snow/Documentos/ico-web-final/src/js/cuentaregresiva.js",["328"],"import '../App.css';\nimport React from 'react';\nimport Lineadias from '../images/lineadias.svg';\n\nexport default function contador(id, limitDate, finalMessage) {\n    const $contador = document.getElementById(id), contadorDate = new Date(limitDate).getTime();\n    let contadorTempo = setInterval(() => {\n        let now = new Date().getTime(),\n            limitTime = contadorDate - now,\n            days = (Math.floor(limitTime / (1000 * 60 * 60 * 24))),\n            hours = (\"0\" + Math.floor(limitTime % (1000 * 60 * 60 * 24) / (1000 * 60 * 60))).slice(-2),\n            minutes = (\"0\" + Math.floor(limitTime % (1000 * 60 * 60) / (1000 * 60))).slice(-2),\n            seconds = (\"0\" + Math.floor(limitTime % (1000 * 60) / (1000))).slice(-2);\n        $contador.innerHTML = `<button class=\" btn contador-fap fap-dias fap-btn \"><p class=\"num-conta\"> ${days}</p> <img src=${Lineadias} alt=\"linea\" class=\"linea-dias\"/></button> <i class=\"texto-contenedor\">\n    <br/>dias</i> \n    \n    <button class=\"btn contador-fap fap-horas fap-btn\"><p class=\"num-conta\"> ${hours}</p></button> <br/><i class=\"texto-contenedor texto-horas\">\n    <br/>horas</i>\n     <button class=\"btn contador-fap fap-minutos fap-btn \"><p class=\"num-conta\">${minutes}</p></button><br/><i class=\"texto-contenedor texto-min\">\n     <br/>minutos</i>\n    <button class=\"btn contador-fap fap-seg fap-btn\"><p class=\"num-conta\">${seconds}</p></button><br/><i class=\"texto-contenedor texto-seg\">\n    <br/>segundos</i> `\n\n        if (limitTime < 0) {\n            clearInterval(contadorTempo);\n            $contador.innerHTML = `<h1 class=\"fintokens\">${finalMessage}</h1>  `\n        }\n\n\n    }, 1000);\n\n\n}","/home/snow/Documentos/ico-web-final/src/context/CheckoutContext.jsx",[],"/home/snow/Documentos/ico-web-final/src/context/ProfileContext.jsx",[],{"ruleId":"329","replacedBy":"330"},{"ruleId":"331","replacedBy":"332"},{"ruleId":"333","severity":1,"message":"334","line":45,"column":8,"nodeType":"335","endLine":45,"endColumn":10,"suggestions":"336"},{"ruleId":"337","severity":1,"message":"338","line":84,"column":9,"nodeType":"339","messageId":"340","endLine":200,"endColumn":10},{"ruleId":"333","severity":1,"message":"341","line":37,"column":8,"nodeType":"335","endLine":37,"endColumn":10,"suggestions":"342"},{"ruleId":"333","severity":1,"message":"343","line":56,"column":7,"nodeType":"335","endLine":56,"endColumn":20,"suggestions":"344"},{"ruleId":"345","severity":1,"message":"346","line":1,"column":16,"nodeType":"347","messageId":"348","endLine":1,"endColumn":24},{"ruleId":"345","severity":1,"message":"349","line":84,"column":11,"nodeType":"347","messageId":"348","endLine":84,"endColumn":16},{"ruleId":"333","severity":1,"message":"350","line":88,"column":8,"nodeType":"335","endLine":88,"endColumn":17,"suggestions":"351"},{"ruleId":"352","severity":1,"message":"353","line":112,"column":34,"nodeType":"354","messageId":"355","endLine":112,"endColumn":36},{"ruleId":"356","severity":1,"message":"357","line":157,"column":153,"nodeType":"358","endLine":157,"endColumn":242},{"ruleId":"359","severity":1,"message":"360","line":201,"column":40,"nodeType":"358","messageId":"361","endLine":201,"endColumn":130,"fix":"362"},{"ruleId":"359","severity":1,"message":"360","line":206,"column":40,"nodeType":"358","messageId":"361","endLine":206,"endColumn":125,"fix":"363"},{"ruleId":"345","severity":1,"message":"364","line":43,"column":47,"nodeType":"347","messageId":"348","endLine":43,"endColumn":58},{"ruleId":"333","severity":1,"message":"365","line":82,"column":8,"nodeType":"335","endLine":82,"endColumn":10,"suggestions":"366"},{"ruleId":"367","severity":1,"message":"368","line":125,"column":17,"nodeType":"369","messageId":"370","endLine":125,"endColumn":39},{"ruleId":"367","severity":1,"message":"368","line":186,"column":17,"nodeType":"369","messageId":"370","endLine":186,"endColumn":40},{"ruleId":"345","severity":1,"message":"371","line":192,"column":27,"nodeType":"347","messageId":"348","endLine":192,"endColumn":32},{"ruleId":"372","severity":1,"message":"373","line":292,"column":21,"nodeType":"358","endLine":293,"endColumn":60},{"ruleId":"356","severity":1,"message":"374","line":292,"column":21,"nodeType":"358","endLine":293,"endColumn":60},{"ruleId":"375","severity":1,"message":"376","line":485,"column":91,"nodeType":"377","messageId":"378","endLine":485,"endColumn":126},{"ruleId":"345","severity":1,"message":"379","line":44,"column":12,"nodeType":"347","messageId":"348","endLine":44,"endColumn":18},{"ruleId":"345","severity":1,"message":"380","line":55,"column":17,"nodeType":"347","messageId":"348","endLine":55,"endColumn":22},{"ruleId":"333","severity":1,"message":"381","line":74,"column":8,"nodeType":"335","endLine":74,"endColumn":37,"suggestions":"382"},{"ruleId":"337","severity":1,"message":"338","line":86,"column":21,"nodeType":"339","messageId":"340","endLine":100,"endColumn":22},{"ruleId":"383","severity":1,"message":"384","line":153,"column":29,"nodeType":"358","endLine":155,"endColumn":75},{"ruleId":"333","severity":1,"message":"385","line":46,"column":8,"nodeType":"335","endLine":46,"endColumn":47,"suggestions":"386"},{"ruleId":"345","severity":1,"message":"364","line":4,"column":55,"nodeType":"347","messageId":"348","endLine":4,"endColumn":66},{"ruleId":"367","severity":1,"message":"368","line":75,"column":17,"nodeType":"369","messageId":"370","endLine":75,"endColumn":39},{"ruleId":"367","severity":1,"message":"368","line":128,"column":41,"nodeType":"369","messageId":"370","endLine":128,"endColumn":64},{"ruleId":"375","severity":1,"message":"376","line":376,"column":105,"nodeType":"377","messageId":"378","endLine":376,"endColumn":140},{"ruleId":"345","severity":1,"message":"387","line":33,"column":25,"nodeType":"347","messageId":"348","endLine":33,"endColumn":36},{"ruleId":"345","severity":1,"message":"388","line":33,"column":46,"nodeType":"347","messageId":"348","endLine":33,"endColumn":56},{"ruleId":"345","severity":1,"message":"379","line":34,"column":12,"nodeType":"347","messageId":"348","endLine":34,"endColumn":18},{"ruleId":"345","severity":1,"message":"380","line":40,"column":17,"nodeType":"347","messageId":"348","endLine":40,"endColumn":22},{"ruleId":"333","severity":1,"message":"389","line":54,"column":8,"nodeType":"335","endLine":54,"endColumn":10,"suggestions":"390"},{"ruleId":"352","severity":1,"message":"353","line":58,"column":24,"nodeType":"354","messageId":"355","endLine":58,"endColumn":26},{"ruleId":"352","severity":1,"message":"391","line":92,"column":113,"nodeType":"354","messageId":"392","endLine":92,"endColumn":115},{"ruleId":"337","severity":1,"message":"338","line":93,"column":53,"nodeType":"339","messageId":"340","endLine":143,"endColumn":54},{"ruleId":"352","severity":1,"message":"353","line":293,"column":53,"nodeType":"393","messageId":"394","endLine":293,"endColumn":59},{"ruleId":"383","severity":1,"message":"384","line":8,"column":17,"nodeType":"358","endLine":10,"endColumn":41},{"ruleId":"395","severity":1,"message":"396","line":78,"column":17,"nodeType":"358","endLine":78,"endColumn":86},{"ruleId":"345","severity":1,"message":"380","line":29,"column":17,"nodeType":"347","messageId":"348","endLine":29,"endColumn":22},{"ruleId":"333","severity":1,"message":"397","line":33,"column":8,"nodeType":"335","endLine":33,"endColumn":10,"suggestions":"398"},{"ruleId":"395","severity":1,"message":"396","line":40,"column":21,"nodeType":"358","endLine":40,"endColumn":78},{"ruleId":"356","severity":1,"message":"374","line":91,"column":29,"nodeType":"358","endLine":92,"endColumn":91},{"ruleId":"356","severity":1,"message":"374","line":96,"column":29,"nodeType":"358","endLine":97,"endColumn":91},{"ruleId":"356","severity":1,"message":"374","line":163,"column":29,"nodeType":"358","endLine":163,"endColumn":100},{"ruleId":"356","severity":1,"message":"374","line":170,"column":29,"nodeType":"358","endLine":170,"endColumn":100},{"ruleId":"356","severity":1,"message":"374","line":178,"column":29,"nodeType":"358","endLine":179,"endColumn":91},{"ruleId":"356","severity":1,"message":"374","line":183,"column":29,"nodeType":"358","endLine":184,"endColumn":91},{"ruleId":"345","severity":1,"message":"399","line":25,"column":25,"nodeType":"347","messageId":"348","endLine":25,"endColumn":31},{"ruleId":"345","severity":1,"message":"380","line":30,"column":17,"nodeType":"347","messageId":"348","endLine":30,"endColumn":22},{"ruleId":"333","severity":1,"message":"397","line":34,"column":8,"nodeType":"335","endLine":34,"endColumn":10,"suggestions":"400"},{"ruleId":"345","severity":1,"message":"380","line":19,"column":17,"nodeType":"347","messageId":"348","endLine":19,"endColumn":22},{"ruleId":"333","severity":1,"message":"397","line":23,"column":8,"nodeType":"335","endLine":23,"endColumn":10,"suggestions":"401"},{"ruleId":"383","severity":1,"message":"384","line":33,"column":17,"nodeType":"358","endLine":35,"endColumn":178},{"ruleId":"345","severity":1,"message":"346","line":1,"column":99,"nodeType":"347","messageId":"348","endLine":1,"endColumn":107},{"ruleId":"345","severity":1,"message":"380","line":33,"column":17,"nodeType":"347","messageId":"348","endLine":33,"endColumn":22},{"ruleId":"333","severity":1,"message":"397","line":36,"column":8,"nodeType":"335","endLine":36,"endColumn":10,"suggestions":"402"},{"ruleId":"403","severity":1,"message":"404","line":165,"column":37,"nodeType":"358","endLine":165,"endColumn":110},{"ruleId":"403","severity":1,"message":"404","line":183,"column":49,"nodeType":"358","endLine":184,"endColumn":94},{"ruleId":"359","severity":1,"message":"360","line":197,"column":57,"nodeType":"358","messageId":"361","endLine":197,"endColumn":105,"fix":"405"},{"ruleId":"359","severity":1,"message":"360","line":202,"column":57,"nodeType":"358","messageId":"361","endLine":204,"endColumn":76,"fix":"406"},{"ruleId":"345","severity":1,"message":"407","line":1,"column":8,"nodeType":"347","messageId":"348","endLine":1,"endColumn":13},{"ruleId":"345","severity":1,"message":"408","line":1,"column":16,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"409","line":2,"column":8,"nodeType":"347","messageId":"348","endLine":2,"endColumn":9},{"ruleId":"345","severity":1,"message":"407","line":2,"column":8,"nodeType":"347","messageId":"348","endLine":2,"endColumn":13},"no-native-reassign",["410"],"no-negated-in-lhs",["411"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allData.address', 'allData.addressToken', 'allData.city', 'allData.country', 'allData.lastname', 'allData.name', 'allData.state', and 'checkoutContext'. Either include them or remove the dependency array.","ArrayExpression",["412"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'currencyConversor'. Either include it or remove the dependency array. If 'currencyConversor' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["413"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["414"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'theme' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'retrieveTransactions'. Either include it or remove the dependency array.",["415"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"416","text":"417"},{"range":"418","text":"417"},"'DialogTitle' is defined but never used.","React Hook useEffect has missing dependencies: 'currentUser.uid' and 'history'. Either include them or remove the dependency array.",["419"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'title' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'logged' is assigned a value but never used.","'email' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.email', 'currentUser.emailVerified', 'currentUser.uid', 'getAuthTokenCountries', 'getCountriesAPI', 'getUserData', 'history', and 'logout'. Either include them or remove the dependency array.",["420"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useCallback has a missing dependency: 'profileContext'. Either include it or remove the dependency array.",["421"],"'getAuthType' is assigned a value but never used.","'credential' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.email', 'currentUser.emailVerified', 'currentUser.providerData', 'history', and 'logout'. Either include them or remove the dependency array.",["422"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'currentUser.email' and 'history'. Either include them or remove the dependency array.",["423"],"'logout' is assigned a value but never used.",["424"],["425"],["426"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",{"range":"427","text":"417"},{"range":"428","text":"417"},"'React' is defined but never used.","'Component' is defined but never used.","'$' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},[8531,8531]," rel=\"noreferrer\"",[8930,8930],{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"445","fix":"447"},{"desc":"445","fix":"448"},{"desc":"445","fix":"449"},[9135,9135],[9704,9704],"Update the dependencies array to be: [allData.address, allData.addressToken, allData.city, allData.country, allData.lastname, allData.name, allData.state, checkoutContext]",{"range":"450","text":"451"},"Update the dependencies array to be: [currencyConversor]",{"range":"452","text":"453"},"Update the dependencies array to be: [currentUser, history]",{"range":"454","text":"455"},"Update the dependencies array to be: [address, retrieveTransactions]",{"range":"456","text":"457"},"Update the dependencies array to be: [currentUser.uid, history]",{"range":"458","text":"459"},"Update the dependencies array to be: [currentUser.email, currentUser.emailVerified, currentUser.uid, getAuthTokenCountries, getCountriesAPI, getUserData, history, logout, profileContext.jalaPorfavor]",{"range":"460","text":"461"},"Update the dependencies array to be: [imageSrc, croppedAreaPixels, rotation, profileContext]",{"range":"462","text":"463"},"Update the dependencies array to be: [currentUser.email, currentUser.emailVerified, currentUser.providerData, history, logout]",{"range":"464","text":"465"},"Update the dependencies array to be: [currentUser.email, history]",{"range":"466","text":"467"},{"range":"468","text":"467"},{"range":"469","text":"467"},{"range":"470","text":"467"},[1891,1893],"[allData.address, allData.addressToken, allData.city, allData.country, allData.lastname, allData.name, allData.state, checkoutContext]",[908,910],"[currencyConversor]",[1973,1986],"[currentUser, history]",[3339,3348],"[address, retrieveTransactions]",[3247,3249],"[currentUser.uid, history]",[2643,2672],"[currentUser.email, currentUser.emailVerified, currentUser.uid, getAuthTokenCountries, getCountriesAPI, getUserData, history, logout, profileContext.jalaPorfavor]",[1827,1866],"[imageSrc, croppedAreaPixels, rotation, profileContext]",[1836,1838],"[currentUser.email, currentUser.emailVerified, currentUser.providerData, history, logout]",[1272,1274],"[currentUser.email, history]",[1224,1226],[717,719],[1373,1375]]