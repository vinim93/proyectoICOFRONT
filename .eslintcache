[{"/home/snow/Documentos/ico-web-final/src/index.js":"1","/home/snow/Documentos/ico-web-final/src/App.js":"2","/home/snow/Documentos/ico-web-final/src/i18n.js":"3","/home/snow/Documentos/ico-web-final/src/apis/SunshineFinder.js":"4","/home/snow/Documentos/ico-web-final/src/apis/CoingeckoFinder.js":"5","/home/snow/Documentos/ico-web-final/src/apis/PlacesFinder.js":"6","/home/snow/Documentos/ico-web-final/src/apis/TronscanFinder.js":"7","/home/snow/Documentos/ico-web-final/src/components/dashboard/DollarMarktComponent.jsx":"8","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Checkout.jsx":"9","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/AddressForm.jsx":"10","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/PaymentForm.jsx":"11","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Review.jsx":"12","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/TokenAmount.jsx":"13","/home/snow/Documentos/ico-web-final/src/components/dashboard/PaymentComponent.jsx":"14","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Dashboard.jsx":"15","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/HeaderCards.jsx":"16","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/CryptoList.jsx":"17","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/TransactionsHistory.jsx":"18","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Wallet.jsx":"19","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Profile.jsx":"20","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/ExpansionComponent.jsx":"21","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/UploadImage.jsx":"22","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/PersonalData.jsx":"23","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/VerifiedProfile.jsx":"24","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Settings.jsx":"25","/home/snow/Documentos/ico-web-final/src/components/dashboard/settings/ChangePassword.jsx":"26","/home/snow/Documentos/ico-web-final/src/components/dashboard/PurchaseHistoryComponent.jsx":"27","/home/snow/Documentos/ico-web-final/src/context/AuthContext.jsx":"28","/home/snow/Documentos/ico-web-final/src/config/Particles-config.js":"29","/home/snow/Documentos/ico-web-final/src/routes/Recovery.jsx":"30","/home/snow/Documentos/ico-web-final/src/components/PasswordRecoveryModal.jsx":"31","/home/snow/Documentos/ico-web-final/src/components/SignUpModal.jsx":"32","/home/snow/Documentos/ico-web-final/src/components/SignInModal.jsx":"33","/home/snow/Documentos/ico-web-final/src/components/dashboard/js/canvasUtils.js":"34","/home/snow/Documentos/ico-web-final/src/components/dashboard/js/encrypt.js":"35","/home/snow/Documentos/ico-web-final/src/components/Video.jsx":"36","/home/snow/Documentos/ico-web-final/src/components/Countdown.jsx":"37","/home/snow/Documentos/ico-web-final/src/components/Soporte.jsx":"38","/home/snow/Documentos/ico-web-final/src/components/PreguntasFrecuentes.jsx":"39","/home/snow/Documentos/ico-web-final/src/components/Newsletter.jsx":"40","/home/snow/Documentos/ico-web-final/src/components/Ventajas.jsx":"41","/home/snow/Documentos/ico-web-final/src/components/MapaApp.jsx":"42","/home/snow/Documentos/ico-web-final/src/components/WhitepaperHome.jsx":"43","/home/snow/Documentos/ico-web-final/src/routes/Home.jsx":"44","/home/snow/Documentos/ico-web-final/src/components/Banner.jsx":"45","/home/snow/Documentos/ico-web-final/src/components/Footer.jsx":"46","/home/snow/Documentos/ico-web-final/src/components/Navigation.jsx":"47","/home/snow/Documentos/ico-web-final/src/components/ProyectosComponent.jsx":"48","/home/snow/Documentos/ico-web-final/src/routes/Proyectos.jsx":"49","/home/snow/Documentos/ico-web-final/src/config/firebase.js":"50","/home/snow/Documentos/ico-web-final/src/routes/Roaptomap.jsx":"51","/home/snow/Documentos/ico-web-final/src/components/Carousel.jsx":"52","/home/snow/Documentos/ico-web-final/src/routes/Pdf.jsx":"53","/home/snow/Documentos/ico-web-final/src/components/Loader.jsx":"54","/home/snow/Documentos/ico-web-final/src/components/ControlPanel.jsx":"55","/home/snow/Documentos/ico-web-final/src/routes/Acerca.jsx":"56","/home/snow/Documentos/ico-web-final/src/components/CardsWorkers.jsx":"57","/home/snow/Documentos/ico-web-final/src/js/mostrarmenu.js":"58","/home/snow/Documentos/ico-web-final/src/js/cuentaregresiva.js":"59"},{"size":296,"mtime":1626125393939,"results":"60","hashOfConfig":"61"},{"size":2104,"mtime":1624915988587,"results":"62","hashOfConfig":"61"},{"size":1645,"mtime":1621626270725,"results":"63","hashOfConfig":"61"},{"size":139,"mtime":1624990562192,"results":"64","hashOfConfig":"61"},{"size":104,"mtime":1624906925521,"results":"65","hashOfConfig":"61"},{"size":113,"mtime":1624907114457,"results":"66","hashOfConfig":"61"},{"size":107,"mtime":1624907189001,"results":"67","hashOfConfig":"61"},{"size":2966,"mtime":1624906925461,"results":"68","hashOfConfig":"61"},{"size":12531,"mtime":1624908731413,"results":"69","hashOfConfig":"61"},{"size":3229,"mtime":1621626640957,"results":"70","hashOfConfig":"61"},{"size":1582,"mtime":1624908732429,"results":"71","hashOfConfig":"61"},{"size":13120,"mtime":1624906800261,"results":"72","hashOfConfig":"61"},{"size":4468,"mtime":1622053016253,"results":"73","hashOfConfig":"61"},{"size":2299,"mtime":1624909735573,"results":"74","hashOfConfig":"61"},{"size":4081,"mtime":1624909442229,"results":"75","hashOfConfig":"61"},{"size":2315,"mtime":1624565577152,"results":"76","hashOfConfig":"61"},{"size":3535,"mtime":1624565575712,"results":"77","hashOfConfig":"61"},{"size":10019,"mtime":1624908894153,"results":"78","hashOfConfig":"61"},{"size":22201,"mtime":1624909737233,"results":"79","hashOfConfig":"61"},{"size":18091,"mtime":1624909442165,"results":"80","hashOfConfig":"61"},{"size":2329,"mtime":1621626640957,"results":"81","hashOfConfig":"61"},{"size":7912,"mtime":1624909736217,"results":"82","hashOfConfig":"61"},{"size":15988,"mtime":1624909442197,"results":"83","hashOfConfig":"61"},{"size":9677,"mtime":1624909736393,"results":"84","hashOfConfig":"61"},{"size":2966,"mtime":1624909183293,"results":"85","hashOfConfig":"61"},{"size":10246,"mtime":1624565577904,"results":"86","hashOfConfig":"61"},{"size":13291,"mtime":1624909443393,"results":"87","hashOfConfig":"61"},{"size":1782,"mtime":1624909443333,"results":"88","hashOfConfig":"61"},{"size":2358,"mtime":1621626270673,"results":"89","hashOfConfig":"61"},{"size":14462,"mtime":1624909627977,"results":"90","hashOfConfig":"61"},{"size":7097,"mtime":1624909736981,"results":"91","hashOfConfig":"61"},{"size":27730,"mtime":1624909694441,"results":"92","hashOfConfig":"61"},{"size":15861,"mtime":1624909735877,"results":"93","hashOfConfig":"61"},{"size":2388,"mtime":1621626640957,"results":"94","hashOfConfig":"61"},{"size":317,"mtime":1621626640957,"results":"95","hashOfConfig":"61"},{"size":574,"mtime":1623776206874,"results":"96","hashOfConfig":"61"},{"size":1663,"mtime":1624978385920,"results":"97","hashOfConfig":"61"},{"size":1381,"mtime":1626116674806,"results":"98","hashOfConfig":"61"},{"size":2761,"mtime":1624909948113,"results":"99","hashOfConfig":"61"},{"size":718,"mtime":1624909948021,"results":"100","hashOfConfig":"61"},{"size":2999,"mtime":1624909948181,"results":"101","hashOfConfig":"61"},{"size":6885,"mtime":1624909948149,"results":"102","hashOfConfig":"61"},{"size":790,"mtime":1624909948393,"results":"103","hashOfConfig":"61"},{"size":2069,"mtime":1624910518689,"results":"104","hashOfConfig":"61"},{"size":2209,"mtime":1626125677691,"results":"105","hashOfConfig":"61"},{"size":8080,"mtime":1626124083975,"results":"106","hashOfConfig":"61"},{"size":9069,"mtime":1626118332782,"results":"107","hashOfConfig":"61"},{"size":11177,"mtime":1624910518525,"results":"108","hashOfConfig":"61"},{"size":546,"mtime":1624910608725,"results":"109","hashOfConfig":"61"},{"size":633,"mtime":1624990558028,"results":"110","hashOfConfig":"61"},{"size":2075,"mtime":1624915914255,"results":"111","hashOfConfig":"61"},{"size":3073,"mtime":1624978343104,"results":"112","hashOfConfig":"61"},{"size":2096,"mtime":1624978343156,"results":"113","hashOfConfig":"61"},{"size":449,"mtime":1624978343384,"results":"114","hashOfConfig":"61"},{"size":1709,"mtime":1624978343048,"results":"115","hashOfConfig":"61"},{"size":11971,"mtime":1624978343216,"results":"116","hashOfConfig":"61"},{"size":7510,"mtime":1624978500768,"results":"117","hashOfConfig":"61"},{"size":565,"mtime":1624910189605,"results":"118","hashOfConfig":"61"},{"size":1655,"mtime":1624916558231,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11dj60e",{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"124"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"124"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"124"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"124"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"124"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"124"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"124"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"124"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"165","usedDeprecatedRules":"124"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"124"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"124"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"124"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"124"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"124"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"124"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"124"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"124"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"124"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"124"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"124"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"124"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"124"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"124"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"124"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"124"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"124"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"124"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"124"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"124"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"124"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"124"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"124"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"124"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"124"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":2,"source":"267","usedDeprecatedRules":"124"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":2,"source":"270","usedDeprecatedRules":"124"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"124"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"124"},"/home/snow/Documentos/ico-web-final/src/index.js",[],"/home/snow/Documentos/ico-web-final/src/App.js",[],["277","278"],"/home/snow/Documentos/ico-web-final/src/i18n.js",[],"/home/snow/Documentos/ico-web-final/src/apis/SunshineFinder.js",[],"/home/snow/Documentos/ico-web-final/src/apis/CoingeckoFinder.js",[],"/home/snow/Documentos/ico-web-final/src/apis/PlacesFinder.js",[],"/home/snow/Documentos/ico-web-final/src/apis/TronscanFinder.js",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/DollarMarktComponent.jsx",["279"],"import React, {useState, useEffect} from 'react';\nimport axios from \"axios\";\nimport CoingeckoFinder from \"../../apis/CoingeckoFinder\";\n\nconst DollarMarktComponent = () => {\n\n    const [cryptoData, setCryptoData] = useState([{}]);\n\n    const fetchCryptoData = async() => {\n        try {\n            await CoingeckoFinder.get(\"/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false\").then(response => {\n                setCryptoData(response.data);\n            })\n        } catch (e) {\n        }\n    }\n\n    useEffect(() => {\n        fetchCryptoData();\n    },[]);\n\n    return (\n        <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\"\n             aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title-dashboard\" id=\"exampleModalLabel\">Mercado Dólar</h5>\n                        <button type=\"button\" className=\"close-modal\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        {\n                            cryptoData.map((value, index) => (\n                                <div key={index} className=\"alert alert-primary-data-cryptos mr-0 mr-md-3 mr-lg-5\" role=\"alert\">\n                                    <div className=\"row\">\n                                        <div className=\"col-1 col-sm-1 col-md-1 col-lg-0 col-xl-0\">\n                                            <p>{index+1}</p>\n                                        </div>\n                                        <div className=\"d-flex justify-content-center\">\n                                            <div className=\"col-4 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\n                                                <img className=\"img-fluid mt-lg-3 mt-xl-3\" src={value.image} alt=\"\"/>\n                                            </div>\n                                            <div className=\"col-7 col-sm-8 col-md-8 col-lg-9 col-xl-9 d-flex justify-content-start\">\n                                                <h5 className=\"align-middle mt-sm-4 mt-md-4 mt-lg-5 mt-xl-5 text-light\">\n                                                    {value.name} / USD ${value.current_price}\n                                                </h5>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                </div>\n                            ))\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DollarMarktComponent;","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Checkout.jsx",["280","281","282","283","284","285","286","287"],"import React, {useState, useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport AddressForm from './AddressForm';\nimport PaymentForm from './PaymentForm';\nimport Review from './Review';\nimport './css/style.css';\nimport TokenAmount from \"./TokenAmount\";\nimport DONE from '../../../images/done.png';\nimport swal from \"sweetalert\";\nimport SunshineFinder from \"../../../apis/SunshineFinder\";\n\nconst steps = ['Token', 'Método', 'Datos', 'Compra'];\n\nexport default function Checkout({uid, email, allData}) {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n    const [currency, setCurrency] = useState(null);\n    const [usdToMxn, setUsdToMxn] = useState(0);\n    const [mxnToUsd, setMxnToUsd] = useState(0);\n    const [name, setName] = useState(\"\");\n    const [lastname, setLastname] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [stateLocation, setStateLocation] = useState(\"\");\n    const [country, setCountry] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [paymentID, setPaymentID] = useState(\"\");\n    const [paymentDone, setPaymentDone] = useState(false);\n    const [currencyType, setCurrencyType] = useState('USD');\n    const [paymentMethod, setPaymentMethod] = useState('');\n    //SI TU EDITOR DE TEXTO TE INDICA QUE DICHOS ESTADOS NO ESTAN SIENDO UTILIZADOS REVISA LAS 2 FUNCIONES DE ABAJO\n\n    useEffect(() => {\n        setName(allData.name);\n        setLastname(allData.lastname);\n        setAddress(allData.address);\n        setCity(allData.city);\n        setStateLocation(allData.state);\n        setCountry(allData.country);\n    }, []);\n\n    const currencyConversor = async (from, to) => {\n        try {\n            await SunshineFinder.get('/api/exchange-currency', {\n                params: {\n                    from,\n                    to\n                }\n            }).then(response => {\n                if (from === \"USD\" && to === \"MXN\") {\n                    setUsdToMxn(response.data);\n                } else if (from === \"MXN\" && to === \"USD\") {\n                    setMxnToUsd(response.data);\n                }\n            });\n        } catch (e) {\n\n        }\n    }\n\n\n    const setStates = (state, value) => {\n        eval(state)(value);\n    }\n\n    const getStates = (state) => {\n        return eval(state);\n    }\n\n    const getStepContent = (step) => {\n        switch (step) {\n            case 0:\n                return <TokenAmount currency={currency} setCurrency={setCurrency} setStates={setStates}\n                                    getStates={getStates} currencyConversor={currencyConversor}/>;\n            case 1:\n                return <PaymentForm handleNext={handleNext}/>;\n            case 2:\n                return <AddressForm getStates={getStates}/>;\n            case 3:\n                return <Review getStates={getStates} uid={uid} handleNext={handleNext} email={email}/>;\n            default:\n                throw new Error('Unknown step');\n        }\n    }\n\n    const handleNext = (payment = false, paymentOption = \"\") => {\n        switch (activeStep) {\n            case 0:\n\n                if (allData.profileStatus === 4) {\n                    if (currencyType === \"USD\") {\n                        if (parseFloat(currency) >= 1) {\n                            if (parseFloat(currency) <= 999999) {\n                                setActiveStep(activeStep + 1);\n                            } else {\n                                swal(\"Cantidad muy grande\", \"El monto no debe ser mayor a $999,999.99\", \"warning\");\n                            }\n                        } else {\n                            swal(\"Monto inválido\", \"Debes pagar la mínima cantidad de $1 USD\", \"warning\");\n                        }\n                    } else if (currencyType === \"MX\") {\n                        if (parseFloat(currency) >= usdToMxn.toFixed(2)) {\n                            if (parseFloat(currency) <= 999999) {\n                                setActiveStep(activeStep + 1);\n                            } else {\n                                swal(\"Cantidad muy grande\", \"El monto no debe ser mayor a $999,999.99\", \"warning\");\n                            }\n                        } else {\n                            swal(\"Monto inválido\", `Debes pagar la mínima cantidad de $${usdToMxn.toFixed(2)} MXN`, \"warning\");\n                        }\n                    } else if (currencyType === \"SUN\") {\n                        if (parseFloat(currency) >= 1) {\n                            setActiveStep(activeStep + 1);\n                        } else {\n                            swal(\"Monto inválido\", \"Debes pagar la mínima cantidad de $1 USD\", \"warning\");\n                        }\n                    }\n                } else {\n\n                    if (currencyType === \"USD\") {\n                        if (parseFloat(currency) >= 1) {\n                            if (parseFloat(currency) <= 1000) {\n                                setActiveStep(activeStep + 1);\n                            } else {\n                                swal(\"Cantidad limitada\", \"Tu límite es de $1000 USD, si deseas incrementar tu límite de depósito debes ir a tu perfíl y verificar tu cuenta\", \"warning\");\n                            }\n                        } else {\n                            swal(\"Monto inválido\", \"Debes pagar la mínima cantidad de $1 USD\", \"warning\");\n                        }\n                    } else if (currencyType === \"MX\") {\n\n                        if (parseFloat(currency) >= usdToMxn.toFixed(2)) {\n                            if (parseFloat(currency) <= usdToMxn.toFixed(2) * 1000) {\n                                setActiveStep(activeStep + 1);\n                            } else {\n                                swal(\"Cantidad limitada\", `Tu límite es de $${usdToMxn.toFixed(2) * 1000} MXN, si deseas incrementar tu límite de depósito debes ir a tu perfíl y verificar tu cuenta`, \"warning\");\n                            }\n                        } else {\n                            swal(\"Monto inválido\", `Debes pagar la mínima cantidad de $${usdToMxn.toFixed(2)} MXN`, \"warning\");\n                        }\n                    } else if (currencyType === \"SUN\") {\n                        if (parseFloat(currency) >= 1) {\n                            setActiveStep(activeStep + 1);\n                        } else {\n                            swal(\"Monto inválido\", \"Debes pagar la mínima cantidad de $1 USD\", \"warning\");\n                        }\n                    }\n\n                }\n\n                break;\n            case 1:\n                if (paymentOption === \"card\") {\n                    setPaymentMethod(paymentOption);\n                    setActiveStep(activeStep + 1);\n                } else if (paymentOption === \"oxxo\") {\n                    if (currencyType === \"USD\") {\n                        swal(\"Pago con dolar inválido\", \"No puedes pagar en oxxo con dolar, tienes que cambiar la divisa a pesos mexicanos\", \"warning\");\n                    } else {\n                        setPaymentMethod(paymentOption);\n                        setActiveStep(activeStep + 1);\n                    }\n                }\n                break;\n            case 2:\n                if (name !== \"\" && lastname !== \"\" && address !== \"\" && city !== \"\" && stateLocation !== \"\" && country !== \"\") {\n                    setActiveStep(activeStep + 1);\n                }\n                break;\n            case 3:\n                if (payment) {\n                    setActiveStep(activeStep + 1);\n                }\n                break;\n        }\n    };\n\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n\n    const buyAgain = () => {\n        setActiveStep(0);\n        setCurrencyType('USD');\n        setPaymentMethod('');\n        setCurrency(null);\n        setLoading(false);\n        setPaymentID(\"\");\n        setPaymentDone(false);\n    }\n\n    return (\n        <div className=\"mt-0\">\n            <React.Fragment>\n                <CssBaseline/>\n                <main className={classes.layout}>\n                    <Paper className={classes.paper}>\n                        <Stepper activeStep={activeStep} className={classes.stepper}>\n                            {steps.map((label) => (\n                                <Step key={label}>\n                                    <StepLabel>{label}</StepLabel>\n                                </Step>\n                            ))}\n                        </Stepper>\n                        <React.Fragment>\n                            {activeStep === steps.length ? (\n                                <React.Fragment>\n                                    <Typography variant=\"h5\" gutterBottom>\n                                        {paymentMethod === \"card\" ? \"¡Gracias por tu compra!\" : \"¡Referencia de oxxo generada!\"}\n                                    </Typography>\n                                    <img src={DONE} className=\"img-fluid mb-3\" width=\"13%\" alt=\"PAGO REALIZADO\"/>\n                                    <Typography variant=\"subtitle1\">\n                                        {paymentMethod === \"card\" ? \"¡Gracias por tu compra, se verá reflejado en tu monto total y en tu cartera en aproximadamente 1 minito. Hemos enviado tu comprobante de pago al correo electrónico que registraste!\" : \"¡Tienes 24 hrs para realizar el pago en oxxo!\"}\n                                    </Typography>\n                                    <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={buyAgain}>\n                                        Comprar de nuevo\n                                    </Button>\n                                </React.Fragment>\n                            ) : (\n                                <React.Fragment>\n                                    {getStepContent(activeStep)}\n                                    <div className={classes.buttons}>\n                                        {activeStep !== 0 && (\n                                            <Button onClick={handleBack} className={classes.button}>\n                                                Atrás\n                                            </Button>\n                                        )}\n                                        {activeStep === steps.length - 1  ? null : (\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={handleNext}\n                                                className={classes.button}\n                                            >\n                                                Siguiente\n                                            </Button>\n                                        )\n                                        }\n                                    </div>\n                                </React.Fragment>\n                            )}\n                        </React.Fragment>\n                    </Paper>\n                </main>\n            </React.Fragment>\n        </div>\n\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        width: 'auto',\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(0),\n            padding: theme.spacing(3),\n        },\n    },\n    stepper: {\n        padding: theme.spacing(3, 0, 5),\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    button: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n    },\n}));","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/AddressForm.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/PaymentForm.jsx",["288"],"import React, {useState} from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport CREDIT from '../../../images/credit_card.png'\nimport OXXO from '../../../images/store.png';\nimport Link from '@material-ui/core/Link';\n\nexport default function PaymentForm({handleNext}) {\n\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom>\n                Método de pago\n            </Typography>\n\n            <Grid container spacing={5} className=\"mt-3\">\n\n                <Grid item xs={12} md={12}>\n\n                    <Link onClick={() => handleNext(false, \"card\")} style={{cursor: \"pointer\", textDecoration: \"none\"}}>\n                        <Paper elevation={5}>\n                            <img src={CREDIT} className=\"img-fluid\" width=\"10%\" alt=\"\"/>\n                            <Typography variant=\"h6\">Tarjeta crédito / débito</Typography>\n                        </Paper>\n                    </Link>\n\n                </Grid>\n\n                <Grid item xs={12} md={12}>\n                    <Link onClick={() => handleNext(false, \"oxxo\")} style={{cursor: \"pointer\", textDecoration: \"none\"}}>\n                        <Paper elevation={5}>\n                            <img src={OXXO} className=\"img-fluid\" width=\"10%\" alt=\"\"/>\n                            <Typography variant=\"h6\">Pago en oxxo</Typography>\n                        </Paper>\n                    </Link>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/Review.jsx",["289","290","291"],"import React, {useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport {loadStripe} from \"@stripe/stripe-js\";\nimport {CardElement, Elements, useElements, useStripe} from \"@stripe/react-stripe-js\";\nimport swal from \"sweetalert\";\nimport Button from '@material-ui/core/Button';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport SunshineFinder from \"../../../apis/SunshineFinder\";\nrequire('dotenv').config();\n\n\nconst stripePromise = loadStripe(process.env.REACT_APP_PK_STRIPE);\n\nconst CheckoutForm = ({getStates, uid, handleNext, email, currencyType}) => {\n    const classes = useStyles();\n    const stripe = useStripe();\n    const elements = useElements();\n    const [loading, setLoading] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [cardComplete, setCardComplete] = useState(false);\n    const [readyStripe, setReadyStripe] = useState(false);\n\n    const buyToken = async (e) => {\n        e.preventDefault();\n        if(cardComplete){\n            setLoading(true);\n            if (getStates(\"currency\") >= 1) {\n                setOpen(true);\n                const {error, paymentMethod} = await stripe.createPaymentMethod({\n                    type: 'card',\n                    card: elements.getElement(CardElement),\n                    billing_details: {\n                        email,\n                        name: getStates('name') + \" \" + getStates('lastname'),\n                        address: {\n                            state: getStates('stateLocation'),\n                            country: getStates('country'),\n                            city: getStates('city'),\n                            line1: getStates('address')\n                        }\n                    }\n                });\n\n                if (!error) {\n                    setLoading(true);\n                    const {id} = paymentMethod;\n                    try {\n                        const {data} = await SunshineFinder.post('/api/checkout', {\n                            id,\n                            amount: getStates(\"currency\") * 100,\n                            uid,\n                            currency: (currencyType.trim()===\"MX\" ? \"MXN\" : \"USD\"),\n                            exchange: {\n                                usdToMxn: getStates(\"usdToMxn\"),\n                                mxnToUsd: getStates(\"mxnToUsd\")\n                            }\n                        });\n                        if (data.codeResponse === 'succeeded') {\n                            handleNext(true);\n                        } else if (data.codeResponse.code === 'card_declined') {\n                            setOpen(false);\n                            handleNext(false);\n                            switch (data.codeResponse.decline_code) {\n                                case 'generic_decline':\n                                    swal(\"Tarjeta rechazada\", \"Comunicate con tu banco para resolver el problema o inténtalo más tarde\", \"warning\");\n                                    break;\n                                case 'insufficient_funds':\n                                    swal(\"Tarjeta rechazada\", \"Parece que tu tarjeta no tiene fondos suficientes\", \"warning\");\n                                    break;\n                                case 'lost_card':\n                                case 'stolen_card':\n                                    swal(\"Tarjeta rechazada\", \"Parece que tu tarjeta tiene reporte de robo, comunicate con tu banco para resolver el problema\", \"warning\");\n                                    break;\n                                case \"card_not_supported\":\n                                    swal(\"Tarjeta rechazada\", \"Tu tarjeta no es soportada. Por favor usa Visa o Mastercard\", \"warning\");\n                                    break;\n                                default:\n                                    swal(\"Tarjeta rechazada\", \"Ocurrió un error al procesar el pago con la tarjeta indicada, intenta con otra\", \"warning\");\n                                    break;\n                            }\n                        } else {\n                            setOpen(false);\n                            handleNext(false);\n                            switch (data.codeResponse.code) {\n                                case 'expired_card':\n                                    swal(\"Tarjeta expirada\", \"Parece que tu tarjeta expiró, comunicate con tu banco\", \"warning\");\n                                    break;\n                                case 'incorrect_cvc':\n                                    swal(\"CVC Incorrecto\", \"Revisa el código CVC de tu tarjeta e inténtalo de nuevo, de lo contrario, comunicate con tu banco\", \"warning\");\n                                    break;\n                                case 'incorrect_number':\n                                    swal(\"Datos incorrectos\", \"Verifica que los datos de tu tarjeta sean correctos, de ser así, comunicate con tu banco para resolver el problema\", \"warning\");\n                                    break;\n                                case 'amount_too_small':\n                                    swal(\"Monto muy pequeño\", \"El monto ingresado de compra es muy pequeño para poder ser procesado\", \"warning\");\n                                    break;\n                                case 'parameter_invalid_integer':\n                                    swal(\"Verifica el monto\", \"El monto debe tener centavos válidos\", \"warning\");\n                                    break;\n                                case 'amount_too_large':\n                                    swal(\"Cantidad muy grande\", \"El monto no debe ser mayor a $999,999.99\", \"warning\");\n                                    break;\n                            }\n                        }\n                    } catch (error) {\n                        setOpen(false);\n                        handleNext(false);\n                    }\n                    setLoading(false);\n                } else {\n                    swal(\"No se pudo procesar el pago\", \"Verifica que los datos que pusiste sean correctos o intenta de nuevo más tarde!\", \"error\");\n                }\n                setOpen(false);\n            } else {\n                setLoading(false);\n            }\n            setLoading(false);\n        }\n\n    }\n\n    const buyTokenWithOxxo = async () => {\n        setOpen(true);\n        try{\n            const {data} = await SunshineFinder.post('/create-payment-intent', {\n                id: \"holaoxxo\",\n                amount: getStates(\"currency\"),\n                uid,\n                email,\n                exchange: {\n                    usdToMxn: getStates(\"usdToMxn\"),\n                    mxnToUsd: getStates(\"mxnToUsd\")\n                }\n            });\n            \n            if(data.statusCode === \"successful\"){\n                stripe.confirmOxxoPayment(\n                    data.clientSecret,\n                    {\n                        payment_method: {\n                            billing_details: {\n                                name: getStates('name') + \" \" + getStates('lastname'),\n                                email,\n                                address: {\n                                    state: getStates('stateLocation'),\n                                    country: getStates('country'),\n                                    city: getStates('city'),\n                                    line1: getStates('address')\n                                }\n                            },\n                        },\n                    })// Stripe.js will open a modal to display the OXXO voucher to your customer\n                    .then(function(result) {\n                        // This promise resolves when the customer closes the modal\n\n                        if (result.error) {\n                            // Display error to your customer\n                        }\n                    });\n                handleNext(true);\n            } else if (data.statusCode === \"amount-exceeded\"){\n                swal(\"Monto inválido\", \"El monto máximo que puedes pagar en oxxo son de $10,000 MXN\", \"warning\");\n            }\n\n        } catch (e) {\n        }\n        setOpen(false);\n    }\n\n\n    return (\n        <div>\n            {\n                getStates(\"paymentMethod\") === \"card\" ? (\n                    <form onSubmit={buyToken}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <CardElement onReady={() => setReadyStripe(true)} onChange={e => setCardComplete(e.complete)} options={{\n                                    style: {\n                                        base: {\n                                            fontSize: '17px',\n                                            color: '#424770',\n                                            '::placeholder': {\n                                                color: '#aab7c4',\n                                            },\n                                        },\n                                        invalid: {\n                                            color: '#9e2146',\n                                        },\n                                    },\n                                }}/>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button disabled={!readyStripe} variant=\"contained\" size=\"large\" color=\"primary\" type=\"submit\">\n                                    {readyStripe ? \"COMPRAR TOKEN\" : \"CARGANDO...\"}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </form>\n                ) : (\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={buyTokenWithOxxo}>\n                                {open ? \"PROCESANDO...\" : \"GENERAR PAGO CON OXXO\"}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                )\n            }\n            <Backdrop className={classes.backdrop} open={open} >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </div>\n\n    );\n}\n\nexport default function Review({getStates, uid, handleNext, email}) {\n    const classes = useStyles();\n    const products = [\n        {name: 'Sun Token', desc: (getStates(\"currencyType\") === \"MX\" ? (getStates(\"currency\") * getStates(\"mxnToUsd\")).toFixed(6) : getStates(\"currency\")), price: getStates(\"currency\") + ' ' + (getStates(\"currencyType\") === \"MX\" ? \"MXN\" : \"USD\")},\n    ];\n    const addresses = [getStates(\"address\"), getStates(\"city\"), getStates(\"stateLocation\"), getStates(\"country\")];\n    const payments = [\n        {name: 'Método de pago', detail: 'Tarjeta débito/crédito'},\n    ];\n\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom>\n                Datos del pago\n            </Typography>\n\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Typography gutterBottom>{getStates(\"name\")} {getStates(\"lastname\")}</Typography>\n                    <Typography gutterBottom>{addresses.join(', ')}</Typography>\n                </Grid>\n            </Grid>\n\n            <List disablePadding>\n                {products.map((product) => (\n                    <ListItem className={classes.listItem} key={product.name}>\n                        <ListItemText primary={product.name} secondary={product.desc}/>\n                        <Typography variant=\"body2\">{product.price}</Typography>\n                    </ListItem>\n                ))}\n                <ListItem className={classes.listItem}>\n                    <ListItemText primary=\"Total\"/>\n                    <Typography variant=\"subtitle1\" className={classes.total}>\n                        {getStates(\"currency\")}\n                    </Typography>\n                </ListItem>\n            </List>\n            <Grid container spacing={2}>\n                <Grid item xs={12} className=\"mt-3 mb-3\">\n                    <Elements stripe={stripePromise}>\n                        <CheckoutForm getStates={getStates} uid={uid} handleNext={handleNext} email={email} currencyType={getStates(\"currencyType\")}/>\n                    </Elements>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    listItem: {\n        padding: theme.spacing(1, 0),\n    },\n    total: {\n        fontWeight: 700,\n    },\n    title: {\n        marginTop: theme.spacing(2),\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));","/home/snow/Documentos/ico-web-final/src/components/dashboard/checkout/TokenAmount.jsx",["292","293","294","295","296","297"],"import React, {useState, useEffect} from 'react';\nimport finalCoin from \"../../../images/monedafinal.png\";\nimport NumberFormat from 'react-number-format';\nimport TextField from '@material-ui/core/TextField';\n\nconst currencies = [\n    {\n        value: \"USD\",\n        label: \"USD\",\n    },\n    {\n        value: \"MX\",\n        label: \"MX\",\n    },\n    {\n        value: \"SUN\",\n        label: \"SUN\",\n    },\n];\n\nconst TokenAmount = ({currency, setCurrency, setStates, getStates, currencyConversor}) => {\n\n    useEffect(() => {\n        currencyConversor(\"USD\", \"MXN\");\n        currencyConversor(\"MXN\", \"USD\");\n    }, []);\n\n    const conversor = (type, amount = \"USD\") => {\n        switch (type) {\n            case \"USD\":\n                return `${amount || 0} USD - ${amount * 1 || 0} SUNI - ${(amount * getStates(\"usdToMxn\")).toFixed(2) || 0} MXN`;\n                break;\n\n            case \"SUN\":\n                return `${amount * 1 || 0} USD - ${amount || 0} SUNI - ${(amount * getStates(\"usdToMxn\")).toFixed(2) || 0} MXN`;\n                break;\n\n            case \"MX\":\n                return `${(amount * getStates(\"mxnToUsd\")).toFixed(6) || 0} USD - ${(amount * getStates(\"mxnToUsd\")).toFixed(6) || 0} SUN - ${amount || 0} MXN`;\n                break;\n            default:\n                return `${amount || 0} USD - ${amount * 1 || 0} SUNI - ${(amount * getStates(\"usdToMxn\").toFixed(2))} MXN`;\n        }\n    }\n\n    const typeCurrency = (val) => {\n        setCurrency(val);\n        let dollar = parseFloat(getStates(\"usdToMxn\").toFixed(2));\n        val = parseFloat(val);\n        if ( (val >= 1 && val<=999999 && getStates(\"currencyType\") === \"USD\") || (val >= dollar && val<=999999 && getStates(\"currencyType\") === \"MX\") || (val >= 1 && val<=999999 && getStates(\"currencyType\") === \"SUN\")) {\n            document.getElementById(\"inlineFormInputGroupCurrency\").classList.remove(\"is-invalid\");\n            document.getElementById(\"inlineFormInputGroupCurrency\").classList.add(\"is-valid\");\n        } else {\n            document.getElementById(\"inlineFormInputGroupCurrency\").classList.remove(\"is-valid\");\n            document.getElementById(\"inlineFormInputGroupCurrency\").classList.add(\"is-invalid\");\n        }\n    }\n\n    const handleChange = (event) => {\n        setStates(\"setCurrencyType\", event.target.value);\n    };\n\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <img src={finalCoin} style={{width: 150}} className=\"img-fluid\" alt=\"SUNSHINE COIN IMAGE\"/>\n                        <h5 className=\"currency-value-title font-weight-bold mt-3\">{conversor(getStates(\"currencyType\"), currency)}</h5>\n                    </div>\n                </div>\n\n                <div className=\"row mt-5\">\n                    <div className=\"col-12 col-md-3 mb-3 mb-md-0\">\n                        <TextField\n                            id=\"outlined-select-currency-native\"\n                            select\n                            value={getStates(\"currencyType\")}\n                            onChange={handleChange}\n                            SelectProps={{\n                                native: true,\n                            }}\n                            fullWidth\n                            helperText=\"Selecciona tu divisa\"\n                        >\n                            {currencies.map((option) => (\n                                <option key={option.value} value={option.value}>\n                                    {option.label}\n                                </option>\n                            ))}\n                        </TextField>\n                    </div>\n\n                    <div className=\"col-12 col-md-9\">\n                        <NumberFormat\n                            className=\"form-control\"\n                            id=\"inlineFormInputGroupCurrency\"\n                            name=\"input-name\"\n                            placeholder=\"Cantidad en dolares\"\n                            value={currency}\n                            thousandSeparator={getStates(\"currencyType\") !== \"SUN\"}\n                            onValueChange={(values) => typeCurrency(values.value)}\n                            prefix={getStates(\"currencyType\") === \"SUN\" ? '' : '$'}\n                        />\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\nexport default TokenAmount;","/home/snow/Documentos/ico-web-final/src/components/dashboard/PaymentComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/dashboard/Dashboard.jsx",["298","299","300","301"],"import React, {useState, useEffect} from 'react';\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\nimport moneda_dashboard from \"../../images/moneda-dashboard.svg\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DollarMarktComponent from \"../../components/dashboard/DollarMarktComponent\";\nimport PaymentComponent from \"../../components/dashboard/PaymentComponent\";\nimport {db} from \"../../config/firebase\";\nimport PurchaseHistoryComponent from \"../../components/dashboard/PurchaseHistoryComponent\";\nimport SunshineFinder from \"../../apis/SunshineFinder\";\n\nconst Dashboard = () => {\n    const {currentUser, logout} = useAuth();\n    const [signinEmail, setSigninEmail] = useState(\"\");\n    const [uid, setUid] = useState(\"\");\n    const [amount, setAmount] = useState(0);\n    const [logged, setLogged] = useState(false);\n    const [cryptoData, setCryptoData] = useState([{}]);\n    const [userInfo, setUserInfo] = useState({});\n    const history = useHistory();\n\n    const getUserData = async(id) => {\n        try{\n            let docRef = db.collection('credentials').doc(id);\n            await docRef.onSnapshot(doc => {\n                if(doc.exists){\n                    setUserInfo(doc.data());\n                    //setAmount(doc.data().suns);\n                }\n            });\n            await SunshineFinder.get(\"/get-tuah\", {\n                params: {\n                    uid: id\n                }\n            }).then(response => {\n                setAmount(response.data.amount);\n            }).catch(e => {\n\n            });\n        } catch (e) {\n\n        }\n    }\n\n    useEffect(() => {\n        try{\n            let email = currentUser.email;\n            let id = currentUser.uid;\n            setSigninEmail(email);\n            setUid(id);\n            setLogged(true);\n            history.push(\"/\");\n            getUserData(id);\n        } catch (e) {\n\n            setSigninEmail(\"\");\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    },[currentUser]);\n\n\n    const renderData = () => {\n        if(logged && Object.keys(userInfo).length !== 0){\n            return (\n                <div className=\"container-fluid\">\n                    <div className=\"row mt-5\">\n\n                        <div className=\"col-12 mt-5 d-flex justify-content-center\">\n                            <img src={moneda_dashboard} className=\"img-fluid\" style={{width: 400}} alt=\"MONEDA-SUNSHINE\"/>\n                        </div>\n\n                        <div className=\"col-12 d-flex justify-content-center\">\n                            <h1>\n                                {signinEmail ? (amount.toString().slice(0, amount.toString().length-6) + \".\" + amount.toString().slice(amount.toString().length-6)) : \"Invitado\"}\n                                <br/>SUNIS</h1>\n                        </div>\n\n                        <div className=\"col-12 d-flex justify-content-center mt-5\">\n                            <button className=\"material\" data-toggle=\"modal\" data-target=\"#exampleModal\">Mercado de criptos<ExpandMoreIcon style={{ fontSize: 40 }} /> </button>\n                        </div>\n\n                        <div className=\"col-12\">\n                            <button className=\"btn material2 ml-3 mr-3\" data-toggle=\"modal\" data-target=\"#paymentModal\" data-backdrop='static' data-keyboard='false'>Comprar</button>\n                            <a className=\"btn material2 ml-3 mr-3\" href=\"Wallet\">Wallet</a>\n                        </div>\n\n                        <DollarMarktComponent />\n                        <PaymentComponent email={signinEmail} userData={uid} allData={userInfo} />\n\n                    </div>\n\n                    <div className=\"row mt-5\">\n                        <PurchaseHistoryComponent uid={uid} />\n                    </div>\n\n                </div>\n\n            )\n        } else {\n            return null\n        }\n    }\n\n    return (\n        <div className=\"container-fluid fondo-dashboard\">\n            {renderData()}\n        </div>\n    )\n\n};\n\nexport default Dashboard;","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/HeaderCards.jsx",["302"],"import React from \"react\";\n\n// reactstrap components\nimport { Card, CardBody, CardTitle, Container, Row, Col } from \"reactstrap\";\nimport NumberFormat from \"react-number-format\";\n\nconst Header = ({tokensNumber}) => {\n    return (\n        <>\n            <div className=\"header pb-8 pt-5 pt-md-8\" style={{backgroundColor: \"#ffffff\"}}>\n                <Container fluid>\n                    <div className=\"header-body\">\n                        {/* Card stats */}\n                        <Row>\n                            <Col lg=\"12\" xl=\"12\">\n                                <Card className=\"card-stats mb-4 mb-xl-0 bg-gradient-default\">\n                                    <CardBody>\n                                        <Row>\n                                            <div className=\"col\">\n                                                <CardTitle\n                                                    tag=\"h6\"\n                                                    className=\"text-uppercase text-muted mb-0 text-light\"\n                                                >\n                                                    Número de SUN tokens\n                                                </CardTitle>\n                                                <span className=\"h5 font-weight-bold mb-0 text-light\">\n                                                     {tokensNumber.toString().slice(0, tokensNumber.toString().length-6) + \".\" + tokensNumber.toString().slice(tokensNumber.toString().length-6)}\n                                                </span>\n                                            </div>\n                                            <Col className=\"col-auto\">\n                                                <div className=\"icon icon-shape bg-yellow text-white rounded-circle shadow\">\n                                                    <i className=\"fas fa-users\" />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </div>\n                </Container>\n            </div>\n        </>\n    );\n};\n\nexport default Header;\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/CryptoList.jsx",["303"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Avatar from '@material-ui/core/Avatar';\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\n\n//Icons\nimport BTT from \"../../../images/cryptoicons/btt_icon.png\";\nimport TRX from \"../../../images/cryptoicons/trx_icon.png\";\nimport TUAH from \"../../../images/cryptoicons/tuah_icon.png\";\n\nconst columns = [\n    { id: 'icon', label: 'Icon', minWidth: 170 },\n    { id: 'name', label: 'Name', minWidth: 170 },\n    { id: 'abbr', label: 'ISO\\u00a0Code', minWidth: 100 },\n    {\n        id: 'value',\n        label: 'Size\\u00a0(km\\u00b2)',\n        minWidth: 170,\n        align: 'right',\n        format: (value) => value.toString().slice(0, value.toString().length-6) + \".\" + value.toString().slice(value.toString().length-6),\n    },\n];\n\nfunction createData(name, code, population, size) {\n    const density = population / size;\n    return { name, code, population, size, density };\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 600,\n    },\n    orange: {\n        color: theme.palette.getContrastText(deepOrange[500]),\n        backgroundColor: deepOrange[500],\n    },\n    purple: {\n        color: theme.palette.getContrastText(deepPurple[500]),\n        backgroundColor: deepPurple[500],\n    },\n    text: {\n        color: \"white\"\n    }\n}));\n\nexport default function CryptoList({tokensArray}) {\n    const classes = useStyles();\n\n\n    const tokensArrayExtra = {\n        \"0000000\": {icon: <Avatar className={classes.purple} src={TRX} />,name: \"TRON\", abbr: \"TRX\"},\n        \"1003948\": {icon: <Avatar src={TUAH} />, name: \"NOTUAH\", abbr: \"TUAH\"},\n        \"1002000\": {icon: <Avatar className={classes.purple} src={BTT} />,name: \"BitTorrent\", abbr: \"BTT\"},\n        \"1003475\": {icon: <Avatar className={classes.purple}>N</Avatar>,name: \"ToduDefi10\", abbr: \"TOFU10\"},\n    }\n\n    return (\n        <Paper className={'bg-gradient-default shadow w-100'}>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableBody>\n                        {tokensArray.map((row, index) => {\n                            return (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n                                    {columns.map((column) => {\n                                        const value1 = {...row, ...tokensArrayExtra[row.key]}\n                                        const value = value1[column.id];\n                                        return (\n                                            <TableCell className={classes.text} key={column.id} align={column.align}>\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n}\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/wallet/TransactionsHistory.jsx",["304","305","306","307","308","309"],"import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { useTheme } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport DONE from '../../../images/done.png';\nimport TronscanFinder from \"../../../apis/TronscanFinder\";\n\nconst columns = [\n    { id: 'hash', label: 'Hash', minWidth: 170 },\n    { id: 'amount', label: 'Monto', minWidth: 100, format: (value) => value.toString().slice(0, value.toString().length-6) + \".\" + value.toString().slice(value.toString().length-6) },\n    {\n        id: 'date',\n        label: 'Fecha/hora',\n        minWidth: 170,\n        align: 'right',\n        format: (value) => value,\n    },\n    {\n        id: 'block',\n        label: 'Bloque',\n        minWidth: 170,\n        align: 'right',\n    },\n    {\n        id: 'token',\n        label: 'Token',\n        minWidth: 170,\n        align: 'right',\n    },\n];\n\nfunction createData(hash, amount, date, block, token) {\n    return { hash, amount, date, block, token };\n}\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 440,\n    },\n});\n\nconst timeConverter = (UNIX_timestamp) => {\n    let a = new Date(UNIX_timestamp);\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    let year = a.getFullYear();\n    let month = months[a.getMonth()];\n    let date = a.getDate();\n    let hour = a.getHours();\n    let min = a.getMinutes();\n    let sec = a.getSeconds();\n    let time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n}\n\nconst formattedAmount = (amount= \"0\") => {\n    return amount.toString().slice(0, amount.toString().length-6) + \".\" + amount.toString().slice(amount.toString().length-6);\n}\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst  TransactionsHistory = ({address}) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [transactions, setTransactions] = useState([{}]);\n    const [allTransactions, setAllTransactions] = useState([{}]);\n\n    const[transactionDetails, setTransactionDetails] = useState({contractData: {}, tokenInfo: {}, });\n\n    const theme = useTheme();\n\n    useEffect(() => {\n        retrieveTransactions(address);\n    }, [address]);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const retrieveTransactions = async (walletAddress) => {\n        try{\n            const result = await TronscanFinder.get(`/api/transaction?sort=-timestamp&count=true&limit=50&start=0&address=${walletAddress}`);\n            //await setTransactions(result.data.data);\n            let data = result.data.data;\n            let row = [];\n            await data.map(value => {\n\n                row.push(createData(value.hash, value.toAddress === address ? value.contractData.amount : - value.contractData.amount, timeConverter(value.timestamp), value.toAddress === address ? <Chip label=\"RECIBIDO\" color=\"primary\" /> : <Chip label=\"ENVIADO\" color=\"secondary\" />, value.tokenInfo.tokenAbbr));\n            })\n            await setTransactions(row);\n\n            await setAllTransactions(data);\n\n        } catch (e) {\n\n        }\n    }\n\n    const onClickTransactionDetails = (hash) => {\n        let result = allTransactions.find(element => element.hash === hash);\n        setTransactionDetails(result);\n        handleClickOpen();\n    }\n\n\n    return (\n        <>\n            <Paper className={classes.root}>\n                <TableContainer className={classes.container}>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        align={column.align}\n                                        style={{ minWidth: column.minWidth }}\n                                    >\n                                        {column.label}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>      \n                        <TableBody>\n                            {transactions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n                                return (\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n                                        {columns.map((column) => {\n                                            const value = row[column.id];\n                                            return (\n                                                <TableCell key={column.id} align={column.align}>\n                                                    {column.id !== \"hash\" ? column.format && typeof value === 'number' ? column.format(value) : value : <a className=\"btn btn-link\" onClick={e => onClickTransactionDetails(e.target.innerText)}>{value}</a>}\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={transactions.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n\n            <Dialog\n                fullWidth={\"md\"}\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">Detalles</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        <div className=\"container-fluid\">\n\n\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <img src={DONE} className=\"img-fluid w-25 mb-4\" alt=\"\"/>\n                                </div>\n\n                                <strong>HASH:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p><a href={`https://tronscan.org/#/transaction/${transactionDetails.hash}`} target=\"_blank\">{transactionDetails.hash}</a> </p>\n                                </div>\n\n                                <strong>BLOQUE:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p><a href={`https://tronscan.org/#/block/${transactionDetails.block}`} target=\"_blank\">{transactionDetails.block}</a> </p>\n                                </div>\n\n                                <strong>EMISOR:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p>  {transactionDetails.contractData.owner_address}</p>\n                                </div>\n\n                                <strong>RECEPTOR:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p>   {transactionDetails.contractData.to_address}</p>\n                                </div>\n\n                                <strong>MONTO:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p> { formattedAmount(transactionDetails.contractData.amount) } <img src={transactionDetails.tokenInfo.tokenLogo} className=\"img-fluid\" style={{width: 20}} alt=\"\"/> ({transactionDetails.tokenInfo.tokenAbbr})</p>\n                                </div>\n\n                                <strong>FECHA:</strong>\n                                <div className=\"col-12 d-flex justify-content-start\">\n                                    <p>   {timeConverter(transactionDetails.timestamp)}</p>\n                                </div>\n\n                            </div>\n\n                        </div>\n\n\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </>\n\n    );\n}\n\nexport default TransactionsHistory;","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Wallet.jsx",["310","311","312","313","314","315","316","317","318","319"],"import React, {useEffect, useState} from \"react\";\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    Container,\n    Row,\n    Col,\n} from \"reactstrap\";\n\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\n//OWN IMPORTATIONS\nimport \"../../components/dashboard/css/nucleo.css\";\nimport \"../../components/dashboard/scss/argon-dashboard-react.scss\";\nimport \"../../components/dashboard/checkout/css/style.css\";\nimport HeaderCards from \"../../components/dashboard/wallet/HeaderCards\";\nimport CryptoList from \"../../components/dashboard/wallet/CryptoList\";\nimport TransactionsHistory from \"../../components/dashboard/wallet/TransactionsHistory\";\n\n//MATERIAL IMPORTS\nimport TextField from '@material-ui/core/TextField';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport CropFreeIcon from '@material-ui/icons/CropFree';\n\n//QR UTILITIES IMPORTATIONS\nimport QRCode from \"react-qr-code\";\nimport QrReader from 'react-qr-reader'\nimport {db} from \"../../config/firebase\";\nimport swal from \"sweetalert\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport SunshineFinder from \"../../apis/SunshineFinder\";\n\n\nconst Wallet = () => {\n\n    const {currentUser, logout} = useAuth();\n    const history = useHistory();\n    const [scannerOpen, setScannerOpen] = useState(false);\n    const [scanValue, setScanValue] = useState(\"\");\n    const [logged, setLogged] = useState(false);\n    const [uid, setUid] = useState(\"\");\n    const [amount, setAmount] = useState(0);\n    const [userInfo, setUserInfo] = useState({});\n    const [tokensToSend, setTokensToSend] = useState(0);\n    const [tokensArray, setTokensArray] = useState([{}]);\n    //ESTO TIENE QUE IR EN EL BACKEND, AHORITA ES PARA HACER PRUEBAS RÁPIDO\n    const [tokenAddress, setTokenAddress] = useState(\"\");\n    const [tokenPrivateKey, setTokenPrivateKey] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            let id = currentUser.uid;\n            setUid(id);\n            getUserData(id);\n            setLogged(true);\n            getData(id);\n        } catch (e) {\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    }, []);\n\n    const getUserData = async(id) => {\n        try{\n            let docRef = db.collection('credentials').doc(id);\n            await docRef.onSnapshot(doc => {\n                if(doc.exists){\n                    setUserInfo(doc.data());\n                    //setAmount(doc.data().suns);\n                }\n            });\n        } catch (e) {\n        }\n    }\n\n    const getData = async (id) => {\n        await SunshineFinder.get(\"/tron-data\", {\n            params: {\n                uid: id\n            }\n        }).then(response => {\n            setTokenAddress(response.data.tokenAddress);\n            if(response.data.tokensArray){\n                setTokensArray(response.data.tokensArray)\n                setAmount(response.data.tokensArray.find(element => element.key === \"1003948\").value);\n            }\n        }).catch(e => {\n        })\n    }\n\n    const clearFields = () => {\n        setTokensToSend(0);\n        setScanValue(\"\");\n    }\n\n    const sendTokens = async e => {\n        e.preventDefault();\n        setOpen(true);\n        try{\n            const response = await SunshineFinder.post(\"/send-tokens\", {\n                uid,\n                amount: convertForSend(tokensToSend),\n                toAddress: scanValue\n            });\n\n            if(response.data.sendTokenResponse === \"success\"){\n                swal(\"Tokens enviados\", `Se cobraron ${tokensToSend} TUAH de tu cuenta y se depositaron a la dirección ${tokenAddress}, puedes ver la transacción en tu historial`, \"success\");\n                getData(uid);\n                clearFields();\n            } else {\n                throw response.data.sendTokenResponse.toString();\n            }\n\n\n        } catch (e) {\n            switch (e.message || e){\n                case \"success\":\n                    swal(\"Tokens enviados\", `Se cobraron ${tokensToSend} TUAH de tu cuenta y se depositaron a la dirección ${tokenAddress}, puedes ver la transacción en tu historial`, \"success\");\n                    clearFields();\n                    break;\n                case \"without-tuah\":\n                    swal(\"No cuentas con TUAH\", \"Tu wallet no cuenta con ningun TUAH por lo que no puedes enviar el monto indicado\", \"warning\");\n                    break;\n                case \"BANDWITH_ERROR\":\n                    swal(\"Error de ancho de banda\", \"La wallet a la que le quieres mandar TUAH no tiene suficiente ancho de banda \", \"warning\");\n                    break;\n                case \"tuah-not-found\":\n                    swal(\"TUAHS insuficientes\", \"No cuentas con la cantidad de TUAH suficiente para enviar el monto indicado\", \"warning\");\n                    break;\n                case \"invalid-address\":\n                    swal(\"Dirección invalida\", \"La dirección a la que le quieres mandar TUAH no existe o no se encuentra disponible\", \"warning\");\n                    break;\n                case \"Invalid count value\":\n                    swal(\"Monto invalido\", \"El monto ingresado no es válido, ingresa un monto de tipo 0.000000\", \"warning\");\n                    break;\n                default:\n                    swal(\"Error inesperado\", \"Ocurrió un error inesperado, recarga la página o intenta de nuevo más tarde\", \"error\");\n            }\n        }\n        await setOpen(false);\n        //CONECTARSE CON /send-tokens EN BACKEND Y MANDAR uid, amount, toAddress\n    }\n\n    const ReadQR = ({setScanValue}) => {\n\n        const [value, setValue] = useState(\"\");\n        const [facing2, setFacing]=useState(\"near\");\n\n        const handleError = (e) => {\n        }\n\n        if(value){\n            setScanValue(value);\n            document.getElementById(\"closeScanner\").click();\n            return null;\n        } else {\n\n            return (\n                    <QrReader\n                        delay={1000}\n                        style={{width: 350}}\n                        onError={handleError}\n                        onScan={data => {\n                            if(data){\n                                setValue(data)\n                            }\n                        }}\n                        facingMode=\"environment\"\n                    />\n            )\n        }\n    }\n\n    const convertForSend = (number) => {\n        try{\n            if(number > 0){\n                if(number % 1 === 0){\n                    // es entero\n                    return parseInt(number + \"0\".repeat(6));\n                } else {\n                    // es decimal\n                    let positionPoint = number.toString().indexOf(\".\");\n                    return (number + \"0\".repeat(6 - (number.toString().substring(positionPoint+1).length))).replace(\".\", \"\");\n                }\n            } else {\n                return number;\n            }\n        } catch (e) {\n        }\n\n    }\n\n    const classes = useStyles();\n\n    const renderWallet = () => {\n        if(logged){\n            return(\n                <div className=\"mt-5 mt-md-0 bodyWallet\">\n                    <a href=\"#\" type=\"button\" id=\"openScanner\" data-toggle=\"modal\"\n                       data-target=\"#exampleModalCenter\" />\n\n                    <div className=\"modal fade\" id=\"exampleModalCenter\" tabIndex=\"-1\" role=\"dialog\"\n                         aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\" data-backdrop=\"static\"\n                         data-keyboard=\"false\">\n                        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div className=\"modal-header\">\n                                    <button type=\"button\" onClick={() => {setScannerOpen(false)}} id=\"closeScanner\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span className=\"text-dark\" aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                </div>\n                                <div className=\"qr-modal-body d-flex justify-content-center\">\n                                    {scannerOpen ? <ReadQR setScanValue={setScanValue} /> : null}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <HeaderCards tokensNumber={amount}/>\n                    {/* Page content */}\n                    <Container className=\"mt--7\" fluid>\n                        <Row className=\"d-flex justify-content-center\">\n                            <Col className=\"mb-5 mb-xl-0\" xl=\"7\">\n                                <Card className=\"bg-gradient-default shadow\">\n                                    <CardHeader className=\"bg-transparent\">\n                                        <Row className=\"align-items-center\">\n                                            <div className=\"col-12\">\n                                                <p className=\"text-uppercase text-light mb-0\">\n                                                    Spot wallet\n                                                </p>\n                                                <h6 className=\"text-white mb-3\">SUN</h6>\n                                            </div>\n                                            <div className=\"col-12\">\n                                                <div className=\"nav-wrapper\">\n                                                    <ul className=\"nav nav-pills nav-fill flex-column flex-md-row\"\n                                                        id=\"tabs-icons-text\" role=\"tablist\">\n                                                        <li className=\"nav-item\">\n                                                            <a className=\"nav-link mb-sm-3 mb-md-0 active\"\n                                                               id=\"tabs-icons-text-1-tab\" data-toggle=\"tab\"\n                                                               href=\"#tabs-icons-text-1\" role=\"tab\"\n                                                               aria-controls=\"tabs-icons-text-1\"\n                                                               aria-selected=\"true\">Recibir</a>\n                                                        </li>\n                                                        <li className=\"nav-item\">\n                                                            <a className=\"nav-link mb-sm-3 mb-md-0\" id=\"tabs-icons-text-2-tab\"\n                                                               data-toggle=\"tab\" href=\"#tabs-icons-text-2\" role=\"tab\"\n                                                               aria-controls=\"tabs-icons-text-2\"\n                                                               aria-selected=\"false\">Enviar</a>\n                                                        </li>\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </Row>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <div className=\"card-body\">\n                                            <div className=\"tab-content\" id=\"myTabContent\">\n                                                <div className=\"tab-pane fade show active\" id=\"tabs-icons-text-1\"\n                                                     role=\"tabpanel\" aria-labelledby=\"tabs-icons-text-1-tab\">\n                                                    <div className=\"col-12 d-flex justify-content-center\">\n                                                        <div style={{borderColor: \"white\", border: \"solid\", backgroundColor: \"white\", width: \"min-content\"}}>\n                                                            <QRCode value={tokenAddress} />\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"col-12 mt-5\">\n                                                        <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                                            Wallet address\n                                                        </h6>\n                                                        <p className=\"text-light\">{tokenAddress}</p>\n                                                    </div>\n                                                </div>\n                                                <div className=\"tab-pane fade\" id=\"tabs-icons-text-2\" role=\"tabpanel\"\n                                                     aria-labelledby=\"tabs-icons-text-2-tab\">\n                                                    <form onSubmit={sendTokens}>\n\n                                                        <div className=\"container px-md-5\">\n                                                            <div className=\"row px-md-5\">\n\n\n                                                                <div className=\"col-12 mb-4 px-md-5\">\n                                                                    <FormControl fullWidth style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\", borderRadius: 4}} variant=\"filled\">\n                                                                        <InputLabel htmlFor=\"filled-adornment-password\">Dirección de destino</InputLabel>\n                                                                        <FilledInput\n                                                                            id=\"filled-adornment-password\"\n                                                                            required\n                                                                            type={'text'}\n                                                                            value={scanValue}\n                                                                            onChange={e => setScanValue(e.target.value)}\n                                                                            endAdornment={\n                                                                                <InputAdornment position=\"end\">\n                                                                                    <IconButton\n                                                                                        aria-label=\"toggle password visibility\"\n                                                                                        onClick={() => {\n                                                                                            setScannerOpen(true);\n                                                                                            document.getElementById(\"openScanner\").click();\n                                                                                        }}\n                                                                                        edge=\"end\"\n                                                                                    >\n                                                                                        <CropFreeIcon />\n                                                                                    </IconButton>\n                                                                                </InputAdornment>\n                                                                            }\n                                                                        />\n                                                                    </FormControl>\n                                                                </div>\n\n                                                                <div className=\"col-12 mb-4 px-md-5\">\n\n                                                                    <TextField\n                                                                        fullWidth\n                                                                        required\n                                                                        id=\"filled-basic\"\n                                                                        label=\"Cantidad (SUN):\"\n                                                                        value={tokensToSend}\n                                                                        onChange={e => {\n                                                                            if(tokensToSend === 0){\n                                                                                setTokensToSend(null);\n                                                                            }\n                                                                            setTokensToSend(e.target.value);\n\n                                                                        }}\n                                                                        variant=\"filled\"\n                                                                        style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\", borderRadius: 4}}\n                                                                    />\n\n                                                                </div>\n                                                            </div>\n\n                                                            <div className=\"row mt-2 px-md-5\">\n\n                                                                <div className=\"col-12 px-md-5 d-flex justify-content-start\">\n                                                                    <p className=\"text-light\">SUNS a enviar: <strong>{tokensToSend}</strong></p>\n                                                                </div>\n\n                                                                <div className=\"col-12 px-md-5 d-flex justify-content-start\">\n                                                                    <p className=\"text-light\">SUNS restantes:\n                                                                        <strong className={amount - convertForSend(tokensToSend) < 0 ? \"text-danger\" : \"\"}>\n                                                                            {(amount - convertForSend(tokensToSend)).toString().slice(0, (amount - convertForSend(tokensToSend)).toString().length-6) + \".\" + (amount - convertForSend(tokensToSend)).toString().slice((amount - tokensToSend).toString().length-6)}\n                                                                        </strong>\n                                                                    </p>\n                                                                </div>\n\n                                                                <div className=\"col-12 px-md-5 d-flex justify-content-start\">\n                                                                    <p className=\"text-danger\"><strong>{amount - convertForSend(tokensToSend) < 0 ? \"No tienes suficientes TUAH para mandar\" : \"\"}</strong></p>\n                                                                </div>\n\n                                                                <div className=\"col-12 px-md-5\">\n                                                                    <Divider light style={{backgroundColor: \"#FFFFFF\"}} />\n                                                                </div>\n                                                            </div>\n\n                                                            <div className=\"row mt-5 px-md-5\">\n                                                                <div className=\"col-12 px-md-5\">\n                                                                    <Button fullWidth variant=\"contained\" size=\"large\" type=\"submit\" style={{backgroundColor: \"#0655af\", color: \"white\"}}>\n                                                                        ENVIAR\n                                                                    </Button>\n                                                                </div>\n                                                            </div>\n\n                                                        </div>\n                                                    </form>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                            <Col className=\"mb-5 mb-xl-0\" xl=\"5\">\n                                <CryptoList tokensArray={tokensArray} />\n                            </Col>\n                        </Row>\n\n                        <Row className=\"d-flex justify-content-center\">\n                            <Col className=\"mb-5 mb-xl-0\" xl=\"12\">\n                                <TransactionsHistory address={tokenAddress}/>\n                            </Col>\n                        </Row>\n                    </Container>\n                    <Backdrop className={classes.backdrop} open={open} >\n                        <CircularProgress color=\"inherit\" />\n                    </Backdrop>\n                </div>\n            )\n        } else {\n            return null;\n        }\n    }\n\n\n    return (\n        <>\n            {renderWallet()}\n        </>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default Wallet;\n","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Profile.jsx",["320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342"],"import 'date-fns';\nimport React, {useState, useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\nimport swal from \"sweetalert\";\nimport {db, useStorage} from \"../../config/firebase\";\nimport Alert from '@material-ui/lab/Alert';\nimport 'react-phone-input-2/lib/material.css'\nimport {Document, Page} from 'react-pdf';\nimport ExpansionComponent from \"../../components/dashboard/profile/ExpansionComponent\";\nimport PlacesFinder from \"../../apis/PlacesFinder\";\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Container,\n    Row,\n    Col,\n} from \"reactstrap\";\nimport UploadImage from \"../../components/dashboard/profile/UploadImage\";\nimport AVATAR from '../../images/avatardefault.png';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\n\nconst UserHeader = () => {\n    return (\n        <>\n            <div\n                className=\"header pb-8 pt-5 pt-lg-8 d-flex align-items-center\"\n                style={{\n                    minHeight: \"200px\",\n                    backgroundSize: \"cover\",\n                    backgroundPosition: \"center top\",\n                }}\n            >\n                {/* Mask */}\n                <span className=\"mask bg-gradient-default opacity-8\" />\n                {/* Header container */}\n            </div>\n        </>\n    );\n};\n\n\nconst Profile = () => {\n\n    const classes = useStyles();\n    const {currentUser, logout} = useAuth();\n    const [logged, setLogged] = useState(false);\n    const history = useHistory();\n    const [uid, setUid] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [lastname, setLastname] = useState(\"\");\n    const [birthday, setBirthday] = useState(\"\");\n    const [country, setCountry] = useState(\"\");\n    const [countryCompleteName, setCountryCompleteName] = useState(\"\");\n    const [stateLocation, setStateLocation] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [profileStatus, setProfileStatus] = useState(0);\n    const [doc, setDoc] = useState(\"\");\n    const [jalaPorfavor, setAuthToken] = useState(\"\");\n    const [countriesAPI, setCountriesAPI] = useState([]);\n    const [statesAPI, setStatesAPI] = useState([]);\n    const [citiesAPI, setCitiesAPI] = useState([]);\n    const [filePreview, setFilePreview] = useState([]);\n    const [fileFirestore, setFileFirestore] = useState(null);\n    const [uploadValue, setUploadValue] = useState(0);\n    const [fileObject, setFileObject] = useState(\"\");\n    const [profilePictureStatus, setProfilePictureStatus] = useState(0);\n    const [croppedImage, setCroppedImage] = useState(null);\n    const [image, setImage] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            let id = currentUser.uid;\n            if (!currentUser.emailVerified) {\n                setLogged(false);\n                logout();\n                history.push(\"/Home\");\n            } else {\n                setLogged(true);\n                history.push(\"/Profile\");\n                getUserData(id);\n                setUid(id);\n                getAuthTokenCountries().then(() => {\n                    getCountriesAPI();\n                });\n            }\n        } catch (e) {\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    }, [jalaPorfavor]);\n\n    const setFile = (e) => {\n        try {\n            const jpegImage = \"image/jpeg\";\n            const pngImage = \"image/png\";\n            const pdfDocument = \"application/pdf\";\n            const acceptedFiles = [jpegImage, pngImage, pdfDocument];\n            const maxSize = 5242880;\n\n            if (acceptedFiles.includes(e.type)) {\n                if (e.size <= maxSize) {\n                    switch (e.type) {\n                        case jpegImage:\n                        case pngImage:\n                            setFilePreview([URL.createObjectURL(e), \"image\"]);\n                            setFileObject(\"image\");\n\n                            setFileFirestore(e);\n                            break;\n\n                        case pdfDocument:\n                            setFilePreview([URL.createObjectURL(e), \"pdf\"]);\n                            setFileObject(\"pdf\");\n                            setFileFirestore(e);\n                            break;\n                    }\n                } else {\n                    swal(\"Archivo muy pesado\", \"Tu archivo excede el peso permitido, maximo 5 MB\", \"error\");\n                }\n\n            } else {\n                swal(\"Archivo no válido\", \"Solo puedes subir un formato imagen o pdf\", \"error\");\n            }\n        } catch (e) {\n\n        }\n    }\n\n    const showFile = () => {\n\n        if ((profileStatus === 1 || profileStatus === 2 || profileStatus === 5 || profileStatus === 7)) {\n            if (filePreview[1] === \"image\") {\n                return (\n                    <div className=\"row d-flex justify-content-center\">\n                        <div className=\"col-12 col-sm-12 col-xl-6 w-25 h-25\">\n                            <img src={filePreview[0]} className=\"img-fluid\" alt=\"\"/>\n                        </div>\n                    </div>\n\n                )\n            } else if (filePreview[1] === \"pdf\") {\n                return (\n                    <div className=\"row d-flex justify-content-center\">\n                        <div className=\"col-12 col-sm-12 col-xl-6 w-25 h-25\">\n                            <Document file={filePreview[0]}>\n                                <Page pageNumber={1}/>\n                            </Document>\n                        </div>\n                    </div>\n\n                )\n            } else {\n                return null;\n            }\n        } else {\n            if (fileObject === \"image\") {\n                return (\n                    <div className=\"row d-flex justify-content-center\">\n                        <div className=\"col-12 col-sm-12 col-xl-6 w-25 h-25\">\n                            <img src={doc} className=\"img-fluid\" alt=\"\"/>\n                        </div>\n                    </div>\n\n                )\n            } else if (fileObject === \"pdf\") {\n                return (\n                    <div className=\"row d-flex justify-content-center\">\n                        <div className=\"col-12 col-sm-12 col-xl-6 w-25 h-25\">\n                            <iframe\n                                src={doc}\n                                frameBorder=\"0\" width=\"100%\" height=\"300\"></iframe>\n                        </div>\n                    </div>\n\n                )\n            } else {\n                return null;\n            }\n\n        }\n\n\n    }\n\n    const getUserData = async (id) => {\n        try {\n            let docRef = db.collection('credentials').doc(id);\n            await docRef.onSnapshot(doc => {\n                if (doc.exists) {\n                    setName(doc.data().name);\n                    setLastname(doc.data().lastname);\n                    setBirthday(timeConverter(doc.data().birthday.seconds));\n                    setCountry(doc.data().country);\n                    setStateLocation(doc.data().state);\n                    setCity(doc.data().city);\n                    setPhone(doc.data().phone);\n                    setAddress(doc.data().address);\n                    setProfileStatus(doc.data().profileStatus);\n                    setDoc(doc.data().doc);\n                    setFileObject(doc.data().fileType);\n                    setProfilePictureStatus(doc.data().profilePictureStatus);\n                    setCroppedImage(doc.data().profilePicture)\n                    getStatesAPI(doc.data().countryComplete);\n                    setCountryCompleteName(doc.data().countryComplete);\n                }\n            });\n\n        } catch (e) {\n\n        }\n\n    }\n\n    const getAuthTokenCountries = async () => {\n        try {\n            const response = await PlacesFinder.get(\"/api/getaccesstoken\", {\n                headers: {\n                    \"api-token\": \"8X4CFJBt--Ev5K8GkL_R9Z2lNS72XQ9ez_NutQRcq4bannc96Q4-YGjDq4IKqlDSFas\",\n                    \"user-email\": \"taikus.jango@sunshine-imagine.io\"\n                }\n            });\n            await setAuthToken(\"Bearer \" + response.data.auth_token);\n        } catch (e) {\n\n        }\n    }\n\n    const getCountriesAPI = async () => {\n        try {\n            const response = await PlacesFinder.get(\"/api/countries/\", {\n                headers: {\n                    Authorization: jalaPorfavor\n                }\n            });\n            setCountriesAPI(response.data);\n        } catch (e) {\n\n        }\n    }\n\n    const getStatesAPI = async (countryAPI) => {\n        try {\n            const response = await PlacesFinder.get(`/api/states/${countryAPI}`, {\n                headers: {\n                    Authorization: jalaPorfavor\n                }\n            });\n            setStatesAPI(response.data);\n        } catch (e) {\n\n        }\n    }\n\n    const timeConverter = (UNIX_timestamp) => {\n        let a = new Date(UNIX_timestamp * 1000);\n        let year = a.getFullYear();\n        let month = a.getMonth() + 1;\n        let date = a.getDate().toString().length === 1 ? \"0\" + a.getDate().toString() : a.getDate();\n        let time = month + '/' + date + '/' + year;\n        return new Date(time);\n    }\n\n    const getStates = stateValueRequired => {\n        return eval(stateValueRequired);\n    }\n\n    const setStates = (stateRequired, value) => {\n        eval(stateRequired)(value);\n    }\n\n    const uploadProfilePicture = () => {\n        swal({\n            title: \"¿Estas seguro de subir esa foto?\",\n            text: \"Una vez enviada la foto no se podrá modificar, asegúrate de que cumpla los requisitos antes mencionados\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        })\n            .then((willConfirm) => {\n                if (willConfirm) {\n                    setOpen(true);\n                    const storageRef = useStorage.ref(`credentials/profilePictures-${uid}`);\n                    const task = storageRef.put(image);\n                    task.on('state_changed', snapshot => {\n                        let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                        setStates(\"setUploadValue\", percentage);\n                    }, error => {\n\n                    }, () => {\n                        storageRef.getDownloadURL().then(url => {\n                            db.collection('credentials').doc(uid).update({\n                                profilePicture: url,\n                                profilePictureStatus: 1\n                            }).then(() => {\n                                setOpen(false);\n                                swal(\"La foto de tu perfil ha sido actualizada con éxito\", \"\", \"success\");\n                            });\n                        })\n                    });\n                }\n            });\n    }\n\n    const getAge = (birthDateString) => {\n        let today = new Date();\n        let birthDate = new Date(birthDateString);\n        let age = today.getFullYear() - birthDate.getFullYear();\n        let m = today.getMonth() - birthDate.getMonth();\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n            age--;\n        }\n        return age;\n    }\n\n    return (\n        <div className=\"pb-5 contenedor-profile\">\n            <UserHeader />\n            {/* Page content */}\n            <Container className=\"mt-3 mt--7 mb-5\" fluid>\n                <Row>\n                    <Col className=\"order-xl-2 mb-5 mb-xl-0\" xl=\"4\">\n                        <Card className=\"card-profile shadow mt-5 mt-lg-0\">\n                            <Row className=\"justify-content-center\">\n                                <Col className=\"order-lg-2\" lg=\"3\">\n                                    <div className=\"card-profile-image\">\n                                        <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                                            <img\n                                                alt=\"...\"\n                                                className=\"rounded-circle\"\n                                                src={croppedImage || AVATAR}\n                                            />\n                                        </a>\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <CardBody className=\"pt-5 pt-md-0 mt-5 pb-5\">\n                                <Row>\n                                    <div className=\"col\">\n                                        <div className=\"card-profile-stats d-flex justify-content-center mt-md-5\">\n                                            {\n                                                profilePictureStatus === 0 ? (\n                                                    <UploadImage uploadProfilePicture={uploadProfilePicture} getStates={getStates} setStates={setStates}\n                                                                 profilePictureStatus={profilePictureStatus}/>) : null\n                                            }\n                                        </div>\n                                    </div>\n                                    <Backdrop className={classes.backdrop} open={open} >\n                                        <CircularProgress color=\"inherit\" />\n                                    </Backdrop>\n                                </Row>\n                                <div className=\"text-center text-dark mt-3\">\n                                    <h3>\n                                        {name} {lastname}\n                                        <span className=\"font-weight-light\"></span>\n                                    </h3>\n                                    <div className=\"h5 font-weight-400 mt-3\">\n                                        <i className=\"ni location_pin mr-2\" />\n                                        {getAge(birthday) ? `${getAge(birthday)} años` : '00 años'}\n                                    </div>\n                                    <div className=\"h5 font-weight-300\">\n                                        <i className=\"ni location_pin mr-2\" />\n                                        +{phone || '0000000000'}\n                                    </div>\n\n                                    <div className=\"h5 mt-4\">\n                                        <i className=\"ni business_briefcase-24 mr-2\" />\n                                        {city || 'Ciudad'}, {stateLocation || 'Estado'}, {countryCompleteName || 'País'}\n                                    </div>\n                                    <div>\n                                        <i className=\"ni education_hat mr-2\" />\n                                        {address || 'Dirección'}\n                                    </div>\n                                    <hr className=\"my-4\" />\n\n                                    <div className={classes.alert}>\n                                        {profileStatus === 3 ?\n                                            <Alert variant=\"filled\" severity=\"warning\">En espera de verificación — Se están\n                                                validando tus datos</Alert> : null}\n                                        {profileStatus === 4 ?\n                                            <Alert variant=\"filled\" severity=\"success\">Cuenta verificada</Alert> : null}\n                                        {profileStatus === 5 ?\n                                            <Alert variant=\"filled\" severity=\"error\">Cuenta no verificada — Verifica tu identificación oficial únicamente</Alert> : null}\n                                        {profileStatus === 6 ?\n                                            <Alert variant=\"filled\" severity=\"error\">Cuenta no verificada — Verifica tus datos personales únicamente</Alert> : null}\n                                        {profileStatus === 7 ?\n                                            <Alert variant=\"filled\" severity=\"error\">Cuenta no verificada — Verifica todos tus datos</Alert> : null}\n                                    </div>\n                                </div>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col className=\"order-xl-1\" xl=\"8\">\n                        <Card className=\"bg-secondary shadow\">\n                            <ExpansionComponent getStates={getStates} setStates={setStates} uid={uid} showFile={showFile} setFile={setFile} profilePictureStatus={profilePictureStatus}/>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 300,\n        paddingBottom: 20,\n        marginTop: 20,\n        marginBottom: 20\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        marginTop: 20,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    cardActions: {},\n    large: {\n        width: theme.spacing(25),\n        height: theme.spacing(25),\n    },\n    formControl: {\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    alert: {\n        marginTop: 50,\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(3),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default Profile;\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/ExpansionComponent.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/UploadImage.jsx",["343","344"],"import React, {useState, useCallback, useEffect} from 'react'\nimport Cropper from 'react-easy-crop'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport {getCroppedImg} from '../js/canvasUtils'\nimport {makeStyles} from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\n\nconst UploadImage = ({ uploadProfilePicture, getStates, setStates, profilePictureStatus}) => {\n    const classes = useStyles();\n    const [imageSrc, setImageSrc] = useState(null);\n    const [crop, setCrop] = useState({x: 0, y: 0});\n    const [rotation, setRotation] = useState(0);\n    const [zoom, setZoom] = useState(1);\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n    const [hideButton, setHideButton] = useState(true);\n\n    useEffect(() => {\n        setHideButton(!(profilePictureStatus === 0));\n    }, []);\n\n\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n        setCroppedAreaPixels(croppedAreaPixels);\n    }, []);\n\n    const showCroppedImage = useCallback(async () => {\n        try {\n            const croppedImage = await getCroppedImg(\n                imageSrc,\n                croppedAreaPixels,\n                rotation\n            )\n            setStates(\"setCroppedImage\", URL.createObjectURL(croppedImage))\n            setStates(\"setImage\", croppedImage);\n        } catch (e) {\n            console.error(e);\n        }\n    }, [imageSrc, croppedAreaPixels, rotation]);\n\n    const onFileChange = async (e) => {\n        if (e.target.files && e.target.files.length > 0) {\n            const file = e.target.files[0];\n            let imageDataUrl = await readFile(file);\n            setImageSrc(imageDataUrl);\n        }\n    }\n\n    const choiceImage = () => {\n        if (!imageSrc) {\n            document.getElementById(\"choiceImage\").click();\n        }\n    }\n\n    return (\n        <div>\n\n            {\n                profilePictureStatus === 0 ? (\n                    <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                        <Button disabled={hideButton} variant=\"contained\" color=\"primary\" component=\"span\" data-toggle=\"modal\"\n                                data-target=\"#uploadImage\"\n                                data-backdrop='static' data-keyboard='false' onClick={!hideButton ? choiceImage : null}>\n                            Elegir foto\n                        </Button>\n                        {getStates(\"croppedImage\" && getStates(\"image\")) ? (<Button onClick={uploadProfilePicture}>Subir foto</Button>) : null}\n                    </ButtonGroup>\n                ) : null\n            }\n\n            <div className=\"modal fade\" id=\"uploadImage\" tabIndex=\"-1\" role=\"dialog\"\n                 aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n                    <div className=\"modal-content py-0\">\n\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title-dashboard\" id=\"exampleModalLabel\">Adapta tu imagen</h5>\n                            <button type=\"button\" className=\"close-modal\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n\n                        <div className=\"modal-body\">\n                            <React.Fragment>\n                                <div className={classes.cropContainer}>\n                                    <Cropper\n                                        image={imageSrc}\n                                        crop={crop}\n                                        rotation={rotation}\n                                        zoom={zoom}\n                                        aspect={4 / 4}\n                                        onCropChange={setCrop}\n                                        onRotationChange={setRotation}\n                                        onCropComplete={onCropComplete}\n                                        onZoomChange={setZoom}\n                                    />\n                                </div>\n                                <div className={classes.controls}>\n                                    <div className={classes.sliderContainer}>\n                                        <Typography\n                                            variant=\"overline\"\n                                            classes={{root: classes.sliderLabel}}\n                                        >\n                                            Zoom\n                                        </Typography>\n                                        <Slider\n                                            value={zoom}\n                                            min={1}\n                                            max={3}\n                                            step={0.1}\n                                            aria-labelledby=\"Zoom\"\n                                            classes={{root: classes.slider}}\n                                            onChange={(e, zoom) => setZoom(zoom)}\n                                        />\n                                    </div>\n                                    <Button\n                                        onClick={showCroppedImage}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        classes={{root: classes.cropButton}}\n                                        data-dismiss=\"modal\" aria-label=\"Close\"\n                                    >\n                                        Finalizar\n                                    </Button>\n                                </div>\n                                <input type=\"file\" hidden id=\"choiceImage\" onChange={onFileChange} accept=\"image/*\"/>\n                                <label htmlFor=\"choiceImage\">\n                                    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                        <PhotoCamera/>\n                                    </IconButton>\n                                </label>\n                            </React.Fragment>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst readFile = file => {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => resolve(reader.result), false);\n        reader.readAsDataURL(file);\n    });\n}\n\nconst useStyles = makeStyles((theme) => ({\n    cropContainer: {\n        position: 'relative',\n        width: '100%',\n        height: 200,\n        background: '#333',\n        [theme.breakpoints.up('sm')]: {\n            height: 400,\n        },\n    },\n    cropButton: {\n        flexShrink: 0,\n        marginLeft: 16,\n    },\n    controls: {\n        padding: 16,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'stretch',\n        [theme.breakpoints.up('sm')]: {\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n    },\n    sliderContainer: {\n        display: 'flex',\n        flex: '1',\n        alignItems: 'center',\n    },\n    sliderLabel: {\n        [theme.breakpoints.down('xs')]: {\n            minWidth: 65,\n        },\n    },\n    slider: {\n        padding: '22px 0px',\n        marginLeft: 16,\n        [theme.breakpoints.up('sm')]: {\n            flexDirection: 'row',\n            alignItems: 'center',\n            margin: '0 16px',\n        },\n    },\n}))\n\n\nexport default UploadImage;\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/PersonalData.jsx",["345","346","347","348"],"import 'date-fns';\nimport React, {useEffect, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Button, TextField, Avatar} from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {KeyboardDatePicker, MuiPickersUtilsProvider} from '@material-ui/pickers';\nimport SaveIcon from '@material-ui/icons/Save';\nimport swal from \"sweetalert\";\nimport {db, useStorage} from \"../../../config/firebase\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport PhoneInput from 'react-phone-input-2';\nimport UploadImage from \"./UploadImage\";\nimport 'react-phone-input-2/lib/material.css'\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\n\nconst PersonalData = ({getStates, setStates, uid, profilePictureStatus}) => {\n\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const masterCondition = getStates(\"profileStatus\") === 0 || getStates(\"profileStatus\") === 6 || getStates(\"profileStatus\") === 7;\n\n    const getAge = (birthDateString) => {\n        let today = new Date();\n        let birthDate = new Date(birthDateString);\n        let age = today.getFullYear() - birthDate.getFullYear();\n        let m = today.getMonth() - birthDate.getMonth();\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n            age--;\n        }\n        return age;\n    }\n\n    const handleDateChange = (date) => {\n        setStates(\"setBirthday\", date);\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            if (masterCondition) {\n                if (getStates(\"name\") !== \"\" && getStates(\"lastname\") !== \"\" && getStates(\"birthday\") !== \"\" && getStates(\"country\") !== \"\" && getStates(\"stateLocation\") !== \"\" && getStates(\"city\") !== \"\" && getStates(\"phone\") !== \"\" && getStates(\"address\") !== \"\") {\n                    if (getAge(getStates(\"birthday\")) >= 18) {\n                        swal({\n                            title: \"¿Estas seguro de subir la información?\",\n                            text: \"Una vez enviada la información no se podrá modificar\",\n                            icon: \"warning\",\n                            buttons: true,\n                            dangerMode: true,\n                        })\n                            .then((willConfirm) => {\n                                if (willConfirm) {\n                                    setOpen(true);\n                                    db.collection('credentials').doc(uid).update({\n                                        birthday: getStates(\"birthday\"),\n                                        city: getStates(\"city\"),\n                                        country: getStates(\"country\"),\n                                        lastname: getStates(\"lastname\"),\n                                        name: getStates(\"name\"),\n                                        phone: getStates(\"phone\"),\n                                        state: getStates(\"stateLocation\"),\n                                        countryComplete: getStates(\"countryCompleteName\"),\n                                        address: getStates(\"address\"),\n                                        profileStatus: 1,\n                                    }).then(() => {\n                                        swal(\"Información actualizada\", \"¡La información de tu perfil ha sido actualizada con éxito!\", \"success\");\n                                        setOpen(false);\n                                    });\n                                }\n                            });\n\n                    } else {\n                        swal(\"Debes ser mayor de edad\", \"Para poder continuar con la verificación de tus datos debes contar con la mayoria de edad\", \"warning\");\n                    }\n\n                } else {\n                    swal(\"Información incompleta\", \"Llena todos los campos correspondientes para poder continuar\", \"warning\");\n                }\n\n            }\n\n        } catch (e) {\n        }\n    }\n\n    return (\n        <div>\n\n            <Typography className={classes.title} variant=\"h4\" component=\"h4\">\n                Datos personales\n            </Typography>\n            <form className={classes.root}\n                  id={(masterCondition) ? \"profileform\" : \"\"}\n                  onSubmit={(masterCondition) ? handleSubmit : () => false}>\n                <Typography className={classes.title} variant=\"subtitle2\" component=\"h2\"\n                            color=\"textSecondary\">\n                    Verifica que tus datos y foto coincidan con tu identificación oficial\n                </Typography>\n                <div className=\"row mt-3\">\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <TextField variant=\"outlined\" required\n                                   disabled={!(masterCondition)}\n                                   fullWidth id=\"outlined-basic\" label=\"Nombre(s)\"\n                                   style={{alignContent: \"center\"}} value={getStates(\"name\")}\n                                   onChange={(masterCondition) ? e => setStates(\"setName\", e.target.value) : () => false}/>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <TextField variant=\"outlined\" required\n                                   disabled={!(masterCondition)}\n                                   fullWidth id=\"outlined-basic\" label=\"Apellido(s)\" value={getStates(\"lastname\")}\n                                   onChange={(masterCondition) ? e => setStates(\"setLastname\", e.target.value) : () => false}/>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                            <KeyboardDatePicker\n                                inputVariant=\"outlined\"\n                                required\n                                id=\"date-picker-dialog\"\n                                disabled={!(masterCondition)}\n                                fullWidth\n                                label=\"Fecha nacimiento\"\n                                format=\"dd/MM/yyyy\"\n                                value={getStates(\"birthday\") ? getStates(\"birthday\") : null}\n                                onChange={(masterCondition) ? handleDateChange : () => false}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}\n                            />\n                        </MuiPickersUtilsProvider>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <FormControl variant=\"outlined\" fullWidth className={classes.formControl}>\n                            {\n                                (masterCondition) ? (\n                                    <>\n                                        <InputLabel id=\"demo-simple-select-label\">País</InputLabel>\n                                        <Select\n                                            required\n                                            disabled={!(masterCondition)}\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select\"\n                                            value={(masterCondition) ? getStates(\"country\") : false}\n                                            onChange={\n                                                (masterCondition) ?\n                                                    e => {\n                                                        setStates(\"setCountry\", e.target.value)\n                                                        setStates(\"setStateLocation\", \"\")\n                                                        setStates(\"setCity\", \"\")\n                                                        setStates(\"getStatesAPI\", e.currentTarget.id)\n                                                        setStates(\"setCountryCompleteName\", e.currentTarget.id)\n                                                    } : () => false}>\n                                            {\n                                                getStates(\"countriesAPI\").map((value, index) => (\n                                                    <MenuItem key={index} id={value.country_name}\n                                                              value={value.country_short_name}>{value.country_name}</MenuItem>\n                                                ))\n                                            }\n                                        </Select>\n                                    </>\n                                ) : (\n                                    <TextField variant=\"outlined\" required\n                                               disabled={!(masterCondition)}\n                                               fullWidth id=\"outlined-basic\" label=\"País\" value={getStates(\"country\")}\n                                    />\n                                )\n                            }\n\n                        </FormControl>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <FormControl variant=\"outlined\" fullWidth className={classes.formControl}>\n\n                            {\n                                (masterCondition) ? (\n                                    <>\n                                        <InputLabel id=\"demo-simple-select-label\">Estado</InputLabel>\n                                        <Select\n                                            required\n                                            disabled={!(masterCondition)}\n                                            labelId=\"demo-simple-select-label\"\n                                            id=\"demo-simple-select-state\"\n                                            value={(masterCondition) ? getStates(\"stateLocation\") : false}\n                                            onChange={\n                                                (masterCondition) ?\n                                                    e => {\n                                                        setStates(\"setStateLocation\", e.target.value)\n                                                        setStates(\"setCity\", \"\")\n                                                    } : () => false}>\n                                            {\n                                                getStates(\"statesAPI\").map((value, index) => (\n                                                    <MenuItem key={index}\n                                                              value={value.state_name}>{value.state_name}</MenuItem>\n                                                ))\n                                            }\n                                        </Select>\n                                    </>\n                                ) : (\n                                    <TextField variant=\"outlined\" required\n                                               disabled={!(masterCondition)}\n                                               fullWidth id=\"outlined-basic\" label=\"Estado\"\n                                               value={getStates(\"stateLocation\")}\n                                    />\n                                )\n                            }\n\n                        </FormControl>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        <TextField variant=\"outlined\" required\n                                   disabled={!(masterCondition)}\n                                   fullWidth id=\"outlined-basic\" label=\"Ciudad\" value={getStates(\"city\")}\n                                   onChange={(masterCondition) ? e => setStates(\"setCity\", e.target.value) : () => false}/>\n                    </div>\n\n                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 px-5 mt-5\">\n                        {!(masterCondition) ?\n                            <TextField required variant=\"outlined\"\n                                       disabled={!(masterCondition)}\n                                       fullWidth id=\"outlined-basic\" label=\"Número telefonico\"\n                                       value={\"+\" + getStates(\"phone\")}\n                                       onChange={(masterCondition) ? e => setStates(\"setPhone\", e.target.value) : () => false}/> :\n                            <PhoneInput\n                                disabled={!(masterCondition)}\n                                country={'mx'}\n                                inputStyle={{height: 56, width: \"100%\"}}\n                                value={getStates(\"phone\")}\n                                onChange={(masterCondition) ? e => setStates(\"setPhone\", e) : () => false}\n                            />}\n\n                    </div>\n\n                    <div className=\"row mt-5 mb-5 px-5 mt-5\">\n                        <div className=\"col-12\">\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                disabled={!(masterCondition)}\n                                fullWidth\n                                id=\"standard-multiline-static\"\n                                label=\"Dirección\"\n                                multiline\n                                rows={4}\n                                value={getStates(\"address\")}\n                                onChange={(masterCondition) ? e => setStates(\"setAddress\", e.target.value) : () => false}\n                            />\n                        </div>\n                    </div>\n\n\n                </div>\n\n\n                <div className=\"row\">\n                    <div className=\"col-12 d-flex justify-content-center\">\n                        <Button\n                            disabled={!(masterCondition)}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"large\"\n                            className={classes.button}\n                            startIcon={<SaveIcon/>}\n                            type={(masterCondition) ? \"submit\" : \"button\"}\n                        >\n                            Enviar\n                        </Button>\n                    </div>\n                </div>\n            </form>\n            <Backdrop className={classes.backdrop} open={open} >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </div>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 300,\n        paddingBottom: 20,\n        marginTop: 20,\n        marginBottom: 20\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        marginTop: 20,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    cardActions: {},\n    large: {\n        width: theme.spacing(25),\n        height: theme.spacing(25),\n        marginBottom: 10\n    },\n    formControl: {\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    alert: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default PersonalData;","/home/snow/Documentos/ico-web-final/src/components/dashboard/profile/VerifiedProfile.jsx",["349"],"import React, {useState} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport Camaraine from \"../../../images/camaraine.svg\";\nimport Pdfine from \"../../../images/pdfine.svg\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport swal from \"sweetalert\";\nimport {db, useStorage} from \"../../../config/firebase\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {encryptData} from \"../js/encrypt\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\n\nconst VerifiedProfile = ({getStates, setStates, uid, showFile, setFile}) => {\n\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const masterCondition = getStates(\"profileStatus\") === 1 || getStates(\"profileStatus\") === 2 || getStates(\"profileStatus\") === 5 || getStates(\"profileStatus\") === 7;\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n\n            if (masterCondition) {\n                if (getStates(\"address\") !== \"\") {\n                    if (getStates(\"fileFirestore\") !== null) {\n                        swal({\n                            title: \"¿Estas seguro de subir la información?\",\n                            text: \"Una vez enviada la información no se podrá modificar\",\n                            icon: \"warning\",\n                            buttons: true,\n                            dangerMode: true,\n                        })\n                            .then((willDelete) => {\n                                if (willDelete) {\n                                    setOpen(true);\n                                    const storageRef = useStorage.ref(`id/${encryptData(uid)}`);\n                                    const task = storageRef.put(getStates(\"fileFirestore\"));\n                                    task.on('state_changed', snapshot => {\n                                        let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                                        setStates(\"setUploadValue\", percentage);\n                                    }, error => {\n\n                                    }, () => {\n                                        storageRef.getDownloadURL().then(url => {\n                                            db.collection('credentials').doc(uid).update({\n                                                profileStatus: 3,\n                                                doc: url,\n                                                fileType: getStates(\"fileObject\"),\n                                            }).then(() => {\n                                                setOpen(false);\n                                                swal(\"Información actualizada\", \"¡La información de tu perfil fue actualizada con éxito!\", \"success\");\n                                            });\n                                        })\n                                    })\n                                }\n                            });\n                    } else {\n                        swal(\"Te falta subir tu identifiación oficial\", \"Para poder continuar con la verificación de tus datos debes subir una foto o pdf de tu identifiacaión oficial de ambos lados!\", \"warning\");\n                    }\n\n                } else {\n                    swal(\"Información faltante\", \"Llena todos los campos correspondientes para poder continuar!\", \"warning\");\n                }\n            }\n\n        } catch (e) {\n\n        }\n    }\n\n    return (\n        <div>\n            <form className={classes.root}\n                  id={(masterCondition) ? \"profileform\" : \"\"}\n                  onSubmit={(masterCondition) ? handleSubmit : () => false}>\n\n                <div className=\"col-12\">\n                    <Typography className={classes.title} variant=\"h4\" component=\"h4\">\n                        Sube un documento oficial (INE, Pasaporte, Licencia de conducir...)\n                    </Typography>\n                </div>\n\n                <Typography className={classes.title} variant=\"subtitle2\" component=\"h2\"\n                            color=\"textSecondary\">\n                    Verifica que tus datos coincidan con los datos personales que nos proporcionaste previamente\n                </Typography>\n\n\n                <div className=\"row mb-5 mt-5\">\n\n                    <div className=\"col-12\">\n                        <Typography className={classes.title} variant=\"h6\" component=\"h6\">\n                            Identificación oficial\n                        </Typography>\n                    </div>\n\n                    <div className=\"col-12 mt-5 px-5\">\n                        {\n                            !(masterCondition) ? showFile() :\n                                <span className=\"form-regi col-xl-5 col-lg-7 text-dark\">ID\n                                                        <label className=\"btn form-regi\" htmlFor=\"cameraine\">\n                                                            <img src={Camaraine} alt=\"\" className=\"\"/>\n                                                        </label>\n\n                                                        <label htmlFor=\"pdfine\" className=\"btn form-regi\">\n                                                            <img src={Pdfine} alt=\"\" className=\"\"/>\n                                                        </label>\n                                                        <div className=\" form-group  form-registro col-12 \">\n\n                                                            <input type=\"file\" id=\"cameraine\" className=\" d-none\"\n                                                                   accept=\"image/*\"\n                                                                   onChange={e => setFile(e.target.files[0])}>\n                                                            </input>\n\n                                                            <input type=\"file\" id=\"pdfine\"\n                                                                   accept=\"application/pdf\" className=\"d-none\"\n                                                                   onChange={e => setFile(e.target.files[0])}>\n                                                            </input>\n\n                                                            <div style={{\n                                                                position: 'absolute',\n                                                                justifycontent: \"center\",\n                                                                bottom: '10px',\n                                                                left: '50vw'\n                                                            }}>\n                                                            </div>\n\n                                                            <div className=\"container\">\n                                                                {showFile()}\n                                                            </div>\n\n                                                            {/*}\n                                                            <div>\n                                                                <progress value={uploadValue} max=\"100\">\n                                                                    {uploadValue}%\n                                                                </progress>\n                                                                <p className=\"btn form-regi\">{`${uploadValue}%`}</p>\n                                                            </div>\n                                                            {*/}\n\n                                                        </div>\n                                                    </span>\n                        }\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"col-12 d-flex justify-content-center\">\n                        <Button\n                            disabled={!(masterCondition)}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"large\"\n                            className={classes.button}\n                            startIcon={<SaveIcon/>}\n                            type={(masterCondition) ? \"submit\" : \"button\"}\n                        >\n                            Enviar verificación\n                        </Button>\n                    </div>\n                </div>\n            </form>\n            <Backdrop className={classes.backdrop} open={open} >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </div>\n    );\n};\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 300,\n        paddingBottom: 20,\n        marginTop: 20,\n        marginBottom: 20\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        marginTop: 20,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    cardActions: {},\n    large: {\n        width: theme.spacing(25),\n        height: theme.spacing(25),\n    },\n    formControl: {\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    alert: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default VerifiedProfile;","/home/snow/Documentos/ico-web-final/src/routes/dashboard/Settings.jsx",["350","351","352","353","354","355"],"import React, {useEffect, useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChangePassword from \"../../components/dashboard/settings/ChangePassword\";\nimport {useAuth} from \"../../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n}));\n\nexport default function Settings() {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const {currentUser, getAuthType, logout, credential} = useAuth();\n    const [logged, setLogged] = useState(false);\n    const [hasPassword, setHasPassword] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            if (!currentUser.emailVerified) {\n                setLogged(false);\n                logout();\n                history.push(\"/Home\");\n            } else {\n                setLogged(true);\n                history.push(\"/Settings\");\n                verifyAuthType(currentUser.providerData);\n            }\n        } catch (e) {\n            history.push(\"/Home\");\n            setLogged(false);\n        }\n    }, []);\n\n\n    const verifyAuthType = data => {\n        data.map(value => {\n            if (value.providerId === \"password\"){\n                setHasPassword(true);\n            }\n        });\n    }\n\n    const handleChange = (panel) => (event, isExpanded) => {\n        setExpanded(isExpanded ? panel : false);\n    };\n\n    return (\n        <div className=\"mt-5 pt-5 contenedor-profile px-2 px-md-5\">\n            <Accordion className=\"mt-3\" expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1bh-content\"\n                    id=\"panel1bh-header\"\n                >\n                    <Typography className={classes.heading}>Contraseña</Typography>\n                    <Typography className={classes.secondaryHeading}>Cambia tu contraseña</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    {hasPassword ? <ChangePassword /> : <h5 style={{marginLeft: 40}}>No puedes cambiar tu contraseña porque elegiste iniciar sesión con Google</h5>}\n                </AccordionDetails>\n            </Accordion>\n        </div>\n    );\n}\n","/home/snow/Documentos/ico-web-final/src/components/dashboard/settings/ChangePassword.jsx",["356","357"],"import React, {useState} from 'react';\nimport {Button, TextField} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport firebase from \"firebase\";\nimport swal from \"sweetalert\";\nimport passwordValidator from \"password-validator\";\nimport swal2 from '@sweetalert/with-react';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst ChangePassword = () => {\n\n    const [lastPassword, setLastPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n\n    const verifyLastPassword = async () => {\n        let result = false;\n        try{\n            let user = firebase.auth().currentUser;\n            let credential = firebase.auth.EmailAuthProvider.credential(\n                firebase.auth().currentUser.email,\n                lastPassword\n            );\n\n            await user.reauthenticateWithCredential(credential).then(() => {\n                result = true;\n            });\n        } catch (e) {\n            swal({\n                title: \"Contraseña actual incorrecta\",\n                text: \"La contraseña proporcionada como actual no es correcta, intenta de nuevo\",\n                icon: \"warning\",\n                button: \"¡Entendido!\",\n                closeOnClickOutside: false\n            });\n        }\n        return result;\n\n    }\n\n    const clearInputs = () => {\n        setNewPassword(\"\");\n        setRepeatPassword(\"\");\n        setLastPassword(\"\");\n    }\n\n    const handleChangePassword = async (e) => {\n        e.preventDefault();\n        setOpen(true);\n        try{\n            if(await verifyLastPassword()){\n                if(newPassword === repeatPassword) {\n\n                    let schema = new passwordValidator();\n                    schema\n                        .is().min(8)\n                        .is().max(100)\n                        .has().uppercase()\n                        .has().lowercase()\n                        .has().digits(1)\n                        .has().not().spaces();\n\n                    if(schema.validate(newPassword)){\n                        let user = firebase.auth().currentUser;\n                        await user.updatePassword(newPassword).then(() => {\n                            clearInputs();\n                            swal({\n                                title: \"Contraseña cambiada exitosamente\",\n                                text: \"Ahora puedes iniciar sesión con tu nueva contraseña\",\n                                icon: \"success\",\n                                button: \"¡Entendido!\",\n                                closeOnClickOutside: false\n                            });\n                        });\n                    } else {\n                        swal2({\n                            text: \"Tu contraseña debe cumplir con los siguientes requisitos\",\n                            closeOnClickOutside: false,\n                            buttons: {\n                                cancel: \"Entendido\",\n                            },\n                            content: (\n                                <div className=\"container\">\n                                    <div className=\"row\">\n                                        <ul>\n                                            {\n                                                schema.validate(newPassword, {list: true}).map((element, index) => {\n                                                    switch (element) {\n                                                        case 'min':\n\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Mínimo 8 caracteres</p></li>\n                                                            )\n\n                                                        case 'max':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Máximo 100 caracteres</p></li>\n                                                            )\n\n                                                        case 'uppercase':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Mínimo una letra mayuscula</p></li>\n                                                            )\n\n                                                        case 'lowercase':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Mínimo 1 letra minuscula</p></li>\n                                                            )\n\n                                                        case 'spaces':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">No debe contener espacios</p></li>\n                                                            )\n\n                                                        case 'digits':\n                                                            return (\n                                                                <li key={index} className=\"text-dark text-justify\"><p\n                                                                    className=\"text-danger\">Mínimo 1 número</p></li>\n                                                            )\n\n                                                    }\n\n                                                })\n                                            }\n                                        </ul>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                } else {\n                    swal({\n                        title: \"Las contraseñas no coinciden\",\n                        text: \"Asegurate de que las contraseñas nuevas sean las mismas\",\n                        icon: \"info\",\n                        button: \"¡Entendido!\",\n                        closeOnClickOutside: false\n                    });\n                }\n            }\n        } catch (e) {\n\n\n        }\n        setOpen(false);\n\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleChangePassword}>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 mb-3\">\n                            <TextField variant=\"outlined\"\n                                       required\n                                       fullWidth\n                                       id=\"outlined-basic\"\n                                       label=\"Contraseña anterior\"\n                                       type={\"password\"}\n                                       style={{alignContent: \"center\"}}\n                                       value={lastPassword}\n                                       onChange={e => setLastPassword(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"col-12 mb-3\">\n                            <TextField variant=\"outlined\"\n                                       required\n                                       fullWidth\n                                       id=\"outlined-basic\"\n                                       label=\"Contraseña nueva\"\n                                       type={\"password\"}\n                                       style={{alignContent: \"center\"}}\n                                       value={newPassword}\n                                       onChange={e => setNewPassword(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"col-12 mb-3\">\n                            <TextField variant=\"outlined\"\n                                       required\n                                       fullWidth\n                                       id=\"outlined-basic\"\n                                       label=\"Repetir contraseña nueva\"\n                                       type={\"password\"}\n                                       style={{alignContent: \"center\"}}\n                                       value={repeatPassword}\n                                       onChange={e => setRepeatPassword(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"col-12\">\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                size=\"large\"\n                                startIcon={<SaveIcon/>}\n                                type={\"submit\"}\n                            >\n                                Cambiar contraseña\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n            <Backdrop className={classes.backdrop} open={open} >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </div>\n    );\n};\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\nexport default ChangePassword;","/home/snow/Documentos/ico-web-final/src/components/dashboard/PurchaseHistoryComponent.jsx",["358","359","360","361","362"],"import React, {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {lighten, makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport {db} from \"../../config/firebase\";\nimport NumberFormat from \"react-number-format\";\n\nconst createData = (id, tokens, price, datetime, cardDetails) => {\n    return {id, tokens, price, datetime, cardDetails};\n}\n\nconst descendingComparator = (a, b, orderBy) => {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nconst getComparator = (order, orderBy) => {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nconst stableSort = (array, comparator) => {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    {id: 'id', numeric: false, disablePadding: true, label: 'ID'},\n    {id: 'tokens', numeric: true, disablePadding: false, label: 'Tokens'},\n    {id: 'price', numeric: true, disablePadding: false, label: 'Precio (USD)'},\n    {id: 'datetime', numeric: true, disablePadding: false, label: 'Fecha'},\n    {id: 'cardDetails', numeric: true, disablePadding: false, label: 'Forma de pago'},\n];\n\nconst EnhancedTableHead = (props) => {\n    const {classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort} = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} {numSelected === 1 ? \"seleccionado\" : \"seleccionados\"}\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Historial de compra\n                </Typography>\n            )}\n\n        </Toolbar>\n    );\n}\n\nexport default function PurchaseHistoryComponent({uid}) {\n    const classes = useStyles();\n    const [order, setOrder] = useState('desc');\n    const [orderBy, setOrderBy] = useState('');\n    const [selected, setSelected] = useState([]);\n    const [page, setPage] = useState(0);\n    const [rows, setRows] = useState([]);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    useEffect(() => {\n        getData(uid);\n    }, []);\n\n    const timeConverter = (UNIX_timestamp) => {\n        let a = new Date(UNIX_timestamp * 1000);\n        let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        let year = a.getFullYear();\n        let month = months[a.getMonth()];\n        let date = a.getDate();\n        let hour = a.getHours();\n        let min = a.getMinutes();\n        let sec = a.getSeconds();\n        let time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n        return time;\n    }\n\n    const getData = (id) => {\n        let docRef = db.collection('credentials').doc(id).collection('transactions');\n        docRef\n            .orderBy(\"dateField\", 'desc')\n            .onSnapshot((querySnapshot) => {\n                let elements = [];\n                querySnapshot.forEach((doc) => {\n                    try {\n                        let id = null;\n                        let tokens = null;\n                        let price = null;\n                        let date = null;\n                        let paymentMethod = null;\n                        if (doc.data().payment_method_types[0] === \"card\") {\n                            if (doc.data().currency === \"usd\") {\n                                price = \"$\" + (doc.data().amount / 100) || \"PENDING\";\n                            } else if (doc.data().currency === \"mxn\") {\n                                price = \"$\" + doc.data().final_amount || \"PENDING\";\n                            }\n                            id = doc.data().charges.data[0].id || \"PENDING\";\n                            tokens = doc.data().tokens_number || \"PENDING\";\n                            date = timeConverter(doc.data().created) || \"PENDING\";\n                            paymentMethod = doc.data().charges.data[0].payment_method_details.card.network + \" \" + doc.data().charges.data[0].payment_method_details.type + \" \" + \"*\".repeat(12) + doc.data().charges.data[0].payment_method_details.card.last4 || \"PENDING\";\n                        } else if (doc.data().payment_method_types[0] === \"oxxo\") {\n                            id = doc.data().charges.data[0].id || \"PENDING\";\n                            tokens = doc.data().tokens_number || \"PENDING\";\n                            price = \"$\" + doc.data().final_amount || \"PENDING\";\n                            date = timeConverter(doc.data().created) || \"PENDING\";\n                            paymentMethod = doc.data().payment_method_types[0] || \"PENDING\";\n                        }\n                        elements.push(createData(id, tokens, price, date, paymentMethod));\n                    } catch (e) {\n\n                    }\n                });\n                setRows(elements);\n            })\n    }\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length}/>\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size='medium'\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.id);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.id}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n\n                                            </TableCell>\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                {row.id}\n                                            </TableCell>\n                                            <TableCell align=\"right\">{row.tokens}</TableCell>\n                                            <TableCell align=\"right\">\n                                                <NumberFormat\n                                                    type=\"text\"\n                                                    displayType=\"text\"\n                                                    value={row.price}\n                                                    thousandSeparator={true}\n                                                    prefix='$'\n                                                />\n                                            </TableCell>\n                                            <TableCell align=\"right\">{row.datetime}</TableCell>\n                                            <TableCell align=\"right\">{row.cardDetails}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{height: 53 * emptyRows}}>\n                                    <TableCell colSpan={6}/>\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'dark'\n            ? {\n                color: theme.palette.success.main,\n                backgroundColor: lighten(theme.palette.success.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.success.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};","/home/snow/Documentos/ico-web-final/src/context/AuthContext.jsx",["363"],"import React, { useContext, useState, useEffect, createContext } from \"react\"\nimport { auth } from \"../config/firebase\"\nimport {useHistory} from \"react-router-dom\";\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n    return useContext(AuthContext);\n}\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState();\n    const [loading, setLoading] = useState(true);\n    const [credential, setCredential] = useState();\n    const history = useHistory();\n\n    const signup = (email, password) => {\n        return auth.createUserWithEmailAndPassword(email, password);\n    }\n\n    const login = (email, password) => {\n        return auth.signInWithEmailAndPassword(email, password);\n    }\n\n    const logout = () => {\n        return auth.signOut();\n    }\n\n    const resetPassword = (email) => {\n        return auth.sendPasswordResetEmail(email);\n    }\n\n    const getAuthType = async () => {\n        await auth.getRedirectResult().then(r => console.log(r));\n    }\n\n    const updateEmail = (email) => {\n        return currentUser.updateEmail(email);\n    }\n\n    const updatePassword = (password) => {\n        return currentUser.updatePassword(password);\n    }\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            setCurrentUser(user);\n            setLoading(false);\n            setCredential(user);\n\n        });\n        return unsubscribe;\n    }, []);\n\n    const value = {\n        credential,\n        currentUser,\n        login,\n        signup,\n        logout,\n        resetPassword,\n        updateEmail,\n        updatePassword,\n        getAuthType\n    }\n\n    return (\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    )\n}","/home/snow/Documentos/ico-web-final/src/config/Particles-config.js",[],"/home/snow/Documentos/ico-web-final/src/routes/Recovery.jsx",["364","365","366","367","368","369","370","371","372","373"],"import React, {useEffect, useState} from 'react';\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Card from \"@material-ui/core/Card\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Button from '@material-ui/core/Button';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport Input from '@material-ui/core/Input';\nimport passwordValidator from \"password-validator\";\nimport swal2 from \"@sweetalert/with-react\";\nimport swal from \"sweetalert\";\nimport {useHistory} from \"react-router-dom\";\nimport firebase from \"firebase\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport {useAuth} from \"../context/AuthContext\";\nimport SunshineFinder from \"../apis/SunshineFinder\";\n\nconst Recovery = () => {\n    const classes = useStyles();\n    const [values, setValues] = useState({\n        showPassword1: false,\n        showPassword2: false\n    });\n    const [password, setPassword] = useState(\"\");\n    const [password2, setPassword2] = useState(\"\");\n    const [lastPassword, setLastPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\n    const [open, setOpen] = useState(false);\n    const [ready, setReady] = useState(false);\n    const history = useHistory();\n    //const {id} = useParams();\n    const {login, currentUser, logout} = useAuth();\n\n    useEffect(() => {\n        //verifyToken(id);\n        emailLinkComplete();\n    }, []);\n\n    const verifyToken = async token => {\n        SunshineFinder.get(\"/reset\", {\n            params: {\n                resetPasswordToken: token\n            },\n        }).then(response => {\n            if (response.data.message === \"token-ok\") {\n\n                setReady(true);\n            } else {\n\n                setReady(false);\n            }\n        }).catch(e => {\n\n        })\n    }\n\n    const emailLinkComplete = () => {\n        // [START email_link_complete]\n        // Confirm the link is a sign-in with email link.\n        if (firebase.auth().isSignInWithEmailLink(window.location.href)) {\n            // Additional state parameters can also be passed via URL.\n            // This can be used to continue the user's intended action before triggering\n            // the sign-in operation.\n            // Get the email if available. This should be available if the user completes\n            // the flow on the same device where they started it.\n            let email = window.localStorage.getItem('emailForSignIn');\n            if (!email) {\n                // User opened the link on a different device. To prevent session fixation\n                // attacks, ask the user to provide the associated email again. For example:\n                email = window.prompt('Please provide your email for confirmation');\n            }\n            // The client SDK will parse the code from the link for you.\n            firebase.auth().signInWithEmailLink(email, window.location.href)\n                .then((result) => {\n                    // Clear email from storage.\n                    window.localStorage.removeItem('emailForSignIn');\n                    // You can access the new user via result.user\n                    // Additional user info profile not available via:\n                    // result.additionalUserInfo.profile == null\n                    // You can check if the user is new or existing:\n                    // result.additionalUserInfo.isNewUser\n                })\n                .catch((error) => {\n                    // Some error occurred, you can inspect the code: error.code\n                    // Common errors could be invalid email and invalid or expired OTPs.\n                });\n        }\n        // [END email_link_complete]\n    }\n\n    const clearInputs = () => {\n        setNewPassword(\"\");\n        setRepeatPassword(\"\");\n    }\n\n    const handleChangePassword = async (e) => {\n        e.preventDefault();\n        setOpen(true);\n        try {\n            if (password === password2) {\n                let schema = new passwordValidator();\n                schema\n                    .is().min(8)\n                    .is().max(100)\n                    .has().uppercase()\n                    .has().lowercase()\n                    .has().digits(1)\n                    .has().not().spaces();\n\n                if (schema.validate(password)) {\n                    let user = firebase.auth().currentUser;\n                    await user.updatePassword(password).then(() => {\n                        clearInputs();\n                        swal({\n                            title: \"Contraseña cambiada exitosamente\",\n                            text: \"Ahora puedes iniciar sesión con tu nueva contraseña\",\n                            icon: \"success\",\n                            button: \"¡Entendido!\",\n                            closeOnClickOutside: false\n                        }).then(confirm => {\n                            if (confirm) {\n                                history.push(\"/\");\n                            }\n                        });\n                    });\n                } else {\n                    swal2({\n                        text: \"Tu contraseña debe cumplir con los siguientes requisitos\",\n                        closeOnClickOutside: false,\n                        buttons: {\n                            cancel: \"Entendido\",\n                        },\n                        content: (\n                            <div className=\"container\">\n                                <div className=\"row\">\n                                    <ul>\n                                        {\n                                            schema.validate(newPassword, {list: true}).map((element, index) => {\n                                                switch (element) {\n                                                    case 'min':\n\n                                                        return (\n                                                            <li key={index} className=\"text-dark text-justify\"><p\n                                                                className=\"text-danger\">Mínimo 8 caracteres</p></li>\n                                                        )\n\n                                                    case 'max':\n                                                        return (\n                                                            <li key={index} className=\"text-dark text-justify\"><p\n                                                                className=\"text-danger\">Máximo 100 caracteres</p></li>\n                                                        )\n\n                                                    case 'uppercase':\n                                                        return (\n                                                            <li key={index} className=\"text-dark text-justify\"><p\n                                                                className=\"text-danger\">Mínimo una letra mayuscula</p>\n                                                            </li>\n                                                        )\n\n                                                    case 'lowercase':\n                                                        return (\n                                                            <li key={index} className=\"text-dark text-justify\"><p\n                                                                className=\"text-danger\">Mínimo 1 letra minuscula</p>\n                                                            </li>\n                                                        )\n\n                                                    case 'spaces':\n                                                        return (\n                                                            <li key={index} className=\"text-dark text-justify\"><p\n                                                                className=\"text-danger\">No debe contener espacios</p>\n                                                            </li>\n                                                        )\n\n                                                    case 'digits':\n                                                        return (\n                                                            <li key={index} className=\"text-dark text-justify\"><p\n                                                                className=\"text-danger\">Mínimo 1 número</p></li>\n                                                        )\n\n                                                }\n\n                                            })\n                                        }\n                                    </ul>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            } else {\n                swal({\n                    title: \"Las contraseñas no coinciden\",\n                    text: \"Asegurate de que las contraseñas nuevas sean las mismas\",\n                    icon: \"info\",\n                    button: \"¡Entendido!\",\n                    closeOnClickOutside: false\n                });\n            }\n        } catch (e) {\n\n        }\n        setOpen(false);\n\n    }\n\n\n    const handleClickShowPassword = (id) => {\n        if (id === 1) {\n            setValues({...values, showPassword1: !values.showPassword1});\n        } else if (id === 2) {\n            setValues({...values, showPassword2: !values.showPassword2});\n        }\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    return (\n\n        <div className=\"container\">\n            <Card className={classes.root}>\n\n                <CardContent>\n                    <form onSubmit={handleChangePassword}>\n                        <div className=\"row\">\n\n                            <div className=\"col-12\">\n                                <h3>Cambia tu contraseña</h3>\n                            </div>\n\n\n                            <div className=\"col-12 mt-5 mb-4\">\n                                <FormControl>\n                                    <InputLabel htmlFor=\"standard-adornment-password\">Contraseña nueva</InputLabel>\n                                    <Input\n                                        required\n                                        id=\"standard-adornment-password\"\n                                        type={values.showPassword1 ? 'text' : 'password'}\n                                        value={password}\n                                        onChange={e => setPassword(e.target.value)}\n                                        endAdornment={\n                                            <InputAdornment position=\"end\">\n                                                <IconButton\n                                                    aria-label=\"toggle password visibility\"\n                                                    onClick={() => handleClickShowPassword(1)}\n                                                    onMouseDown={handleMouseDownPassword}\n                                                >\n                                                    {values.showPassword1 ? <Visibility/> : <VisibilityOff/>}\n                                                </IconButton>\n                                            </InputAdornment>\n                                        }\n                                    />\n                                </FormControl>\n                            </div>\n\n                            <div className=\"col-12 mb-5\">\n                                <FormControl>\n                                    <InputLabel htmlFor=\"standard-adornment-password\">Repite tu contraseña</InputLabel>\n                                    <Input\n                                        required\n                                        id=\"standard-adornment-password\"\n                                        type={values.showPassword2 ? 'text' : 'password'}\n                                        value={password2}\n                                        onChange={e => setPassword2(e.target.value)}\n                                        endAdornment={\n                                            <InputAdornment position=\"end\">\n                                                <IconButton\n                                                    aria-label=\"toggle password visibility\"\n                                                    onClick={() => handleClickShowPassword(2)}\n                                                    onMouseDown={handleMouseDownPassword}\n                                                >\n                                                    {values.showPassword2 ? <Visibility/> : <VisibilityOff/>}\n                                                </IconButton>\n                                            </InputAdornment>\n                                        }\n                                    />\n                                </FormControl>\n                            </div>\n\n                            <div className=\"col-12\">\n                                <Button variant=\"contained\" type=\"submit\" size=\"large\" color=\"primary\">\n                                    Enviar\n                                </Button>\n                            </div>\n\n                        </div>\n                    </form>\n\n                </CardContent>\n                <CardActions>\n                </CardActions>\n            </Card>\n            <Backdrop className={classes.backdrop} open={open}>\n                <CircularProgress color=\"inherit\"/>\n            </Backdrop>\n        </div>\n\n    );\n};\n\nexport default Recovery;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 300,\n        paddingBottom: 20,\n        marginTop: 150\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n    textField: {\n        width: '25ch',\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));","/home/snow/Documentos/ico-web-final/src/components/PasswordRecoveryModal.jsx",["374","375","376","377","378"],"import React, {useState, useEffect} from 'react';\nimport \"firebase/auth\";\nimport swal from 'sweetalert';\nimport \"./dashboard/css/styles.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport axios from \"axios\";\nimport {useHistory} from \"react-router-dom\";\nimport firebase from \"firebase\";\nimport SunshineFinder from \"../apis/SunshineFinder\";\n\nconst PasswordRecoveryModal = () => {\n\n    const [email, setEmail] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n\n\n    const submitRecovery = async e => {\n        e.preventDefault();\n        try{\n            setLoading(true);\n            const response = await SunshineFinder.post(\"/password-recovery\", {\n                email\n            });\n            sendMessage(response.data.codeResponse);\n        } catch (e) {\n\n        }\n        setLoading(false);\n    }\n\n    const sendMessage = (res) => {\n        switch (res) {\n            case 'send':\n                swal({\n                    title: \"Revisa tu correo electrónico!\",\n                    text: \"Se envio un enlace a tu correo para reestablecer tu contraseña\",\n                    icon: \"success\",\n                    button: \"Entendido!\",\n                    closeOnClickOutside: false\n                }).then(async confirm => {\n                    if(confirm){\n                        await document.getElementById(\"closeRecoveryModal\").click();\n                        await history.push(\"/Home\");\n                    }\n                });\n                break;\n\n            case 'auth/user-not-found':\n                swal({\n                    title: \"Revisa bien tu correo!\",\n                    text: \"No se tiene un registro con el correo electrónico proporcionado\",\n                    icon: \"warning\",\n                    button: \"Entendido!\",\n                    closeOnClickOutside: false\n                });\n                break;\n\n            case 'not-send':\n                swal({\n                    title: \"No se pudo enviar el correo!\",\n                    text: \"Prueba recargando la página o intentando de nuevo más tarde\",\n                    icon: \"warning\",\n                    button: \"Entendido!\",\n                    closeOnClickOutside: false\n                });\n                break;\n\n            default:\n                swal({\n                    title: \"Oops!\",\n                    text: \"Ocurrio un error inesperado, recarga la página o intenta de nuevo más tarde\",\n                    icon: \"error\",\n                    button: \"Entendido!\",\n                    closeOnClickOutside: false\n                });\n        }\n    }\n\n    const sendRecoveryTwo = async (e) => {\n        e.preventDefault();\n        let actionCodeSettings = {\n            // URL you want to redirect back to. The domain (www.example.com) for this\n            // URL must be in the authorized domains list in the Firebase Console.\n            url: 'https://localhost:3000/Recovery',\n            // This must be true.\n            handleCodeInApp: true,\n\n        };\n\n        await firebase.auth().sendSignInLinkToEmail(email, actionCodeSettings)\n            .then((r) => {\n                swal({\n                    title: \"Correo enviado\",\n                    text: \"Se envió un correo de recuperación de cuenta\",\n                    icon: \"success\",\n                    button: \"Entendido!\",\n                    closeOnClickOutside: false\n                });\n                // The link was successfully sent. Inform the user.\n                // Save the email locally so you don't need to ask the user for it again\n                // if they open the link on the same device.\n                window.localStorage.setItem('emailForSignIn', email);\n                // ...\n            })\n            .catch((error) => {\n                let errorCode = error.code;\n                let errorMessage = error.message;\n\n                // ...\n            });\n\n\n    }\n\n    return (\n\n        <div className=\"modal fade \" id=\"recoveryModal\" data-backdrop=\"static\" data-keyboard=\"false\"\n             tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-xl modal-dialog-centered pl-xl-5 pr-xl-5\">\n                <div className=\"modal-content registrobody pl-xl-5 pr-xl-5 \">\n\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title col-12\" id=\"staticBackdropLabel\">Recuperar contraseña</h5>\n                        <button type=\"button\" id=\"closeRecoveryModal\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n\n                    <div className=\"modal-body col-12 pl-xl-5 pr-xl-5\">\n\n                        <form className=\"form\" onSubmit={sendRecoveryTwo}>\n                            <div className=\"container mt-5 pl-xl-5 pr-xl-5\">\n                                <div className=\"row pl-xl-5 pr-xl-5\">\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"email\"\n                                                   name=\"email\"\n                                                   value={email}\n                                                   label=\"Correo electrónico\"\n                                                   type=\"text\"\n                                                   onChange={e => setEmail(e.target.value)} variant=\"filled\"/>\n                                    </div>\n\n                                    <div className=\"form-group col-12 mt-4 mb-5\">\n                                        <button type=\"submit\"\n                                                className=\"btn btn-registro\"\n                                                id=\"signInButton\"\n                                                disabled={loading}>\n                                            {loading ? (\n                                                <div className=\"spinner-border text-dark\" role=\"status\">\n                                                    <span className=\"sr-only\">Entrando...</span>\n                                                </div>\n                                            ) : \"ENTRAR\"}\n                                        </button>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </form>\n\n                    </div>\n                    <div className=\"modal-footer col-12 btn-footer\"></div>\n                </div>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default PasswordRecoveryModal;","/home/snow/Documentos/ico-web-final/src/components/SignUpModal.jsx",["379","380","381","382","383","384","385","386","387"],"import React, {useState, useEffect} from 'react';\nimport \"./navbar/css/styles.css\"\nimport 'react-phone-number-input/style.css'\nimport {db, auth} from \"../config/firebase\";\nimport swal from \"sweetalert\";\nimport swal2 from '@sweetalert/with-react';\nimport firebase from 'firebase';\nimport \"firebase/auth\";\nimport GoogleButton from \"react-google-button\";\nimport passwordValidator from \"password-validator\";\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport {useHistory} from \"react-router-dom\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FilledInput from \"@material-ui/core/FilledInput\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport SunshineFinder from \"../apis/SunshineFinder\";\nrequire('dotenv').config();\n\n\nconst SignUpModal = () => {\n\n    const sendReCAPTCHAValue = async (value) => {\n        const response = await SunshineFinder.post(\"/api/recaptcha\", {\n            captchaValue: value\n        });\n\n        if (response.data.status === \"success\") {\n            setVerifiedCaptcha(true);\n        }\n\n    }\n\n    const [countries, setCountries] = useState([]);\n    const [uploadValue, setUploadValue] = useState(0);\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [apellido, setApellido] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [repeatedPassword, setRepeteadPassword] = useState(\"\");\n    const [checkedValue, setCheckedValue] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [verifiedCaptcha, setVerifiedCaptcha] = useState(false);\n    const history = useHistory();\n\n    //VALIDATIONS\n    const validations = {\n        requiredFields: () => {\n            return (name !== '' && email !== '' && password !== '' && apellido !== '')\n        }\n    }\n\n    const handleCheckboxState = (e) => {\n        setCheckedValue(e.target.checked);\n    }\n\n    const saveDataInFirestore = (uid, data = {}) => {\n        if (Object.keys(data).length > 0) {\n            /*============GUARDAR DATOS EN FIRESTORE CON GOOGLE===========*/\n            db.collection(\"credentials\").doc(uid).set({\n                UUID: uid,\n                city: data.city.replace(/<[^>]+>/g, ''),\n                doc: \"\".replace(/<[^>]+>/g, ''),\n                email: data.email.replace(/<[^>]+>/g, ''),\n                name: data.name.replace(/<[^>]+>/g, ''),\n                phone: data.phone === null ? \"\".replace(/<[^>]+>/g, '') : data.phone.replace(/<[^>]+>/g, ''),\n                authType: data.authType.replace(/<[^>]+>/g, ''),\n                birthday: data.birthday.replace(/<[^>]+>/g, ''),\n                country: data.country.replace(/<[^>]+>/g, ''),\n                state: data.state.replace(/<[^>]+>/g, ''),\n                address: data.address.replace(/<[^>]+>/g, ''),\n                suns: 0,\n                countryComplete: data.countryComplete.replace(/<[^>]+>/g, ''),\n                profileStatus: data.profileStatus,\n                fileType: \"\".replace(/<[^>]+>/g, ''),\n                profilePicture: \"\".replace(/<[^>]+>/g, ''),\n                profilePictureStatus: 0,\n                addressToken: \"\",\n                privateKey: \"\"\n            }).then(docRef => {\n                history.push(\"/\");\n                window.location.reload();\n                clearStates();\n            }).catch((error) => {\n\n            });\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n        } else {\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n            db.collection(\"credentials\").doc(uid).set({\n                UUID: uid,\n                city: \"\".replace(/<[^>]+>/g, ''),\n                doc: \"\".replace(/<[^>]+>/g, ''),\n                email: email.replace(/<[^>]+>/g, ''),\n                name: name.replace(/<[^>]+>/g, ''),\n                lastname: apellido.replace(/<[^>]+>/g, ''),\n                phone: \"\".replace(/<[^>]+>/g, ''),\n                authType: \"EMAIL\".replace(/<[^>]+>/g, ''),\n                birthday: \"\".replace(/<[^>]+>/g, ''),\n                country: \"\".replace(/<[^>]+>/g, ''),\n                state: \"\".replace(/<[^>]+>/g, ''),\n                address: \"\".replace(/<[^>]+>/g, ''),\n                profileStatus: 0,\n                suns: 0,\n                countryComplete: \"\".replace(/<[^>]+>/g, ''),\n                fileType: \"\".replace(/<[^>]+>/g, ''),\n                profilePicture: \"\".replace(/<[^>]+>/g, ''),\n                profilePictureStatus: 0,\n                addressToken: \"\",\n                privateKey: \"\"\n            }).then(docRef => {\n                swal({\n                    title: \"¡Registro exitoso!\",\n                    text: \"Enviamos un enlace al correo electrónico que proporcionaste para verificar tu cuenta.\",\n                    icon: \"success\",\n                    button: \"¡Entendido!\",\n                    closeOnClickOutside: false\n                }).then(confirm => {\n                    if (confirm) {\n                        document.getElementById(\"closeModalSignUp\").click();\n                        document.getElementById(\"signInButton\").click();\n                    }\n                });\n                clearStates();\n                setLoading(false);\n            }).catch((error) => {\n                setLoading(false);\n\n            });\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n        }\n    }\n\n    const searchDataInFirestore = async id => {\n        let result = null;\n        await db.collection('credentials').doc(id).get().then(doc => {\n            result = doc.exists ? \"exists\" : \"not-exists\";\n        }).catch(error => {\n            result = \"error\";\n\n        });\n        return result;\n    }\n\n    const clearStates = () => {\n        setName('');\n        setEmail('');\n        setPassword('');\n        setRepeteadPassword('');\n        setApellido('');\n        setUploadValue(0);\n        setCheckedValue(false);\n        setVerifiedCaptcha(false);\n    }\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (validations.requiredFields()) {\n\n            let schema = new passwordValidator();\n            schema\n                .is().min(8)\n                .is().max(100)\n                .has().uppercase()\n                .has().lowercase()\n                .has().digits(1)\n                .has().not().spaces();\n\n            if (schema.validate(password)) {\n                if (password === repeatedPassword) {\n                    if (checkedValue) {\n                        if (verifiedCaptcha) {\n                            setLoading(true);\n                            auth.createUserWithEmailAndPassword(email, password)\n                                .then((user) => {\n\n                                    user.user.sendEmailVerification().then(r => {\n                                        saveDataInFirestore(user.user.uid);\n                                    }, (error) => {\n\n                                    })\n\n                                    auth.signOut();\n\n                                }).catch((error) => {\n                                setLoading(false);\n                                let errorCode = error.code;\n                                let errorMessage = error.message;\n\n\n                                /*============== EL CORREO YA SE USA POR OTRA CUENTA ==================*/\n                                if (errorCode === \"auth/email-already-in-use\") {\n                                    swal({\n                                        title: \"Oops\",\n                                        text: \"La dirección de correo ya se encuentra en uso\",\n                                        icon: \"warning\",\n                                        button: \"¡Entendido!\",\n                                        closeOnClickOutside: false\n                                    });\n                                } else if (errorCode === \"auth/weak-password\") {\n                                    swal({\n                                        title: \"Oops\",\n                                        text: \"La contraseña debe tener al menos 8 caracteres!\",\n                                        icon: \"warning\",\n                                        button: \"¡Entendido!\"\n                                    });\n                                }\n\n                            });\n                        } else {\n                            swal({\n                                title: \"Verifica el CAPTCHA\",\n                                text: \"Intenta verificar el CAPTCHA de nuevo para poder continuar\",\n                                icon: \"warning\",\n                                button: \"¡Entendido!\"\n                            });\n                        }\n                    } else {\n                        swal({\n                            title: \"Advertencia\",\n                            text: \"Debes aceptar los términos y condiciones para poder registrarte\",\n                            icon: \"warning\",\n                            button: \"¡Entendido!\",\n                            closeOnClickOutside: false\n                        });\n                    }\n                } else {\n                    swal({\n                        title: \"Las contraseñas no coinciden\",\n                        text: \"Asegurate de escribir las mismas contraseñas en los campos correspondientes\",\n                        icon: \"warning\",\n                        button: \"¡Entendido!\",\n                        closeOnClickOutside: false\n                    });\n                }\n\n            } else {\n                swal2({\n                    text: \"Tu contraseña debe cumplir con los siguientes requisitos\",\n                    closeOnClickOutside: false,\n                    buttons: {\n                        cancel: \"Entendido\",\n                    },\n                    content: (\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <ul>\n                                    {\n                                        schema.validate(password, {list: true}).map((element, index) => {\n\n                                            switch (element) {\n                                                case 'min':\n\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo 8 caracteres</p></li>\n                                                    )\n\n                                                case 'max':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Máximo 100 caracteres</p></li>\n                                                    )\n\n                                                case 'uppercase':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo una letra mayuscula</p></li>\n                                                    )\n\n                                                case 'lowercase':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo 1 letra minuscula</p></li>\n                                                    )\n\n                                                case 'spaces':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">No debe contener espacios</p></li>\n                                                    )\n\n                                                case 'digits':\n                                                    return (\n                                                        <li key={index} className=\"text-dark text-justify\"><p\n                                                            className=\"text-danger\">Mínimo 1 número</p></li>\n                                                    )\n\n                                            }\n\n                                        })\n                                    }\n                                </ul>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n\n        } else {\n            swal({\n                title: \"Advertencia\",\n                text: \"Debes llenar todos los campos\",\n                icon: \"warning\",\n                button: \"¡Entendido!\",\n                closeOnClickOutside: false\n            });\n        }\n    };\n\n    const signUpWithGoogle = async () => {\n\n        let provider = new firebase.auth.GoogleAuthProvider();\n        provider.addScope('https://www.googleapis.com/auth/userinfo.profile');\n        auth.languageCode = 'es';\n        await auth.signInWithPopup(provider).then(async (result) => {\n\n            let user = result.user;\n\n            if (user.emailVerified) {\n\n                let userStatus = await searchDataInFirestore(user.uid);\n                if(userStatus === \"exists\"){\n                    history.push(\"/\");\n                    window.location.reload();\n                    clearStates();\n                } else if (userStatus === \"not-exists\"){\n                    saveDataInFirestore(user.uid, {\n                        city: \"\",\n                        email: user.email,\n                        name: user.displayName,\n                        phone: user.phoneNumber,\n                        authType: \"GOOGLE\",\n                        birthday: \"\",\n                        country: \"\",\n                        state: \"\",\n                        address: \"\",\n                        profileStatus: 0,\n                        countryComplete: \"\",\n                        addressToken: \"\",\n                        privateKey: \"\"\n                    });\n                } else {\n                    swal({\n                        title: \"Ocurrió un error\",\n                        text: \"Ocurrió un error inesperado, inténtalo de nuevo más tarde\",\n                        icon: \"error\",\n                        button: \"Entendido!\",\n                        closeOnClickOutside: false\n                    });\n                }\n\n            } else {\n                user.sendEmailVerification().then(r => {\n                    saveDataInFirestore(user.uid, {\n                        city: \"\",\n                        email: user.email,\n                        name: user.displayName,\n                        phone: user.phoneNumber,\n                        authType: \"GOOGLE\",\n                        birthday: \"\",\n                        country: \"\",\n                        state: \"\",\n                        address: \"\",\n                        profileStatus: 0,\n                        countryComplete: \"\",\n                        addressToken: \"\",\n                        privateKey: \"\"\n                    });\n                }, (error) => {\n\n                });\n                auth.signOut();\n            }\n        }).catch((error) => {\n            auth.signOut();\n            let errorCode = error.code;\n            let errorMessage = error.message;\n\n        })\n\n    }\n\n    const [values, setValues] = useState({\n        amount: '',\n        password: '',\n        weight: '',\n        weightRange: '',\n        showPassword1: false,\n        showPassword2: false\n    });\n\n    const handleClickShowPassword = (id) => {\n        if (id === 1) {\n            setValues({...values, showPassword1: !values.showPassword1});\n        } else if (id === 2) {\n            setValues({...values, showPassword2: !values.showPassword2});\n        }\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    return (\n\n        <div className=\"modal fade \" id=\"signUpModal\" data-backdrop=\"static\" data-keyboard=\"false\"\n             tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-xl modal-dialog-centered pl-xl-5 pr-xl-5\">\n                <div className=\"modal-content  registrobody pl-xl-5 pr-xl-5\">\n\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title col-12 text-light\" id=\"staticBackdropLabel\">Crea tu cuenta</h5>\n                        <button type=\"button\" id=\"closeModalSignUp\" className=\"close\" data-dismiss=\"modal\"\n                                aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n\n\n                    <div className=\"modal-body col-12 pl-xl-5 pr-xl-5\">\n\n\n                        <div className=\"form-group col-12 d-flex justify-content-center\">\n                            <GoogleButton\n                                label='Iniciar sesión con Google'\n                                onClick={signUpWithGoogle}\n                                style={{width: 500, borderRadius: 3}}\n                            />\n                        </div>\n\n                        <form className=\"form\" onSubmit={handleSubmit}>\n                            <div className=\"container mt-5 pl-xl-5 pr-xl-5\">\n                                <div className=\"row pl-xl-5 pr-xl-5\">\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"name\"\n                                                   name=\"name\"\n                                                   value={name}\n                                                   label=\"Nombre\"\n                                                   type=\"text\"\n                                                   onChange={(e) => setName(e.target.value)} variant=\"filled\"/>\n\n\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"lastname\"\n                                                   name=\"lastnane\"\n                                                   label=\"Apellido\"\n                                                   value={apellido}\n                                                   type=\"text\"\n                                                   onChange={(e) => setApellido(e.target.value)} variant=\"filled\"/>\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"outlined-basic\" label=\"Email\"\n                                                   value={email}\n                                                   type=\"email\"\n                                                   onChange={(e) => setEmail(e.target.value)} variant=\"filled\"/>\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <FormControl fullWidth className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                     variant=\"filled\">\n                                            <InputLabel htmlFor=\"filled-adornment-password\">Contraseña *</InputLabel>\n                                            <FilledInput\n                                                id=\"signup-password\"\n                                                type={values.showPassword1 ? 'text' : 'password'}\n                                                value={password}\n                                                onChange={(e) => setPassword(e.target.value)}\n                                                style={{backgroundColor: \"#FFFFFF\"}}\n                                                endAdornment={\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            aria-label=\"toggle password visibility\"\n                                                            onClick={() => handleClickShowPassword(1)}\n                                                            onMouseDown={handleMouseDownPassword}\n                                                            edge=\"end\"\n                                                        >\n                                                            {values.showPassword1 ? <Visibility/> : <VisibilityOff/>}\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                }\n                                            />\n                                        </FormControl>\n\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <FormControl fullWidth className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                     variant=\"filled\">\n                                            <InputLabel htmlFor=\"filled-adornment-password\">Repite tu contraseña\n                                                *</InputLabel>\n                                            <FilledInput\n                                                id=\"signup-password\"\n                                                type={values.showPassword2 ? 'text' : 'password'}\n                                                value={repeatedPassword}\n                                                onChange={(e) => setRepeteadPassword(e.target.value)}\n                                                style={{backgroundColor: \"#FFFFFF\"}}\n                                                endAdornment={\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            aria-label=\"toggle password visibility\"\n                                                            onClick={() => handleClickShowPassword(2)}\n                                                            onMouseDown={handleMouseDownPassword}\n                                                            edge=\"end\"\n                                                        >\n                                                            {values.showPassword2 ? <Visibility/> : <VisibilityOff/>}\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                }\n                                            />\n                                        </FormControl>\n\n                                    </div>\n\n                                    <div className=\"form-group form-check col-12 mb-3 pl-xl-5 pr-xl-5\">\n                                                    <span\n                                                        className=\"btn form-check ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5 form-regi\">\n\n                                                        <FormControlLabel\n                                                            control={\n                                                                <Checkbox className=\"form-check-input form-regi\"\n                                                                          checked={checkedValue}\n                                                                          onChange={handleCheckboxState}\n                                                                          required={true}\n                                                                          name=\"terminosyCondiciones\"/>}\n                                                            label=\"Aceptar términos y condiciones\" required\n                                                            name=\"terminosYCondiciones\"\n                                                        />\n                                                    </span>\n                                    </div>\n\n                                    <div className=\"form-group col-12 d-flex justify-content-center\">\n                                        <ReCAPTCHA sitekey={process.env.REACT_APP_RECAPTCHA}\n                                                   onChange={sendReCAPTCHAValue}/>\n                                    </div>\n\n                                    <div className=\"form-group col-12 mt-3\" id=\"signUpButtonDiv\">\n                                        <button type=\"submit\"\n                                                className=\"btn btn-registro\"\n                                                id=\"signUpButton\"\n                                                disabled={loading}>\n                                            {loading ? (\n                                                <div className=\"spinner-border text-dark\" role=\"status\">\n                                                    <span className=\"sr-only\">Registrando...</span>\n                                                </div>\n                                            ) : \"REGISTRATE\"}\n                                        </button>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </form>\n\n                    </div>\n\n                    <div className=\"modal-footer col-12 btn-footer\"></div>\n\n                </div>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default SignUpModal;","/home/snow/Documentos/ico-web-final/src/components/SignInModal.jsx",["388","389","390","391","392","393"],"import React, {useState} from 'react';\nimport \"firebase/auth\";\nimport swal from 'sweetalert';\nimport {useAuth} from \"../context/AuthContext\";\nimport {NavLink, useHistory} from 'react-router-dom';\nimport \"./dashboard/css/styles.css\";\nimport GoogleButton from 'react-google-button'\nimport TextField from \"@material-ui/core/TextField\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport firebase from 'firebase';\nimport {auth, db} from \"../config/firebase\";\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport FormControl from '@material-ui/core/FormControl';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport SunshineFinder from \"../apis/SunshineFinder\";\nrequire('dotenv').config();\n\nconst SignInModal = () => {\n\n    const history = useHistory();\n    const [email, setEmail] = useState(\"\");\n    const [pass, setPass] = useState(\"\");\n    const {login, currentUser, logout} = useAuth();\n    const [verifiedCaptcha, setVerifiedCaptcha] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n\n    const searchDataInFirestore = async id => {\n        let result = null;\n        await db.collection('credentials').doc(id).get().then(doc => {\n            result = doc.exists ? \"exists\" : \"not-exists\";\n        }).catch(error => {\n            result = \"error\";\n        });\n        return result;\n    }\n\n    const saveDataInFirestore = async (uid, data = {}) => {\n        if (Object.keys(data).length > 0) {\n            /*============GUARDAR DATOS EN FIRESTORE CON GOOGLE===========*/\n            await db.collection(\"credentials\").doc(uid).set({\n                UUID: uid,\n                city: data.city.replace(/<[^>]+>/g, ''),\n                doc: \"Pending\".replace(/<[^>]+>/g, ''),\n                email: data.email.replace(/<[^>]+>/g, ''),\n                name: data.name.replace(/<[^>]+>/g, ''),\n                phone: data.phone === null ? \"Pending\".replace(/<[^>]+>/g, '') : data.phone.replace(/<[^>]+>/g, ''),\n                authType: data.authType.replace(/<[^>]+>/g, ''),\n                birthday: data.birthday.replace(/<[^>]+>/g, ''),\n                country: data.country.replace(/<[^>]+>/g, ''),\n                state: data.state.replace(/<[^>]+>/g, ''),\n                address: data.address.replace(/<[^>]+>/g, ''),\n                suns: 0,\n                countryComplete: data.countryComplete.replace(/<[^>]+>/g, ''),\n                profileStatus: data.profileStatus,\n                addressToken: \"\",\n                privateKey: \"\",\n                fileType: \"\".replace(/<[^>]+>/g, ''),\n                profilePicture: \"\".replace(/<[^>]+>/g, ''),\n                profilePictureStatus: 0,\n            }).then(docRef => {\n                history.push(\"/\");\n                window.location.reload();\n            }).catch((error) => {\n            });\n            /*============GUARDAR DATOS EN FIRESTORE===========*/\n        }\n    }\n\n    const signUpWithGoogle = async () => {\n\n        let provider = new firebase.auth.GoogleAuthProvider();\n        await provider.addScope('https://www.googleapis.com/auth/userinfo.profile');\n        auth.languageCode = 'es';\n        await auth.signInWithPopup(provider).then(async (result) => {\n\n            let user = result.user;\n\n            if (user.emailVerified) {\n\n                let userStatus = await searchDataInFirestore(user.uid);\n                if (userStatus === \"exists\") {\n\n                    history.push(\"/\");\n                    window.location.reload();\n                } else if (userStatus === \"not-exists\") {\n                    await saveDataInFirestore(user.uid, {\n                        city: \"\",\n                        email: user.email,\n                        name: user.displayName,\n                        phone: user.phoneNumber,\n                        authType: \"GOOGLE\",\n                        birthday: \"\",\n                        country: \"\",\n                        state: \"\",\n                        address: \"\",\n                        profileStatus: 0,\n                        countryComplete: \"\"\n                    });\n                } else {\n                    swal({\n                        title: \"Ocurrió un error\",\n                        text: \"Ocurrió un error inesperado, inténtalo de nuevo más tarde\",\n                        icon: \"error\",\n                        button: \"¡Entendido!\",\n                        closeOnClickOutside: false\n                    });\n                }\n\n            } else {\n                user.sendEmailVerification().then(async () => {\n                    await saveDataInFirestore(user.uid, {\n                        city: \"\",\n                        email: user.email,\n                        name: user.displayName,\n                        phone: user.phoneNumber,\n                        authType: \"GOOGLE\",\n                        birthday: \"\",\n                        country: \"\",\n                        state: \"\",\n                        address: \"\",\n                        profileStatus: 0,\n                        countryComplete: \"\"\n                    });\n                }, (error) => {\n\n                });\n                await auth.signOut();\n            }\n        }).catch((error) => {\n            auth.signOut();\n            let errorCode = error.code;\n            let errorMessage = error.message;\n\n            switch (errorCode) {\n                case \"auth/network-request-failed\":\n                    swal({\n                        title: \"Error de red\",\n                        text: \"Un error de red (como tiempo de espera, conexión interrumpida o host inalcanzable) ocurrió\",\n                        icon: \"error\",\n                        button: \"¡Entendido!\",\n                        closeOnClickOutside: false\n                    });\n            }\n        })\n\n    }\n\n    const sendReCAPTCHAValue = async (value) => {\n        const response = await SunshineFinder.post(\"/api/recaptcha\", {\n            captchaValue: value\n        });\n\n        if (response.data.status === \"success\") {\n            setVerifiedCaptcha(true);\n        }\n\n    }\n\n    const signIn = async (e) => {\n        e.preventDefault();\n\n        try {\n            await setLoading(true);\n            await login(email, pass).then(r => {\n\n                if (r.user.emailVerified) {\n                    if (verifiedCaptcha) {\n                        setTimeout(() => {\n                            history.push(\"/\");\n                            window.location.reload();\n                        }, 2000);\n                    } else {\n                        let error = new Error(\"captcha_not_verified\");\n                        error.code = \"captcha_not_verified\";\n                        throw error;\n                    }\n\n                } else {\n                    logout();\n                    let error = new Error(\"email_not_verified\");\n                    error.code = \"email_not_verified\";\n                    throw error;\n                }\n            });\n        } catch (error) {\n            setLoading(false);\n            let errorCode = error.code;\n            logout();\n            switch (errorCode) {\n                case \"auth/user-not-found\":\n                    swal(\"Usuario no encontrado\", \"La cuenta de correo proporcionada no está registrada\", \"warning\");\n                    break;\n\n                case \"auth/wrong-password\":\n                    swal(\"Datos incorrectos\", \"Contraseña incorrecta\", \"warning\");\n                    break;\n\n                case \"auth/invalid-email\":\n                    swal(\"Datos incorrectos\", \"Solo puedes ingresar una cuenta de correo válida\", \"warning\");\n                    break;\n\n                case \"email_not_verified\":\n                    swal(\"Correo no verificado\", \"Revisa tu bandeja de entrada de tu correo y verifica tu cuenta\", \"warning\");\n                    break;\n\n                case \"auth/too-many-requests\":\n                    swal(\"Cuenta desactivada\", \"El acceso a esta cuenta ha sido desactivado temporalmente debido a los intentos de inicio de sesión fallidos, puedes recuperarla reestableciendo tu contraseña o intentarlo más tarde\", \"warning\");\n                    break;\n\n                case \"captcha_not_verified\":\n                    swal(\"Verifica el CAPTCHA\", \"Verifica el CAPTCHA de nuevo para poder continuar\", \"warning\");\n                    break;\n\n                default:\n                    let errorMessage = error.message;\n            }\n        }\n\n        //setLoading(false);\n    }\n\n    const [values, setValues] = useState({\n        amount: '',\n        password: '',\n        weight: '',\n        weightRange: '',\n        showPassword: false,\n    });\n\n    const handleClickShowPassword = () => {\n        setValues({...values, showPassword: !values.showPassword});\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const openForgetPass = async () => {\n        await document.getElementById(\"closeSignInModal\").click();\n    }\n\n    return (\n\n        <div className=\"modal fade\" id=\"signInModal\" data-backdrop=\"static\"\n             data-keyboard=\"false\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\"\n             aria-hidden=\"true\">\n            <div className=\"modal-dialog modal-xl modal-dialog-centered pl-xl-5 pr-xl-5 \">\n                <div className=\"modal-content registrobody   pl-xl-5 pr-xl-5 \">\n\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title col-12 text-light\" id=\"staticBackdropLabel\">Tu cuenta</h5>\n                        <button type=\"button\" id=\"closeSignInModal\" className=\"close\" data-dismiss=\"modal\"\n                                aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n\n                    <div className=\"modal-body col-12 pl-xl-5 pr-xl-5\">\n\n                        <div className=\"form-group col-12 d-flex justify-content-center\">\n                            <GoogleButton\n                                label='Iniciar sesión con Google'\n                                onClick={signUpWithGoogle}\n                                style={{width: 500, borderRadius: 3}}\n                            />\n                        </div>\n\n                        <hr/>\n\n                        <form className=\"form\" onSubmit={signIn}>\n                            <div className=\"container mt-5 pl-xl-5 pr-xl-5\">\n                                <div className=\"row pl-xl-5 pr-xl-5\">\n\n                                    <div\n                                        className=\"input-group input-group-lg col-12 mb-3 pl-xl-5 pr-xl-5\">\n\n                                        <TextField required={true}\n                                                   fullWidth\n                                                   style={{backgroundColor: \"#FFFFFF\", fontWeight: \"bold\"}}\n                                                   className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                   id=\"email\"\n                                                   name=\"email\"\n                                                   value={email}\n                                                   label=\"Correo electrónico\"\n                                                   type=\"text\"\n                                                   onChange={e => setEmail(e.target.value)} variant=\"filled\"/>\n                                    </div>\n\n                                    <div className=\"input-group input-group-lg col-12 pl-xl-5 pr-xl-5\">\n\n                                        <FormControl fullWidth className=\"ml-lg-5 mr-lg-5 ml-xl-5 mr-xl-5\"\n                                                     variant=\"filled\">\n                                            <InputLabel htmlFor=\"filled-adornment-password\">Contraseña *</InputLabel>\n                                            <FilledInput\n                                                id=\"signin-password\"\n                                                type={values.showPassword ? 'text' : 'password'}\n                                                value={pass}\n                                                onChange={e => setPass(e.target.value)}\n                                                style={{backgroundColor: \"#FFFFFF\"}}\n                                                endAdornment={\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            aria-label=\"toggle password visibility\"\n                                                            onClick={handleClickShowPassword}\n                                                            onMouseDown={handleMouseDownPassword}\n                                                            edge=\"end\"\n                                                        >\n                                                            {values.showPassword ? <Visibility/> : <VisibilityOff/>}\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                }\n                                            />\n                                        </FormControl>\n\n                                    </div>\n\n                                    <div\n                                        className=\"input-group col-12 d-flex justify-content-center pl-xl-5 pr-xl-5 mt-3\">\n                                        <ReCAPTCHA sitekey={process.env.REACT_APP_RECAPTCHA}\n                                                   onChange={sendReCAPTCHAValue}/>\n                                    </div>\n\n                                    <div className=\"form-group col-12 mt-4 mb-5\">\n                                        <button type=\"submit\"\n                                                className=\"btn btn-registro\"\n                                                id=\"signInButton\"\n                                                disabled={loading}>\n                                            {loading ? (\n                                                <div className=\"spinner-border text-dark\" role=\"status\">\n                                                    <span className=\"sr-only\">Entrando...</span>\n                                                </div>\n                                            ) : \"ENTRAR\"}\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n\n                        <div className=\"container pl-xl-5 pr-xl-5\">\n                            <div className=\"row pl-xl-5 pr-xl-5\">\n                                <div className=\"col-12 mb-5\">\n\n                                    <a style={{color: \"white\"}} href=\"#\" onClick={openForgetPass} data-toggle=\"modal\"\n                                       data-target=\"#recoveryModal\">\n                                        <h6>\n                                            ¿Olvidaste la contraseña?\n                                        </h6>\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div className=\"modal-footer col-12 btn-footer\"></div>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n\nexport default SignInModal;","/home/snow/Documentos/ico-web-final/src/components/dashboard/js/canvasUtils.js",[],"/home/snow/Documentos/ico-web-final/src/components/dashboard/js/encrypt.js",[],"/home/snow/Documentos/ico-web-final/src/components/Video.jsx",["394"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nconst Video = () => {\n    return (\n        <div className=\"row   \">\n\n            <div className=\"col-12 videosunrep mt-5 p-0\">\n          \n                <iframe src=\"https://www.youtube.com/embed/O5c2yMxyL54\" frameBorder=\"0\" \n                        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                        allowFullScreen></iframe>\n                       \n            </div>\n            \n\n        </div>\n    );\n};\n\nexport default Video;","/home/snow/Documentos/ico-web-final/src/components/Countdown.jsx",["395","396"],"import React, {useEffect} from 'react';\nimport rectangulo1 from \"../images/rectangulo1.svg\";\nimport tecnologias from \"../images/tecnologias.svg\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport contador from \"../js/cuentaregresiva\";\nimport Zoom from 'react-reveal/Zoom';\nimport { useTranslation } from 'react-i18next';\n\n\nconst Countdown = () => {\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        contador(\"contador\",\n            \"Feb 28  , 2021 16:30:00\",\n            \"...\");\n    }, []);\n\n    return (\n        <div className=\"row fondosec3-alter fondosec3\">\n\n            <div className=\" col-12 \">\n                <p className=\"sec3con\">\n                    {t('CountdownL.Title')}\n                </p><br/>\n                <div className=\"container-contador\">\n                <p id=\"contador\" className=\"\"></p>\n                </div>\n            </div>\n\n            <ul className=\"rectangulo1   text-center\">\n                <li className=\" cont-li-cap\">\n                    <img src={rectangulo1} className=\"rectanguloimg \"/>\n                </li>\n\n                <li className=\" row cap justify-content-around text-left\">\n                    <p className=\"col-4\">SOFT CAP<br/><p className=\"cap-min\">$ 15 M USD</p></p>\n                    <p className=\"col-4\">HARD CAP<br/> <p className=\"cap-min\">$ 250 M USD</p></p>\n\n                </li>\n                      <Zoom>\n                <li className=\" tecno \">\n                   \n                        <img src={tecnologias} className=\" img-tecno  \"/>\n                   \n                </li>\n                </Zoom>\n            </ul>\n\n        </div>\n    );\n};\n\nexport default Countdown;","/home/snow/Documentos/ico-web-final/src/components/Soporte.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/PreguntasFrecuentes.jsx",["397"],"import React from 'react';\nimport Depmason from \"../images/depmason.svg\";\nimport Imgpreg from \"../images/imgpreg.svg\";\nimport Depmenos from \"../images/depmenos.svg\";\nimport Fade from 'react-reveal/Fade';\n\n\nimport {useTranslation} from 'react-i18next';\n\nconst PreguntasFrecuentes = () => {\n\n    const {t} = useTranslation();\n\n    const changeIcon = (imageID) => {\n        let image = document.getElementById(imageID)\n        if (image.src.match(\"on\")) {\n            image.src = Depmenos;\n        } else {\n            image.src = Depmason;\n        }\n    }\n\n    const items = [\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.0.Title'),\n            text: t('FAQ.Items.0.Text'),\n            id: \"myImageA\"\n        },\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.1.Title'),\n            text: t('FAQ.Items.1.Text'),\n            id: \"myImageB\"\n        },\n      \n        {\n            icon: Depmason,\n            title: t('FAQ.Items.2.Title'),\n            text: t('FAQ.Items.2.Text'),\n            id: \"myImageD\"\n        },\n        {\n            icon: Depmason,\n            title: t('FAQ.Items.3.Title'),\n            text: t('FAQ.Items.3.Text'),\n            id: \"myImageE\"\n        },\n    ]\n\n    return (\n        <div className=\"row fondo-preg\">\n            <p className=\"frecprec\">{t('FAQ.Title')}</p>\n            <div className=\"col-lg-6 col-md-6 col-12 preguntas\">\n\n                {\n                    items.map((value, index) => (\n                        <div key={index}>\n                            <Fade left cascade>\n                            <p className=\"\">\n                                <button className=\"btn btn-preg1\" onClick={() => changeIcon(value.id)}\n                                        type=\"button\" data-toggle=\"collapse\" data-target={\"#\"+value.id+\"target\"}\n                                        aria-expanded=\"false\" aria-controls=\"collapseExample\">\n                                    <img src={value.icon} id={value.id} alt=\"\" className=\"mas\"/>{value.title}\n                                </button>\n                            </p>\n                            <div className=\"collapse btn-res1 \" id={value.id+\"target\"}>\n                                <div className=\"text-preg\">\n                                    {value.text}\n                                </div>\n                            </div>\n                            </Fade>\n                        </div>\n                    ))\n                }\n\n            </div>\n\n                        <div className=\"col-md-6 col-12\">\n                            <img src={Imgpreg} id=\"\" className=\"PREGIMG d-none d-lg-block d-md-block\"/>\n\n                        </div>\n\n        </div>\n    );\n};\n\nexport default PreguntasFrecuentes;","/home/snow/Documentos/ico-web-final/src/components/Newsletter.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Ventajas.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/MapaApp.jsx",["398","399","400","401","402","403","404","405","406","407","408","409"],"import React from 'react';\nimport Textmoneda from \"../images/textmoneda.svg\";\nimport Nuestraapp from \"../images/nuestraapp.svg\";\nimport Google from \"../images/google.png\";\nimport Apple from \"../images/apple.png\";\nimport Mapa from \"../images/mapacirculo.svg\"\nimport Mapamini from \"../images/mapacirculomini.svg\"\nimport monedafinal from \"../images/monedafinal.png\";\nimport Boton1token from \"../images/boton1token.svg\";\nimport Boton2token from \"../images/boton2token.svg\";\nimport Boton3token from \"../images/boton3token.svg\";\nimport Boton4token from \"../images/boton4token.svg\";\nimport Boton5token from \"../images/boton5token.svg\";\nimport Fade from 'react-reveal/Fade';\n\nimport {useTranslation} from 'react-i18next';\n\nconst MapaApp = () => {\n\n    const {t} = useTranslation();\n\n    return (\n        <>\n        <Fade left>\n            <div className=\"row mapacon\">\n                <div className=\"col-12\">\n                    <p className=\"dis-fondos\">{t('MapaApp.Funding.Title')}</p>\n                    <p className=\"dis-tokens\">{t('MapaApp.Tokens.Title')}</p>\n                    <img src={Mapa} className=\" mapaes d-none d-md-flex\"/>\n                    <img src={Mapamini} className=\" mapaes d-flex d-md-none\"/>\n                    <p className=\"por-syn\">40% <br/><p className=\"por-syn2\">{t('MapaApp.Funding.Symphony')}</p></p>\n                    <p className=\"por-hawk\">30% <br/><p className=\"por-hawk2\">{t('MapaApp.Funding.Hawk')}</p></p>\n                    <p className=\"por-lion\">30% <br/><p className=\"por-lion2\">{t('MapaApp.Funding.Lion')}</p></p>\n\n                    <p className=\"por-reinversion\">70% <br/><p className=\"por-reinversion2\">{t('MapaApp.Tokens.Reinvestment')}</p></p>\n                    <p className=\"por-sunholders\">27% <br/><p className=\"por-sunholders2\">{t('MapaApp.Tokens.Sunholders')}</p></p>\n                    <p className=\"por-equipo\">3% <br/><p className=\"por-equipo2\">{t('MapaApp.Tokens.SUNTeam')}</p></p>\n                    <p className=\"text-center sun-usd\">{t('MapaApp.Price')}</p>\n\n                </div>\n            </div>\n            <div className=\"row text-moneda pt-3 pb-5\">\n                <div className=\"col-12 d-none d-md-block\">\n                    <h1 className=\"titu-token text-center\">{t('MapaApp.SunshineToken.Title')}</h1>\n                    <p className=\"cont-text-moneda\">\n                        <img src={Textmoneda} className=\" col-6\" align=\"left\"/>\n                        <p className=\"parrafos-tokens\">{t('MapaApp.SunshineToken.Items.0')}</p>\n                        <p className=\"parrafos-tokens\">{t('MapaApp.SunshineToken.Items.1')}</p>\n                        <p className=\"parrafos-tokens parra-3\">{t('MapaApp.SunshineToken.Items.2')}</p>\n                        <p className=\"parrafos-tokens\">{t('MapaApp.SunshineToken.Items.3')}</p>\n                        <p className=\"parrafos-tokens\">{t('MapaApp.SunshineToken.Items.4')}</p>\n                    </p>\n                    \n                </div>\n                <div className=\"col-12 cont-token d-block d-md-none \">\n                    <h1 className=\"titu-token text-center\">{t('MapaApp.SunshineToken.Title')}</h1>\n                    <img src={monedafinal} className=\" img-token   col-6\" align=\"left\"/>\n                    \n                    <div id=\"accordion\">\n\n<div class=\"btn card-token card \">\n  <div class=\"\">\n    <a class=\" btn-img-token1 card-link \" data-toggle=\"collapse\" href=\"#collapseOne\">\n    <img src={Boton1token} className=\" btn-img-token \" />\n    </a>\n  </div>\n  <div id=\"collapseOne\" class=\"collapse show position-absolute cont-text-token \" data-parent=\"#accordion\">\n    <div class=\"card-body \">\n    <p className=\"\">{t('MapaApp.SunshineToken.Items.0')}</p>\n    </div>\n  </div>\n</div>\n\n<div class=\"btn card-token card\">\n  <div class=\"\">\n    <a class=\"  btn-img-token2 collapsed card-link\" data-toggle=\"collapse\" href=\"#collapseTwo\">\n    <img src={Boton2token} className=\" btn-img-token  \" />\n    </a>\n  </div>\n  <div id=\"collapseTwo\" class=\"collapse position-absolute cont-text-token \" data-parent=\"#accordion\">\n    <div class=\"card-body \">\n    <p className=\"\">{t('MapaApp.SunshineToken.Items.1')}</p>\n    </div>\n  </div>\n</div>\n\n<div class=\"btn  card-token  card\">\n  <div class=\"\">\n    <a class=\"collapsed btn-img-token3 card-link\" data-toggle=\"collapse\" href=\"#collapseThree\">\n    <img src={Boton3token} className=\" btn-img-token  \" />\n    </a>\n  </div>\n  <div id=\"collapseThree\" class=\"collapse position-absolute cont-text-token \" data-parent=\"#accordion\">\n    <div class=\"card-body\">\n    <p className=\"\">{t('MapaApp.SunshineToken.Items.2')}</p>\n    </div>\n  </div>\n</div>\n\n<div class=\"btn card-token card\">\n  <div class=\"\">\n    <a class=\"collapsed card-link\" data-toggle=\"collapse\" href=\"#collapsefour\">\n    <img src={Boton4token} className=\"btn-img-token btn-img-token4  \" />\n    </a>\n  </div>\n  <div id=\"collapsefour\" class=\"collapse position-absolute cont-text-token \" data-parent=\"#accordion\">\n    <div class=\"card-body\">\n    <p className=\"\">{t('MapaApp.SunshineToken.Items.3')}</p>\n    </div>\n  </div>\n</div>\n\n<div class=\"btn card-token card\">\n  <div class=\"\">\n    <a class=\"collapsed card-link\" data-toggle=\"collapse\" href=\"#collapsefive\">\n    <img src={Boton5token} className=\" btn-img-token btn-img-token5 \" />\n    </a>\n  </div>\n  <div id=\"collapsefive\" class=\"collapse position-absolute cont-text-token \" data-parent=\"#accordion\">\n    <div class=\"card-body\">\n    <p className=\"\">{t('MapaApp.SunshineToken.Items.4')}</p>\n    </div>\n  </div>\n</div>\n\n</div>\n                    \n                    \n                </div>\n            </div>\n\n            <div className=\"row textappcon \">\n                <div className=\"col-12\">\n                    <p className=\" text-titu-app\">{t('MapaApp.AppDownload.Title')}<h2 className=\"text-center\">{t('MapaApp.AppDownload.Subtitle')}</h2></p>\n                    <div className=\" ventajas-app d-none d-md-block\">\n                        <ul className=\"\">\n                            <li>{t('MapaApp.AppDownload.Items.0')}</li>\n                            <li>{t('MapaApp.AppDownload.Items.1')}</li>\n                            <li>{t('MapaApp.AppDownload.Items.2')}</li>\n                        </ul>\n                    </div>\n                    <p className=\"  disponible-text\">{t('MapaApp.AppDownload.Avaliable')}:</p>\n                    <img src={Nuestraapp} className=\" text-App-g \"/>\n                    \n\n                </div>\n                <div className=\"col-12 goo-aple\">\n\n                    <img src={Google} className=\"img-goo\"/>\n                </div>\n                <div className=\"col-12 goo-aple\">\n\n                    <img src={Apple} className=\"img-aple d-flex \"/>\n                </div>\n                <p className=\" constru-cartera \">¡{t('MapaApp.AppDownload.Footer')}!</p>\n            </div>\n            </Fade>\n        </>\n    );\n};\n\nexport default MapaApp;","/home/snow/Documentos/ico-web-final/src/components/WhitepaperHome.jsx",[],"/home/snow/Documentos/ico-web-final/src/routes/Home.jsx",["410","411","412","413","414","415"],"import React, {Suspense, lazy, useEffect, useState} from 'react';\nimport '../App.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport monedag from \"../images/moneda.gif\";\nimport Banner from \"../components/Banner\";\nimport {useAuth} from \"../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\n/*const Banner =lazy(()=>import ('./Banner'));*/\nconst Video = lazy(() => import ('../components/Video'));\nconst Countdown = lazy(() => import ('../components/Countdown'));\nconst Proyectos = lazy(() => import ('../components/ProyectosComponent'));\nconst Soporte = lazy(() => import ('../components/Soporte'));\nconst PreguntasFrecuentes = lazy(() => import ('../components/PreguntasFrecuentes'));\nconst Newsletter = lazy(() => import ('../components/Newsletter'));\nconst MapaApp = lazy(() => import ('../components/MapaApp'));\nconst Ventajas = lazy(() => import ('../components/Ventajas'));\nconst WhitepaperHome = lazy(() => import ('../components/WhitepaperHome'));\nconst Footer = lazy(() => import ('../components/Footer'));\n\n\nconst Home = () => {\n\n    const {currentUser, logout} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {\n        }\n    }, []);\n\n    return (\n        <div className=\"container-fluid\" className=\"\">\n            <Banner/>\n            <Suspense fallback={\n                <div className=\"  container mt-5 text-center   justify-content-center\">\n                    <img className=\"moneda-carga\" align=\"top\" src={monedag}/><p className=\"\">CARGANDO...</p>\n                </div>\n            }>\n                <Video/>\n                <Countdown/>\n                <WhitepaperHome/>\n                <Ventajas/>\n                <Proyectos/>\n                <MapaApp/>\n                <Soporte/>\n                <PreguntasFrecuentes/>\n                <Newsletter/>\n                <Footer/>\n\n            </Suspense>\n        </div>\n    )\n}\n\n\nexport default Home;\n\n","/home/snow/Documentos/ico-web-final/src/components/Banner.jsx",["416","417","418","419","420","421"],"/home/snow/Documentos/ico-web-final/src/components/Footer.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/Navigation.jsx",["422","423","424","425","426","427","428","429","430","431"],"import '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport logonav from '../images/logonav.svg';\nimport React, {useState} from 'react';\nimport \"firebase/auth\";\nimport {NavLink, useHistory} from 'react-router-dom';\nimport 'firebase/firestore';\nimport SignUpModal from \"./SignUpModal\";\nimport SignInModal from \"./SignInModal\";\nimport '../js/mostrarmenu';\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\nimport USAFLAG from \"../images/usa_flag_icon.svg\";\nimport MEXICOFLAG from \"../images/mexico_flag_icon.svg\";\nimport {useAuth} from \"../context/AuthContext\";\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PasswordRecoveryModal from \"./PasswordRecoveryModal\";\n\nconst Navigation = () => {\n    const { t } = useTranslation();\n    const history = useHistory();\n    const {currentUser, logout} = useAuth();\n    const [logged, setLogged] = useState(currentUser ? true : false);\n\n    function handleClick(lang) {\n        i18next.changeLanguage(lang)\n    }\n\n    async function handleLogout() {\n        try {\n            await logout();\n            window.location.reload();\n            history.push(\"/Home\");\n        } catch {\n        }\n    }\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick2 = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (e) => {\n        setAnchorEl(null);\n        console.log(e);\n        switch (e) {\n            case \"index\":\n                history.push(\"./\");\n                break;\n            case \"profile\":\n                history.push(\"./Profile\");\n                break;\n            case \"logout\":\n                handleLogout();\n                break;\n            case \"settings\":\n                history.push(\"./Settings\");\n                break;\n        }\n    };\n\n    const renderNavbar = () => {\n        if(logged) {\n\n            return (\n                <nav className=\"navbar navbar-expand-lg navbar-light fixed-top \" id=\"navbar\">\n                    <div className=\"container-fluid\">\n                        <NavLink className=\"navbar-brand navegacion  \" to=\"/\">\n                            <img className=\"  \" src={logonav}/>\n                        </NavLink>\n                        <button className=\"navbar-toggler mr-auto\" id=\"boton-nav\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar-menu\"\n                                aria-controls=\"navbar-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div className=\" collapse navbar-collapse\" id=\"navbar-menu\" >\n                            <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                                <li className=\"nav-item\">\n                                    <h5>SUNSHINE</h5>\n                                </li>\n\n                            </ul>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('en')} data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={USAFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('es')} data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={MEXICOFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                            <div>\n                                <Button aria-controls=\"simple-menu\" variant=\"contained\" style={{backgroundColor: \"#0655af\", color: \"white\"}} aria-haspopup=\"true\" onClick={handleClick2}>\n                                    {currentUser ? currentUser.email : \"Invitado\"} <ExpandMoreIcon />\n                                </Button>\n                                <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={anchorEl}\n                                    keepMounted\n                                    open={Boolean(anchorEl)}\n                                    onClose={handleClose}\n                                >\n                                    <MenuItem id=\"index\" onClick={e => handleClose(e.target.id)}>Inicio</MenuItem>\n                                    <MenuItem id=\"profile\" onClick={e => handleClose(e.target.id)}>Perfil</MenuItem>\n                                    <MenuItem id=\"settings\" onClick={e => handleClose(e.target.id)}>Ajustes</MenuItem>\n                                    <MenuItem id=\"logout\" onClick={e => handleClose(e.target.id)}>Cerrar sesión</MenuItem>\n                                </Menu>\n                            </div>\n\n                        </div>\n                    </div>\n                </nav>\n            )\n\n        } else {\n            return(\n                <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"navbar\" >\n                    <div className=\"container-fluid\">\n                        <NavLink className=\"navbar-brand navegacion  \" to=\"/\">\n                            <img className=\"  \" src={logonav}/>\n                        </NavLink>\n                        <button className=\"navbar-toggler mr-auto\" id=\"boton-nav\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar-menu\"\n                                aria-controls=\"navbar-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div className=\" collapse navbar-collapse\" id=\"navbar-menu\" >\n                            <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                                <li className=\"nav-item\">\n                                    <NavLink className=\"navbar-brand nav-link navegacion\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\"\n                                             to=\"./Acerca\">{t('Navbar.Acerca')}\n                                    </NavLink>\n                                </li>\n                                <li className=\"nav-item \">\n\n                                    <NavLink className=\"navbar-brand nav-link navegacion\" tap-index=\"-1\"\n                                             activeClassName=\"active\" area-disabled=\"true\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\"\n                                             to=\"./Roaptomap\">{t('Navbar.RoadToMap')}\n                                    </NavLink>\n                                </li>\n                                <li className=\"nav-item \">\n\n                                    <NavLink className=\"navbar-brand nav-link navegacion\" activeClassName=\"active\"\n                                             area-disabled=\"true\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\"\n                                             to=\"./ProyectosComponent\">{t('Navbar.Proyectos')}\n                                    </NavLink>\n                                </li>\n                            </ul>\n                            <a href=\"#\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <button type=\"button\" id=\"signInButton\" className=\"navsesion btn btn-link\" data-toggle=\"modal\" data-target=\"#signInModal\"\n                                >{t('Navbar.SignIn')}\n                                </button>\n                            </a>\n\n                            <a href=\"#\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <button type=\"button\" className=\"navsesion btn btn-link\" data-toggle=\"modal\" data-target=\"#signUpModal\"\n                                >\n                                    {t('Navbar.SignUp')}\n                                </button>\n                            </a>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('en')} data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={USAFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                            <a href=\"#\" className=\"btn btn-link\" onClick={() => handleClick('es')} data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n                                <img src={MEXICOFLAG} className=\"img-fluid\" style={{width: 50}} alt=\"\"/>\n                            </a>\n\n                        </div>\n                        <SignUpModal />\n                        <SignInModal />\n                        <PasswordRecoveryModal/>\n                    </div>\n                </nav>\n            )\n        }\n    }\n\n    return (\n\n        <>\n            {renderNavbar()}\n        </>\n    )\n}\nexport default Navigation;","/home/snow/Documentos/ico-web-final/src/components/ProyectosComponent.jsx",["432","433","434"],"import React, {useEffect} from 'react';\nimport Celsym from \"../images/celsym.svg\";\nimport circulo1 from \"../images/circulo1.svg\";\nimport Celhawk from \"../images/celhawk.svg\";\nimport circulo2 from \"../images/circulo2.svg\";\nimport Cellyon from \"../images/cellyon.svg\";\nimport circulo3 from \"../images/circulo3.svg\";\nimport Engranaje from \"../images/engranaje.svg\";\nimport fococontorno from \"../images/fococontorno.svg\";\nimport Engrane1 from \"../images/engrane1.svg\";\nimport Engrane2 from \"../images/engrane2.svg\";\nimport Engrane3 from \"../images/engrane3.svg\";\nimport Engrane4 from \"../images/engrane4.svg\";\nimport Engrane5 from \"../images/engrane5.svg\";\nimport Engrane6 from \"../images/engrane6.svg\";\nimport Engrane7 from \"../images/engrane7.svg\";\nimport Zoom from 'react-reveal/Zoom';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from \"react-router-dom\";\nimport {useAuth} from \"../context/AuthContext\";\n\nconst ProyectosComponent = () => {\n\n    const {t} = useTranslation();\n    const {currentUser, logout} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {}\n    }, []);\n\n    return (\n        <div>\n            \n            <div className=\"row\">\n                <div className=\"col-12 sec6\">\n                    <span className=\"titulo6 \">{t('Projects.Title')}</span>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12 contenedor-engra  \">\n                    <div className=\" d-flex justify-content-start \">\n                        <button className=\" btn fap-btn2 \" type=\"button\" data-toggle=\"modal\"\n                                data-target=\"#bd-example-modal-lg\">\n                                   \n                            <div className=\"modal fade modal-fullscreen bd-example-modal-lg\" id=\"bd-example-modal-lg\"\n                                 data-backdrop=\"static\" data-keyboard=\"false\"\n                                 tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\n                                 aria-hidden=\"true\">\n                                <div className=\"modal-dialog modal-xl modal-dialog-centered\">\n                                    <button hidden type=\"button\" id=\"closeSynmphonyModal\" className=\"close\" data-dismiss=\"modal\"\n                                            aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                <Zoom>\n                                    <div className=\"modal-content  modal-sym \">\n                                    \n                                        <div className=\"modal-body row container-fluid \">\n\n                                            <div className=\"col-12 col-xl-4\">\n\n                                                <img src={Celsym} alt=\"\" className=\"modal-imgsym img-fluid \"\n                                                />\n                                            </div>\n                                            <div className=\"col-12 col-xl-8\">\n\n                                                 <span className=\"modal-titu\">  {t('Projects.Symphony.ModalTitle')}\n                                                     <p className=\"modal-text\">({t('Projects.Symphony.Type')})\n                                                         <p className=\"modal-cuerpo\">\n                                                            {t('Projects.Symphony.Text')}\n                                                         </p>\n                                                     </p>\n                                                 </span>\n\n                                            </div>\n                                        </div>\n                                        \n                                    </div>\n                                    </Zoom>\n                                </div>\n                            </div>\n                            \n                            <img src={circulo1} className=\"fap-btn2-1\" alt=\"\"/>\n                            <svg className=\"svg1\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n                                 width=\"70mm\" height=\"70mm\" viewBox=\"0 0 120 120\">\n                                <circle className=\"circle1\" cx=\"60\" cy=\"60\" r=\"50\"\n                                        fill=\"transparent\"/>\n                            </svg>\n                            <p className=\"textbtn2\"> SYMPHONY</p></button>\n                        <br/>\n                        <div className=\"con-txtbtn\">\n                            <p className=\" textsyn\"><br/><br/><br/><br/>\n                                <br/><br/><br/> {t('Projects.Symphony.ModalTitle')} <br/></p><p\n                            className=\"mintext\">({t('Projects.Symphony.Type')})</p>\n                        </div>\n                    </div>\n\n                    <div className=\"col-12 d-flex justify-content-center \">\n                        <button className=\"btn  fap-btn3  \" type=\"button\" data-toggle=\"modal\"\n                                data-target=\".bd-example-modal-lg3\">\n                            <div className=\"modal  fade modal-fullscreen bd-example-modal-lg3\" tabIndex=\"-1\" role=\"dialog\"\n                                 aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\">\n                                <div\n                                    className=\"modal-dialog modal-cont modal-dialog-centered modal-dialog-scrollable  modal-xl \">\n                                    <div className=\" modal-content p-0 modal-sym \">\n                                        <div className=\"modal-body row container-fluid \">\n\n\n                                            <div className=\"col-lg-4 col-12 justify-content-center\">\n\n                                                <img src={Celhawk} alt=\"\" className=\"modal-imgsym img-fluid \"\n                                                />\n                                            </div>\n                                            <div className=\"col-lg-8 col-12\">\n\n                                                 <span className=\"modal-titu\"> {t('Projects.Hawk.ModalTitle')}\n                                                     <p className=\"modal-text\">{t('Projects.Hawk.Type')}\n                                                         <p className=\"modal-cuerpo\">{t('Projects.Hawk.Text')}</p>\n                                                     </p>\n                                                 </span>\n\n                                            </div>\n\n\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <img src={circulo2} className=\"fap-btn3-2\" alt=\"\"/>\n                            <svg className=\"svg2\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n                                 width=\"70mm\" height=\"70mm\" viewBox=\"0 0 120 120\">\n                                <circle cx=\"60\" className=\"circle2\" cy=\"60\" r=\"50\"\n                                        fill=\"transparent\"/>\n                            </svg>\n                            <p className=\"textbtn3\"> HAWK</p></button>\n                        <p className=\"textsyn2\"><br/> <br/> <br/>{t('Projects.Hawk.ModalTitle')}</p><p\n                        className=\" mintext2\">{t('Projects.Hawk.Type')}</p></div>\n\n\n                    <div className=\"d-flex justify-content-end\">\n\n                        <button className=\"btn   fap-btn4\"\n                                type=\"button\" data-toggle=\"modal\"\n                                data-target=\".bd-example-modal-lg2\">\n                            <div className=\"modal  fade modal-fullscreen bd-example-modal-lg2\" tabIndex=\"-1\" role=\"dialog\"\n                                 aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\">\n                                <div className=\"modal-dialog modal-cont modal-xl\">\n                                    <div className=\" modal-content modal-sym \">\n                                        <div className=\"row container-fluid \">\n\n                                            <div className=\"col-lg-3 col-12 cont-cel\">\n\n                                                <img src={Cellyon} alt=\"\" className=\"modal-imgsym img-fluid\"\n                                                />\n                                            </div>\n                                            <div className=\"col-lg-9 col-12\">\n\n                                             <span className=\"modal-titu\"> {t('Projects.Lion.ModalTitle')}\n                                                 <p className=\"modal-text\"> {t('Projects.Lion.Type')}<p\n                                                     className=\"modal-cuerpo\">\n                                             {t('Projects.Lion.Text')}\n                                             </p></p>\n\n                                             </span>\n\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <img src={circulo3} className=\"fap-btn4-3\" alt=\"\"/>\n                            <svg className=\"svg3\" version=\"1.1\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 width=\"70mm\" height=\"70mm\" viewBox=\"0 0 120 120\">\n                                <circle cx=\"60\" cy=\"60\" r=\"50\"\n                                        fill=\"transparent\"/>\n                            </svg>\n                            <p className=\"textbtn4\"> LION</p>\n\n                        </button>\n                        <p className=\"textsyn3\"><br/>{t('Projects.Lion.ModalTitle')}</p><p\n                        className=\" mintext3\">{t('Projects.Lion.Type')}</p>\n                    </div>\n                    <img src={Engranaje} alt=\"\" className=\"engranaje engranejegris\"/>\n\n                    <div className=\"row\">\n                        <div className=\"col-6 focoenv-cont\">\n                            <img src={fococontorno} alt=\"foco\" className=\"focoenv\"/>\n                            <img src={Engrane1} alt=\"\" className=\"engrane1foc engranaje\"/>\n                            <img src={Engrane2} alt=\"\" className=\"engrane2foc engranaje\"/>\n                            <img src={Engrane3} alt=\"\" className=\"engrane3foc engranaje\"/>\n                            <img src={Engrane4} alt=\"\" className=\"engrane4foc engranaje\"/>\n                            <img src={Engrane5} alt=\"\" className=\"engrane5foc engranaje\"/>\n                            <img src={Engrane6} alt=\"\" className=\"engrane6foc engranaje\"/>\n                            <img src={Engrane7} alt=\"\" className=\"engrane7foc engranaje\"/>\n\n                        </div>\n                    </div>\n\n                </div>\n\n\n            </div>\n       \n        </div>\n    );\n};\n\nexport default ProyectosComponent;","/home/snow/Documentos/ico-web-final/src/routes/Proyectos.jsx",["435","436","437","438"],"import '../App.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, {Component, useEffect, useState} from 'react';\nimport Footer from '../components/Footer';\nimport ProyectosComponent from \"../components/ProyectosComponent\";\nimport Roll from 'react-reveal/Roll';\n\n\n\nconst Proyectos = () => {\n    return (\n        \n        <div className=\"mt-5\">\n           \n            <ProyectosComponent />\n           \n            <Footer/>\n        </div>\n       \n    )\n}\n\nexport default Proyectos\n    ","/home/snow/Documentos/ico-web-final/src/config/firebase.js",[],"/home/snow/Documentos/ico-web-final/src/routes/Roaptomap.jsx",["439","440","441","442","443"],"import '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, {Component, useEffect} from \"react\";\nimport Footer from '../components/Footer';\nimport DemoCarousel from '../components/Carousel.jsx';\nimport maparoad from '../images/road-map.png';\nimport monedafinal from \"../images/monedafinal.png\";\nimport {useTranslation} from 'react-i18next';\nimport lineascar from \"../images/lineas.svg\";\nimport {useAuth} from \"../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\nconst RoaptoMapa = () => {\n    const {t} = useTranslation();\n    const {currentUser, logout} = useAuth();\n    const history = useHistory();\n\n    useEffect(() => {\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {}\n    }, []);\n\n    return (\n\n        <div className=\" road \">\n            <div className=\"row \">\n            <img  className=\"img-fluid linea-car-1 d-flex d-md-none\"src={lineascar} alt=\"linacarrusel\"/>\n                <p className=\"text-roap-map  \">\n                    <h1 align=\"center\">ROAD MAP</h1>\n                   \n                    <p className=\"text-roap-1 d-none d-md-flex\">{t('RoadToMap.0')}</p>\n                    <p className=\"text-roap-2 d-none d-md-flex\">{t('RoadToMap.1')}</p>\n                    <p className=\"text-roap-3 d-none d-md-flex\">{t('RoadToMap.2')}</p>\n                    <p className=\"text-roap-4 d-none d-md-flex\">{t('RoadToMap.3')}</p>\n                    <p className=\"text-roap-5 d-none d-md-flex\">{t('RoadToMap.4')}</p>\n                    <p className=\"text-roap-6 d-none d-md-flex\">{t('RoadToMap.5')}</p>\n                    <p className=\"text-roap-7 d-none d-md-flex\">{t('RoadToMap.6')}</p>\n                    <p className=\"text-roap-8 d-none d-md-flex\">{t('RoadToMap.7')}</p>\n                    \n                </p>\n                \n                <img src={maparoad} className=\" d-none d-md-flex  maparoad \" alt=\"\"/>\n                 \n            </div>\n           \n<DemoCarousel/>\n            <Footer/>\n        </div>\n\n\n    )\n}\n\n\nexport default RoaptoMapa;","/home/snow/Documentos/ico-web-final/src/components/Carousel.jsx",["444","445","446","447","448","449","450","451","452","453","454","455","456"],"\r\nimport maparoad from '../images/road-map.png';\r\nimport monedafinal from \"../images/monedafinal.png\";\r\nimport fondocarro from \"../images/fondo-carro.svg\";\r\nimport fondocarro2 from \"../images/fondo-carro2.svg\";\r\nimport fondocarro3 from \"../images/fondo-carro3.svg\";\r\nimport fondocarro4 from \"../images/fondo-carro4.svg\";\r\nimport fondocarro5 from \"../images/fondo-carro5.svg\";\r\nimport fondocarro6 from \"../images/fondo-carro6.svg\";\r\nimport fondocarro7 from \"../images/fondo-carro7.svg\";\r\nimport fondocarro8 from \"../images/fondo-carro8.svg\";\r\n\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport {useTranslation} from 'react-i18next';\r\nimport { Carousel, showArrows, onChange, onClickItem, onClickThumb } from \"react-responsive-carousel\";\r\nimport \"../css/carrousel.css\";\r\n\r\n\r\nconst DemoCarousel = () => {\r\n    const {t} = useTranslation();\r\n        return (\r\n            \r\n            <Carousel  className=\"d-block  d-md-none\"showArrows={true} infiniteLoop autoPlay\r\n            emulateTouch={true}\r\n             transitionTime={600}onChange={onChange} onClickItem={onClickItem} onClickThumb={onClickThumb} >\r\n                \r\n                <div className=\"cont-car-carrusel \">\r\n                <img className=\"img-fluid\" src={fondocarro} />\r\n                   \r\n                   \r\n                    <p className=\"legend\">{t('RoadToMap.0')}</p>\r\n                </div>\r\n                <div className=\"cont-car-carrusel \">\r\n                    <img className=\" img-fluid\" src={fondocarro3} />\r\n                    <p className=\"legend\">{t('RoadToMap.1')}</p>\r\n                </div>\r\n                <div className=\"cont-car-carrusel \">\r\n                    <img className=\" img-fluid\" src={fondocarro2} />\r\n                    <p className=\"legend\">{t('RoadToMap.2')}</p>\r\n                </div>\r\n                <div className=\"cont-car-carrusel \">\r\n                    <img  className=\" img-fluid\" src={fondocarro4} />\r\n                    <p className=\"legend\">{t('RoadToMap.3')}</p>\r\n                </div>\r\n                <div className=\"cont-car-carrusel \">\r\n                    <img className=\" img-fluid\" src={fondocarro5} />\r\n                    <p className=\"legend\">{t('RoadToMap.4')}</p>\r\n                </div>\r\n                <div className=\"cont-car-carrusel\">\r\n                    <img className=\" img-fluid\" src={fondocarro6} />\r\n                    <p className=\"legend\">{t('RoadToMap.5')}</p>\r\n                </div>\r\n                <div className=\"cont-car-carrusel\">\r\n               \r\n                    <img className=\"\" src={fondocarro7} />\r\n                    <p className=\"legend\">{t('RoadToMap.6')}</p>\r\n                </div>\r\n                <div className=\"cont-car-carrusel\">\r\n               \r\n                    <img className=\" img-fluid\" src={fondocarro8} />\r\n                    <p className=\"legend\">{t('RoadToMap.7')}</p>\r\n                </div>\r\n            </Carousel>\r\n        );\r\n        }\r\n\r\n\r\nexport default DemoCarousel;","/home/snow/Documentos/ico-web-final/src/routes/Pdf.jsx",["457"],"import React, { useState} from 'react';\nimport '../App.css';\nimport '../css/whitepaper.css';\nimport Docpdf from '../docs/Avance.pdf';\nimport Loader from '../components/Loader';\n\nimport {Document, Page} from 'react-pdf';\nimport {pdfjs} from 'react-pdf';\n\nimport ControlPanel from '../components/ControlPanel';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n\n\n\n\nconst Pdf = ()=>{\n    \n    const [numPages, setNumPages] = useState(null);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [isLoading, setIsLoading] =useState(true);\n   const [scale,setScale]=useState(1.0);\n\n    function onDocumentLoadSuccess({ numPages }) {\n        setNumPages(numPages);\n        setIsLoading(false);\n      }\n   \n            return(\n             \n           <div className=\"row   \" >\n            \n            <div className=\"col-12  fondopdf p-3 d-none d-md-block\" >\n           \n            < iframe width='800' data-toggle=\"collapse\" data-target=\".navbar-collapse.show\" className=\"google-viewer\" height='600' frameborder='0' src=\"https://firebasestorage.googleapis.com/v0/b/sunshine-ico.appspot.com/o/WHITEPAPER%20SUNI.pdf?alt=media&token=6a606197-0768-449d-b35b-e9147ce27bfe\"></iframe>\n            <Loader isLoading={isLoading}/>\n                 \n     \n              \n              \n             \n                </div>\n                <div className=\"col-12 fondopdf p-3 d-block d-md-none\" >\n               <Loader isLoading={isLoading}/>\n               <ControlPanel className=\"\"\n                 numPages={numPages}                 \n                 pageNumber={pageNumber}\n                 setPageNumber={setPageNumber} \n                 setScale={setScale}/>\n              \n              <Document className=\" pdfcontainer \"\n        file={Docpdf}\n        onLoadSuccess={onDocumentLoadSuccess}\n      >\n        <Page pageNumber={pageNumber} className=\"   \"scale={scale} />\n      </Document>\n                </div>\n                </div>\n            \n        \n            \n        );\n    }\n\n\n\n        export default Pdf;\n        ","/home/snow/Documentos/ico-web-final/src/components/Loader.jsx",[],"/home/snow/Documentos/ico-web-final/src/components/ControlPanel.jsx",["458","459"],"import React from 'react';\nimport Engrane1 from '../images/engrane1.svg';\nimport '../css/whitepaper.css';\n\n\nconst ControlPanel = (props) =>{\n    const {pageNumber, numPages, setPageNumber,setScale} = props;\n    const isFirstPage = pageNumber===1;\n    const isLastPage =pageNumber===numPages;\n\n    const firstPageClass=isFirstPage ? 'disabled ':'clickable';\n    const lastPageClass=isLastPage ? 'disabled ':'clickable';\n\n    const goToFirstPage=()=>{\n        if(!isFirstPage) setPageNumber(1);\n    };\n   const goToPreviousPage=()=>{\n    if(!isFirstPage) setPageNumber(pageNumber -1);\n};\n   \n   const goToNextPage=()=>{\n    if(!isLastPage) setPageNumber(pageNumber +1 );\n   };\n   const goToLastPage=()=>{\n    if(!isLastPage) setPageNumber(numPages);\n   };\n        \n    const onChangePage=(e)=>{\n            const {value}=e.target;\n            setPageNumber(Number(value));\n    };\n    \n    return(\n        <div className=\"row control-panel \">\n            <div className=\" p-3 \">\n            <p className=\"control-para\">\n            <i className={`fas fa-fast-backward mx-3 ${firstPageClass}` } onClick={goToFirstPage}/>\n            <i className={`fas fa-backward mx-3 ${firstPageClass}` } onClick={goToPreviousPage}/>\n             <span>Page <input type=\"number\" min={1} max={numPages || 1} name=\"pageNumber\" \n             onChange={onChangePage}\n             value={pageNumber}className=\"input-pdf p-0 pl-2 \"/> {pageNumber} of {numPages}</span>\n            <i className={`fas fa-forward  mx-3 ${lastPageClass}`} onClick={goToNextPage}/>\n            <i className={`fas fa-fast-forward mx-3 ${lastPageClass}`} onClick={goToLastPage}/> </p>\n            </div>\n        </div>\n    )\n};\n\n\nexport default ControlPanel;","/home/snow/Documentos/ico-web-final/src/routes/Acerca.jsx",["460","461","462","463","464","465","466","467","468","469","470","471"],"import React, {useState, useEffect} from \"react\";\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Footer from '../components/Footer';\nimport Linkecontact from \"../images/linkecontact.svg\";\nimport Twitercontact from \"../images/twitercontact.svg\";\nimport {db} from \"../config/firebase\";\nimport '../css/acerca.css';\nimport {useTranslation} from 'react-i18next';\nimport ACCESIBILIDAD from '../images/Accesibilidad-01.png';\nimport PRIVACIDAD from '../images/provacidad-04.png';\nimport SOLIDEZ from '../images/solidez-02.png';\nimport TRABAJOEQUIPO from '../images/trabajo en equipo-03.png';\nimport VIRY from '../images/team/VIRY.jpg';\nimport JOSS from '../images/team/JOS.jpg';\nimport CHRIS from '../images/team/CHRIS.jpg';\nimport MANU from '../images/team/MANU.jpg';\nimport CRIS from '../images/team/CRIS.jpg';\nimport Fade from 'react-reveal/Fade';\nimport Zoom from 'react-reveal/Zoom';\nimport CardsWorkers from \"../components/CardsWorkers.jsx\";\nimport {useAuth} from \"../context/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\n\nconst Acerca = () => {\n\n    const {t} = useTranslation();\n    const [team, setTeam] = useState([]);\n    const [differencesItems, setDifferencesItems] = useState([]);\n    const {currentUser, logout} = useAuth();\n    const history = useHistory();\n\n    const fetchData = async () => {\n        const collections = ['team', 'differencesItems'];\n        await collections.forEach(element => {\n            db.collection(element)\n                .get()\n                .then(snapshot => {\n                    let tempArray = [];\n                    snapshot\n                        .docs.forEach(item => {\n                        tempArray.push(item.data());\n                    });\n                    //LA SIGUIENTE LINEA ES PARA GUARDAR LOS DATOS EN EL STATE CORRESPONDIENTE SEGUN CADA ELEMENTO DEL ARRAY \"collections\"\n                    // EJ. setTeam(tempArray) , setDifferencesItems(tempArray), etc...\n                    //NOTA: eval NO DEBERIA SER USADO PARA GUARDAR DATOS EN UNA COLECCION, AQUI SE USA PARA MOSTRAR DATOS EN EL LADO DEL CLIENTE SOLAMENTE\n                    eval(`set${element.charAt(0).toUpperCase() + element.slice(1)}`)(tempArray);\n                })\n        });\n    }\n\n    useEffect(() => {\n        //fetchData();\n        try {\n            let email = currentUser.email;\n            history.push(\"/\");\n        } catch (e) {}\n    }, []);\n\n\n    const differences = [\n        {\n            image: ACCESIBILIDAD,\n            title: t('AboutSection.Differences.Items.0.Title'),\n            description: t('AboutSection.Differences.Items.0.Text')\n        },\n        {\n            image: PRIVACIDAD,\n            title: t('AboutSection.Differences.Items.1.Title'),\n            description: t('AboutSection.Differences.Items.1.Text')\n        },\n        {\n            image: SOLIDEZ,\n            title: t('AboutSection.Differences.Items.2.Title'),\n            description: t('AboutSection.Differences.Items.2.Text')\n        },\n        {\n            image: TRABAJOEQUIPO,\n            title: t('AboutSection.Differences.Items.3.Title'),\n            description: t('AboutSection.Differences.Items.3.Text')\n        }\n    ];\n\n    const team2 = [\n        {\n            image: VIRY,\n            name: t('AboutSection.Team.Items.0.Name'),\n            career: t('AboutSection.Team.Items.0.Career'),\n            description: t('AboutSection.Team.Items.0.Description'),\n            social: {\n                linkedin: \"https://mx.linkedin.com/in/viry-uribe-879b68163/\",\n                twitter: \"https://twitter.com/home?lang=es\"\n            }\n        },\n        {\n            image: JOSS,\n            name: t('AboutSection.Team.Items.1.Name'),\n            career: t('AboutSection.Team.Items.1.Career'),\n            description: t('AboutSection.Team.Items.1.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/jocelyn-uribe-maldonado-720a90203/\",\n                twitter: \"https://twitter.com/jocelyn_um\"\n            }\n        },\n        {\n            image: CHRIS,\n            name: t('AboutSection.Team.Items.2.Name'),\n            career: t('AboutSection.Team.Items.2.Career'),\n            description: t('AboutSection.Team.Items.2.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/ahtziri-antonio-pe%C3%B1a-142705179/\",\n                twitter: \"\"\n            }\n        },\n        {\n            image: MANU,\n            name: t('AboutSection.Team.Items.3.Name'),\n            career: t('AboutSection.Team.Items.3.Career'),\n            description: t('AboutSection.Team.Items.3.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/jose-manuel-viniegra-molina-aab9a51a8/\",\n                twitter: \"https://twitter.com/manuel87129931\"\n            }\n        },\n        {\n            image: CRIS,\n            name: t('AboutSection.Team.Items.4.Name'),\n            career: t('AboutSection.Team.Items.4.Career'),\n            description: t('AboutSection.Team.Items.4.Description'),\n            social: {\n                linkedin: \"https://www.linkedin.com/in/cristian-augusto-armenta-garcia/\",\n                twitter: \"https://twitter.com/CRISTIANAUGUS14\"\n            }\n        }\n    ]\n\n    return (\n        <div className=\"\">\n\n\n            <div className=\"container-fluid\">\n                <Fade left cascade>\n                    <div className=\"row mt-5 mb-5 pt-5 pb-5 pl-md-5 pr-md-5 pl-lg-5 pr-lg-5 pl-xl-5 pr-xl-5 bg-about2\">\n                        <div className=\"col-12 mt-5  pb-5\">\n                            <h1 className=\"text-center text-preview text-size-banner\">\n                                {t('AboutSection.Title')}\n                            </h1>\n                            <hr/>\n                        </div>\n                        <div className=\"col-12 mb-5\">\n                            <p className=\"text-center mb-5 text-preview pl-md-5 pr-md-5 pl-lg-5 pr-lg-5 pl-xl-5 pr-xl-5\"\n                               style={{fontSize: 30}}>\n                                {t('AboutSection.Introduction.0')}\n                            </p>\n\n                        </div>\n\n                    </div>\n\n                    <div className=\"row justify-content-center\">\n\n                        <div className=\"  col-md-3 cont-card-mision  p-5 \">\n\n                            <div className=\" d-flex justify-content-center mt-5    \">\n                                <h3 className=\"title-vision \">   {t('AboutSection.Mision.Title')}</h3>\n                            </div>\n                            <div className=\"col-12 d-flex text-center \">\n                                <h5 className=\"parrafo-vision p-1\"> {t('AboutSection.Mision.description')}</h5>\n                            </div>\n                        </div>\n\n\n                        <div className=\"  col-md-3  cont-card-mision p-5 \">\n\n                            <div className=\"d-flex  justify-content-center mt-5  \">\n                                <h3 className=\"title-vision \"> {t('AboutSection.Vision.Title')}</h3>\n                            </div>\n                            <div className=\"col-12 d-flex text-center \">\n                                <h5 className=\"parrafo-vision p-1\">{t('AboutSection.Vision.description')}\n\n                                </h5>\n                            </div>\n                        </div>\n                    </div>\n                </Fade>\n\n                <div className=\"  row  pb-5  justify-content-center\">\n                    <div className=\"col-12  pt-4 pb-4\">\n                        <h1 className=\"text-size-title-differences text-center\"><Fade left\n                                                                                      cascade>{t('AboutSection.Differences.Title')}</Fade>\n                        </h1>\n                    </div>\n                    {\n                        differences.map((value, index) => (\n                            <Zoom>\n                                <div id={index}\n                                     className=\" col-12 col-sm-12 row col-lg-4 col-xl-4 cont-diferencia    \">\n                                    <img src={value.image} alt=\"\" className=\"icons-differences \"/>\n                                    <h3 className=\"text-center\">{value.title}</h3>\n                                    <p className=\"text-center\">{value.description}</p>\n                                </div>\n                            </Zoom>\n                        ))\n                    }\n\n\n                </div>\n\n\n                <CardsWorkers/>\n\n                <div className=\"container-fluid pb-5 d-block d-md-none\">\n\n                    <div className=\"container \">\n                        <div className=\"row pb-5\">\n                            {\n                                team2.map((value, index) => (\n                                    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 col-xl-4\">\n                                        <div className=\"card text-light text-center mt-5 mb-5 bg-cards\">\n\n                                            <div className=\"card-img-top mt-5\">\n                                                <img className=\"rounded-circle img-fluid teams-images w-50\"\n                                                     src={value.image} alt=\"Card image cap\"/>\n                                            </div>\n\n                                            <div className=\"card-body mt-3 d-block\">\n                                                <h3 className=\"card-title mb-3\">{value.name}</h3>\n                                                <h6 className=\"card-subtitle mb-4\">{value.career}</h6>\n                                                <div style={{height: 120}}>\n                                                    <p className=\"card-text mb-4\">{value.description}</p>\n                                                </div>\n                                            </div>\n                                            <div className=\"card-body border-top\">\n                                                <div className=\"row\">\n                                                    <div className=\"col-6\">\n                                                        <a href={value.social.linkedin} target=\"_blank\">\n                                                            <img src={Linkecontact} alt=\"face\"/>\n                                                        </a>\n                                                    </div>\n                                                    <div className=\"col-6\">\n                                                        <a href={value.social.twitter || \"#\"}\n                                                           className={value.social.twitter || \"disabled\"}\n                                                           target=\"_blank\">\n                                                            <img src={Twitercontact} alt=\"face\"/>\n                                                        </a>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <button className=\"btn bg-cards text-light btn-lg btn-block\" data-toggle=\"modal\"\n                                    data-target=\"#staticBackdropcon\">{t('AboutSection.ButtonText')}</button>\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </div>\n\n            <div className=\"container-fluid\">\n                <Footer/>\n            </div>\n\n\n        </div>\n\n\n    )\n}\n\n\nexport default Acerca;","/home/snow/Documentos/ico-web-final/src/components/CardsWorkers.jsx",["472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487"],"import React, {useState, useEffect} from \"react\";\r\n\r\n\r\nimport EquipoSunshine from \"../images/team.png\";\r\nimport Footer from './Footer';\r\nimport Linkecontact from \"../images/linkecontact.svg\";\r\nimport Twitercontact from \"../images/twitercontact.svg\";\r\nimport {db} from \"../config/firebase\";\r\n\r\nimport '../sass/cards.scss';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ACCESIBILIDAD from '../images/Accesibilidad-01.png';\r\nimport PRIVACIDAD from '../images/provacidad-04.png';\r\nimport SOLIDEZ from '../images/solidez-02.png';\r\nimport TRABAJOEQUIPO from '../images/trabajo en equipo-03.png';\r\nimport VIRY from '../images/team/VIRY.jpg';\r\nimport JOSS from '../images/team/JOS.jpg';\r\nimport CHRIS from '../images/team/CHRIS.jpg';\r\nimport MANU from '../images/team/MANU.jpg';\r\nimport CRIS from '../images/team/CRIS.jpg';\r\nimport Roll from 'react-reveal/Roll';\r\nimport { Divider } from \"@material-ui/core\";\r\nimport { Carousel, showArrows, onChange, onClickItem, } from \"react-responsive-carousel\";\r\n\r\n\r\n\r\nconst CardsWorkers = () => {\r\n    const { t } = useTranslation();\r\n    const [team, setTeam] = useState([]);\r\n    const [differencesItems, setDifferencesItems] = useState([]);\r\n\r\n    const fetchData = async() => {\r\n        const collections = ['team', 'differencesItems'];\r\n        await collections.forEach(element => {\r\n            db.collection(element)\r\n                .get()\r\n                .then(snapshot => {\r\n                    let tempArray = [];\r\n                    snapshot\r\n                        .docs.forEach(item => {\r\n                            tempArray.push(item.data());\r\n                        });\r\n                    //LA SIGUIENTE LINEA ES PARA GUARDAR LOS DATOS EN EL STATE CORRESPONDIENTE SEGUN CADA ELEMENTO DEL ARRAY \"collections\"\r\n                    // EJ. setTeam(tempArray) , setDifferencesItems(tempArray), etc...\r\n                    //NOTA: eval NO DEBERIA SER USADO PARA GUARDAR DATOS EN UNA COLECCION, AQUI SE USA PARA MOSTRAR DATOS EN EL LADO DEL CLIENTE SOLAMENTE\r\n                    eval(`set${element.charAt(0).toUpperCase() + element.slice(1)}`)(tempArray);\r\n                })\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        //fetchData();\r\n    }, []);\r\n\r\n\r\n    const differences = [\r\n        {\r\n            image: ACCESIBILIDAD,\r\n            title: t('AboutSection.Differences.Items.0.Title'),\r\n            description: t('AboutSection.Differences.Items.0.Text')\r\n        },\r\n        {\r\n            image: PRIVACIDAD,\r\n            title: t('AboutSection.Differences.Items.1.Title'),\r\n            description: t('AboutSection.Differences.Items.1.Text')\r\n        },\r\n        {\r\n            image: SOLIDEZ,\r\n            title: t('AboutSection.Differences.Items.2.Title'),\r\n            description: t('AboutSection.Differences.Items.2.Text')\r\n        },\r\n        {\r\n            image: TRABAJOEQUIPO,\r\n            title: t('AboutSection.Differences.Items.3.Title'),\r\n            description: t('AboutSection.Differences.Items.3.Text')\r\n        }\r\n    ];\r\n\r\n    const team2 = [\r\n        {\r\n            image: VIRY,\r\n            name: t('AboutSection.Team.Items.0.Name'),\r\n            career: t('AboutSection.Team.Items.0.Career'),\r\n            description: t('AboutSection.Team.Items.0.Description'),\r\n            social: {\r\n                linkedin: \"https://mx.linkedin.com/in/viry-uribe-879b68163/\",\r\n                twitter: \"https://twitter.com/home?lang=es\"\r\n            }\r\n        },\r\n        {\r\n            image: JOSS,\r\n            name: t('AboutSection.Team.Items.1.Name'),\r\n            career: t('AboutSection.Team.Items.1.Career'),\r\n            description: t('AboutSection.Team.Items.1.Description'),\r\n            social: {\r\n                linkedin: \"https://www.linkedin.com/in/jocelyn-uribe-maldonado-720a90203/\",\r\n                twitter: \"https://twitter.com/jocelyn_um\"\r\n            }\r\n        },\r\n        {\r\n            image: CHRIS,\r\n            name: t('AboutSection.Team.Items.2.Name'),\r\n            career: t('AboutSection.Team.Items.2.Career'),\r\n            description: t('AboutSection.Team.Items.2.Description'),\r\n            social: {\r\n                linkedin: \"https://www.linkedin.com/in/ahtziri-antonio-pe%C3%B1a-142705179/\",\r\n                twitter: \"\"\r\n            }\r\n        },\r\n        {\r\n            image: MANU,\r\n            name: t('AboutSection.Team.Items.3.Name'),\r\n            career: t('AboutSection.Team.Items.3.Career'),\r\n            description: t('AboutSection.Team.Items.3.Description'),\r\n            social: {\r\n                linkedin: \"https://www.linkedin.com/in/jose-manuel-viniegra-molina-aab9a51a8/\",\r\n                twitter: \"https://twitter.com/manuel87129931\"\r\n            }\r\n        },\r\n        {\r\n            image: CRIS,\r\n            name: t('AboutSection.Team.Items.4.Name'),\r\n            career: t('AboutSection.Team.Items.4.Career'),\r\n            description: t('AboutSection.Team.Items.4.Description'),\r\n            social: {\r\n                linkedin: \"https://www.linkedin.com/in/cristian-augusto-armenta-garcia/\",\r\n                twitter: \"https://twitter.com/CRISTIANAUGUS14\"\r\n            }\r\n        }\r\n    ]\r\n    return(\r\n       <div className=\"col-12 justify-content-center container-full-cards \">\r\n             <h1 className=\"display-4 font-weight-bold titu-team   position-relative\">\r\n                                {t('AboutSection.Banner')}\r\n                            </h1>\r\n           <Carousel  className=\"d-none d-md-flex \" showArrows={true} infiniteLoop autoPlay\r\n            emulateTouch={true}\r\n            centerMode={true}\r\n            selectedItem={2}\r\n            showIndicators={false}\r\n            showThumbs={false}\r\n            showStatus={false}\r\n            centerSlidePercentage={25}\r\n             onChange={onChange}  >\r\n            {\r\n                            team2.map((value, index) => (\r\n        <div id=\"cont-cards\" className=\" containercard \">\r\n \r\n \r\n            <div className=\"card-wrap-personal\">\r\n          <div className=\"card-personal\" >\r\n          <img className=\"card-bg-personal\" src={value.image}></img>\r\n          <div className=\"card-info-personal\">\r\n            <h1  className=\"card-titles\" slot=\"header\">{value.name}</h1>\r\n            <h6 className=\"card-subtitle mb-4\">{value.career}</h6>\r\n            <p slot=\"content\">{value.description}</p>\r\n            <div className=\"row\">\r\n            <div className=\"col-6\">\r\n                                                    <a href={value.social.linkedin} target=\"_blank\">\r\n                                                        <img src={Linkecontact} alt=\"face\" className=\"img-fluid\"/>\r\n                                                    </a>\r\n                                                </div>\r\n                                                <div className=\"col-6\">\r\n                                                    <a href={value.social.twitter || \"#\"} className={value.social.twitter|| \"disabled\" } target=\"_blank\">\r\n                                                        <img src={Twitercontact} alt=\"face\" className=\"img-flui\"/>\r\n                                                    </a>\r\n                                                </div>\r\n                                                </div>\r\n          </div>\r\n          </div>\r\n          </div> \r\n                        \r\n        \r\n          \r\n            \r\n        </div>\r\n          ))\r\n        }\r\n         </Carousel>     \r\n        </div>\r\n    )\r\n            \r\n    \r\n}\r\n\r\nexport default CardsWorkers;\r\n","/home/snow/Documentos/ico-web-final/src/js/mostrarmenu.js",["488","489","490"],"import React, {Component} from 'react';\r\nimport $ from \"jquery\";\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\r\n\r\n    let ubicacionPrincipal = window.pageYOffset;\r\n    window.onscroll = function () {\r\n        let Dezplazamiento_actual = window.pageYOffset;\r\n        if (ubicacionPrincipal >= Dezplazamiento_actual) {\r\n            document.getElementById('navbar').style.top = '0';\r\n        } else {\r\n            document.getElementById('navbar').style.top = '-100px';\r\n        }\r\n        ubicacionPrincipal = Dezplazamiento_actual;\r\n    }\r\n});\r\n","/home/snow/Documentos/ico-web-final/src/js/cuentaregresiva.js",["491"],"import '../App.css';\nimport React from 'react';\nimport Lineadias from '../images/lineadias.svg';\n\nexport default function contador(id, limitDate, finalMessage) {\n    const $contador = document.getElementById(id), contadorDate = new Date(limitDate).getTime();\n    let contadorTempo = setInterval(() => {\n        let now = new Date().getTime(),\n            limitTime = contadorDate - now,\n            days = (Math.floor(limitTime / (1000 * 60 * 60 * 24))),\n            hours = (\"0\" + Math.floor(limitTime % (1000 * 60 * 60 * 24) / (1000 * 60 * 60))).slice(-2),\n            minutes = (\"0\" + Math.floor(limitTime % (1000 * 60 * 60) / (1000 * 60))).slice(-2),\n            seconds = (\"0\" + Math.floor(limitTime % (1000 * 60) / (1000))).slice(-2);\n        $contador.innerHTML = `<button class=\" btn contador-fap fap-dias fap-btn \"><p class=\"num-conta\"> ${days}</p> <img src=${Lineadias} alt=\"linea\" class=\"linea-dias\"/></button> <i class=\"texto-contenedor\">\n    <br/>dias</i> \n    \n    <button class=\"btn contador-fap fap-horas fap-btn\"><p class=\"num-conta\"> ${hours}</p></button> <br/><i class=\"texto-contenedor texto-horas\">\n    <br/>horas</i>\n     <button class=\"btn contador-fap fap-minutos fap-btn \"><p class=\"num-conta\">${minutes}</p></button><br/><i class=\"texto-contenedor texto-min\">\n     <br/>minutos</i>\n    <button class=\"btn contador-fap fap-seg fap-btn\"><p class=\"num-conta\">${seconds}</p></button><br/><i class=\"texto-contenedor texto-seg\">\n    <br/>segundos</i> `\n\n        if (limitTime < 0) {\n            clearInterval(contadorTempo);\n            $contador.innerHTML = `<h1 class=\"fintokens\">${finalMessage}</h1>  `\n        }\n\n\n    }, 1000);\n\n\n}",{"ruleId":"492","replacedBy":"493"},{"ruleId":"494","replacedBy":"495"},{"ruleId":"496","severity":1,"message":"497","line":2,"column":8,"nodeType":"498","messageId":"499","endLine":2,"endColumn":13},{"ruleId":"496","severity":1,"message":"500","line":26,"column":12,"nodeType":"498","messageId":"499","endLine":26,"endColumn":20},{"ruleId":"496","severity":1,"message":"501","line":33,"column":12,"nodeType":"498","messageId":"499","endLine":33,"endColumn":19},{"ruleId":"496","severity":1,"message":"502","line":34,"column":12,"nodeType":"498","messageId":"499","endLine":34,"endColumn":21},{"ruleId":"496","severity":1,"message":"503","line":35,"column":12,"nodeType":"498","messageId":"499","endLine":35,"endColumn":23},{"ruleId":"504","severity":1,"message":"505","line":47,"column":8,"nodeType":"506","endLine":47,"endColumn":10,"suggestions":"507"},{"ruleId":"508","severity":1,"message":"509","line":70,"column":9,"nodeType":"510","messageId":"511","endLine":70,"endColumn":13},{"ruleId":"508","severity":1,"message":"509","line":74,"column":16,"nodeType":"510","messageId":"511","endLine":74,"endColumn":20},{"ruleId":"512","severity":1,"message":"513","line":94,"column":9,"nodeType":"514","messageId":"515","endLine":182,"endColumn":10},{"ruleId":"496","severity":1,"message":"516","line":1,"column":16,"nodeType":"498","messageId":"499","endLine":1,"endColumn":24},{"ruleId":"496","severity":1,"message":"501","line":24,"column":12,"nodeType":"498","messageId":"499","endLine":24,"endColumn":19},{"ruleId":"512","severity":1,"message":"513","line":90,"column":29,"nodeType":"514","messageId":"515","endLine":109,"endColumn":30},{"ruleId":"496","severity":1,"message":"517","line":230,"column":11,"nodeType":"498","messageId":"499","endLine":230,"endColumn":19},{"ruleId":"496","severity":1,"message":"516","line":1,"column":16,"nodeType":"498","messageId":"499","endLine":1,"endColumn":24},{"ruleId":"504","severity":1,"message":"518","line":26,"column":8,"nodeType":"506","endLine":26,"endColumn":10,"suggestions":"519"},{"ruleId":"520","severity":1,"message":"521","line":32,"column":17,"nodeType":"522","messageId":"523","endLine":32,"endColumn":23},{"ruleId":"520","severity":1,"message":"521","line":36,"column":17,"nodeType":"522","messageId":"523","endLine":36,"endColumn":23},{"ruleId":"520","severity":1,"message":"521","line":40,"column":17,"nodeType":"522","messageId":"523","endLine":40,"endColumn":23},{"ruleId":"524","severity":1,"message":"525","line":68,"column":25,"nodeType":"526","endLine":68,"endColumn":116},{"ruleId":"496","severity":1,"message":"527","line":13,"column":25,"nodeType":"498","messageId":"499","endLine":13,"endColumn":31},{"ruleId":"496","severity":1,"message":"528","line":18,"column":12,"nodeType":"498","messageId":"499","endLine":18,"endColumn":22},{"ruleId":"496","severity":1,"message":"529","line":18,"column":24,"nodeType":"498","messageId":"499","endLine":18,"endColumn":37},{"ruleId":"504","severity":1,"message":"530","line":60,"column":7,"nodeType":"506","endLine":60,"endColumn":20,"suggestions":"531"},{"ruleId":"496","severity":1,"message":"532","line":5,"column":8,"nodeType":"498","messageId":"499","endLine":5,"endColumn":20},{"ruleId":"496","severity":1,"message":"533","line":30,"column":10,"nodeType":"498","messageId":"499","endLine":30,"endColumn":20},{"ruleId":"496","severity":1,"message":"534","line":90,"column":11,"nodeType":"498","messageId":"499","endLine":90,"endColumn":16},{"ruleId":"504","severity":1,"message":"535","line":94,"column":8,"nodeType":"506","endLine":94,"endColumn":17,"suggestions":"536"},{"ruleId":"537","severity":1,"message":"538","line":119,"column":34,"nodeType":"539","messageId":"540","endLine":119,"endColumn":36},{"ruleId":"541","severity":1,"message":"542","line":165,"column":153,"nodeType":"526","endLine":165,"endColumn":242},{"ruleId":"543","severity":1,"message":"544","line":208,"column":40,"nodeType":"526","messageId":"545","endLine":208,"endColumn":130,"fix":"546"},{"ruleId":"543","severity":1,"message":"544","line":213,"column":40,"nodeType":"526","messageId":"545","endLine":213,"endColumn":125,"fix":"547"},{"ruleId":"496","severity":1,"message":"527","line":46,"column":25,"nodeType":"498","messageId":"499","endLine":46,"endColumn":31},{"ruleId":"496","severity":1,"message":"548","line":53,"column":12,"nodeType":"498","messageId":"499","endLine":53,"endColumn":20},{"ruleId":"496","severity":1,"message":"549","line":58,"column":12,"nodeType":"498","messageId":"499","endLine":58,"endColumn":27},{"ruleId":"496","severity":1,"message":"550","line":58,"column":29,"nodeType":"498","messageId":"499","endLine":58,"endColumn":47},{"ruleId":"496","severity":1,"message":"551","line":63,"column":17,"nodeType":"498","messageId":"499","endLine":63,"endColumn":22},{"ruleId":"504","severity":1,"message":"552","line":73,"column":8,"nodeType":"506","endLine":73,"endColumn":10,"suggestions":"553"},{"ruleId":"496","severity":1,"message":"554","line":159,"column":16,"nodeType":"498","messageId":"499","endLine":159,"endColumn":23},{"ruleId":"496","severity":1,"message":"555","line":159,"column":25,"nodeType":"498","messageId":"499","endLine":159,"endColumn":34},{"ruleId":"556","severity":1,"message":"557","line":211,"column":21,"nodeType":"526","endLine":212,"endColumn":60},{"ruleId":"541","severity":1,"message":"558","line":211,"column":21,"nodeType":"526","endLine":212,"endColumn":60},{"ruleId":"496","severity":1,"message":"559","line":4,"column":8,"nodeType":"498","messageId":"499","endLine":4,"endColumn":19},{"ruleId":"496","severity":1,"message":"560","line":5,"column":8,"nodeType":"498","messageId":"499","endLine":5,"endColumn":19},{"ruleId":"496","severity":1,"message":"561","line":17,"column":5,"nodeType":"498","messageId":"499","endLine":17,"endColumn":11},{"ruleId":"496","severity":1,"message":"562","line":19,"column":5,"nodeType":"498","messageId":"499","endLine":19,"endColumn":15},{"ruleId":"496","severity":1,"message":"563","line":21,"column":5,"nodeType":"498","messageId":"499","endLine":21,"endColumn":14},{"ruleId":"496","severity":1,"message":"564","line":22,"column":5,"nodeType":"498","messageId":"499","endLine":22,"endColumn":9},{"ruleId":"496","severity":1,"message":"565","line":23,"column":5,"nodeType":"498","messageId":"499","endLine":23,"endColumn":10},{"ruleId":"496","severity":1,"message":"566","line":57,"column":12,"nodeType":"498","messageId":"499","endLine":57,"endColumn":18},{"ruleId":"496","severity":1,"message":"567","line":63,"column":12,"nodeType":"498","messageId":"499","endLine":63,"endColumn":19},{"ruleId":"496","severity":1,"message":"568","line":72,"column":12,"nodeType":"498","messageId":"499","endLine":72,"endColumn":24},{"ruleId":"496","severity":1,"message":"569","line":73,"column":12,"nodeType":"498","messageId":"499","endLine":73,"endColumn":21},{"ruleId":"496","severity":1,"message":"570","line":74,"column":12,"nodeType":"498","messageId":"499","endLine":74,"endColumn":21},{"ruleId":"496","severity":1,"message":"571","line":74,"column":23,"nodeType":"498","messageId":"499","endLine":74,"endColumn":35},{"ruleId":"496","severity":1,"message":"572","line":76,"column":12,"nodeType":"498","messageId":"499","endLine":76,"endColumn":25},{"ruleId":"496","severity":1,"message":"573","line":77,"column":12,"nodeType":"498","messageId":"499","endLine":77,"endColumn":23},{"ruleId":"496","severity":1,"message":"574","line":77,"column":25,"nodeType":"498","messageId":"499","endLine":77,"endColumn":39},{"ruleId":"496","severity":1,"message":"575","line":81,"column":19,"nodeType":"498","messageId":"499","endLine":81,"endColumn":27},{"ruleId":"496","severity":1,"message":"551","line":86,"column":17,"nodeType":"498","messageId":"499","endLine":86,"endColumn":22},{"ruleId":"504","severity":1,"message":"576","line":105,"column":8,"nodeType":"506","endLine":105,"endColumn":22,"suggestions":"577"},{"ruleId":"512","severity":1,"message":"513","line":117,"column":21,"nodeType":"514","messageId":"515","endLine":131,"endColumn":22},{"ruleId":"578","severity":1,"message":"579","line":184,"column":29,"nodeType":"526","endLine":186,"endColumn":75},{"ruleId":"508","severity":1,"message":"509","line":279,"column":16,"nodeType":"510","messageId":"511","endLine":279,"endColumn":20},{"ruleId":"508","severity":1,"message":"509","line":283,"column":9,"nodeType":"510","messageId":"511","endLine":283,"endColumn":13},{"ruleId":"504","severity":1,"message":"580","line":24,"column":8,"nodeType":"506","endLine":24,"endColumn":10,"suggestions":"581"},{"ruleId":"504","severity":1,"message":"582","line":43,"column":8,"nodeType":"506","endLine":43,"endColumn":47,"suggestions":"583"},{"ruleId":"496","severity":1,"message":"584","line":2,"column":16,"nodeType":"498","messageId":"499","endLine":2,"endColumn":25},{"ruleId":"496","severity":1,"message":"585","line":4,"column":28,"nodeType":"498","messageId":"499","endLine":4,"endColumn":34},{"ruleId":"496","severity":1,"message":"586","line":10,"column":13,"nodeType":"498","messageId":"499","endLine":10,"endColumn":23},{"ruleId":"496","severity":1,"message":"587","line":16,"column":8,"nodeType":"498","messageId":"499","endLine":16,"endColumn":19},{"ruleId":"496","severity":1,"message":"588","line":3,"column":17,"nodeType":"498","messageId":"499","endLine":3,"endColumn":26},{"ruleId":"496","severity":1,"message":"589","line":31,"column":25,"nodeType":"498","messageId":"499","endLine":31,"endColumn":36},{"ruleId":"496","severity":1,"message":"590","line":31,"column":46,"nodeType":"498","messageId":"499","endLine":31,"endColumn":56},{"ruleId":"496","severity":1,"message":"566","line":32,"column":12,"nodeType":"498","messageId":"499","endLine":32,"endColumn":18},{"ruleId":"496","severity":1,"message":"551","line":38,"column":17,"nodeType":"498","messageId":"499","endLine":38,"endColumn":22},{"ruleId":"504","severity":1,"message":"591","line":52,"column":8,"nodeType":"506","endLine":52,"endColumn":10,"suggestions":"592"},{"ruleId":"537","severity":1,"message":"538","line":56,"column":24,"nodeType":"539","messageId":"540","endLine":56,"endColumn":26},{"ruleId":"537","severity":1,"message":"593","line":91,"column":113,"nodeType":"539","messageId":"594","endLine":91,"endColumn":115},{"ruleId":"512","severity":1,"message":"513","line":92,"column":53,"nodeType":"514","messageId":"515","endLine":130,"endColumn":54},{"ruleId":"496","severity":1,"message":"595","line":58,"column":21,"nodeType":"498","messageId":"499","endLine":58,"endColumn":37},{"ruleId":"496","severity":1,"message":"596","line":58,"column":55,"nodeType":"498","messageId":"499","endLine":58,"endColumn":66},{"ruleId":"496","severity":1,"message":"597","line":58,"column":68,"nodeType":"498","messageId":"499","endLine":58,"endColumn":76},{"ruleId":"496","severity":1,"message":"598","line":123,"column":22,"nodeType":"498","messageId":"499","endLine":123,"endColumn":33},{"ruleId":"504","severity":1,"message":"599","line":130,"column":8,"nodeType":"506","endLine":130,"endColumn":10,"suggestions":"600"},{"ruleId":"496","severity":1,"message":"601","line":15,"column":11,"nodeType":"498","messageId":"499","endLine":15,"endColumn":18},{"ruleId":"496","severity":1,"message":"602","line":32,"column":12,"nodeType":"498","messageId":"499","endLine":32,"endColumn":24},{"ruleId":"496","severity":1,"message":"603","line":32,"column":26,"nodeType":"498","messageId":"499","endLine":32,"endColumn":41},{"ruleId":"496","severity":1,"message":"604","line":34,"column":12,"nodeType":"498","messageId":"499","endLine":34,"endColumn":26},{"ruleId":"496","severity":1,"message":"605","line":36,"column":12,"nodeType":"498","messageId":"499","endLine":36,"endColumn":17},{"ruleId":"496","severity":1,"message":"606","line":39,"column":12,"nodeType":"498","messageId":"499","endLine":39,"endColumn":17},{"ruleId":"496","severity":1,"message":"607","line":39,"column":19,"nodeType":"498","messageId":"499","endLine":39,"endColumn":30},{"ruleId":"496","severity":1,"message":"527","line":39,"column":32,"nodeType":"498","messageId":"499","endLine":39,"endColumn":38},{"ruleId":"496","severity":1,"message":"608","line":46,"column":11,"nodeType":"498","messageId":"499","endLine":46,"endColumn":22},{"ruleId":"537","severity":1,"message":"593","line":145,"column":109,"nodeType":"539","messageId":"594","endLine":145,"endColumn":111},{"ruleId":"512","severity":1,"message":"513","line":146,"column":49,"nodeType":"514","messageId":"515","endLine":187,"endColumn":50},{"ruleId":"496","severity":1,"message":"584","line":1,"column":26,"nodeType":"498","messageId":"499","endLine":1,"endColumn":35},{"ruleId":"496","severity":1,"message":"497","line":6,"column":8,"nodeType":"498","messageId":"499","endLine":6,"endColumn":13},{"ruleId":"496","severity":1,"message":"609","line":18,"column":11,"nodeType":"498","messageId":"499","endLine":18,"endColumn":25},{"ruleId":"496","severity":1,"message":"610","line":107,"column":21,"nodeType":"498","messageId":"499","endLine":107,"endColumn":30},{"ruleId":"496","severity":1,"message":"611","line":108,"column":21,"nodeType":"498","messageId":"499","endLine":108,"endColumn":33},{"ruleId":"496","severity":1,"message":"584","line":1,"column":26,"nodeType":"498","messageId":"499","endLine":1,"endColumn":35},{"ruleId":"496","severity":1,"message":"612","line":40,"column":12,"nodeType":"498","messageId":"499","endLine":40,"endColumn":21},{"ruleId":"496","severity":1,"message":"613","line":40,"column":23,"nodeType":"498","messageId":"499","endLine":40,"endColumn":35},{"ruleId":"496","severity":1,"message":"573","line":41,"column":12,"nodeType":"498","messageId":"499","endLine":41,"endColumn":23},{"ruleId":"496","severity":1,"message":"611","line":195,"column":37,"nodeType":"498","messageId":"499","endLine":195,"endColumn":49},{"ruleId":"537","severity":1,"message":"593","line":256,"column":102,"nodeType":"539","messageId":"594","endLine":256,"endColumn":104},{"ruleId":"512","severity":1,"message":"513","line":258,"column":45,"nodeType":"514","messageId":"515","endLine":296,"endColumn":46},{"ruleId":"496","severity":1,"message":"610","line":384,"column":17,"nodeType":"498","messageId":"499","endLine":384,"endColumn":26},{"ruleId":"496","severity":1,"message":"611","line":385,"column":17,"nodeType":"498","messageId":"499","endLine":385,"endColumn":29},{"ruleId":"496","severity":1,"message":"614","line":5,"column":9,"nodeType":"498","messageId":"499","endLine":5,"endColumn":16},{"ruleId":"496","severity":1,"message":"607","line":27,"column":19,"nodeType":"498","messageId":"499","endLine":27,"endColumn":30},{"ruleId":"496","severity":1,"message":"611","line":137,"column":17,"nodeType":"498","messageId":"499","endLine":137,"endColumn":29},{"ruleId":"512","severity":1,"message":"513","line":139,"column":13,"nodeType":"514","messageId":"515","endLine":148,"endColumn":14},{"ruleId":"496","severity":1,"message":"611","line":220,"column":25,"nodeType":"498","messageId":"499","endLine":220,"endColumn":37},{"ruleId":"541","severity":1,"message":"558","line":348,"column":37,"nodeType":"526","endLine":349,"endColumn":69},{"ruleId":"578","severity":1,"message":"579","line":11,"column":17,"nodeType":"526","endLine":13,"endColumn":41},{"ruleId":"615","severity":1,"message":"616","line":33,"column":21,"nodeType":"526","endLine":33,"endColumn":72},{"ruleId":"615","severity":1,"message":"616","line":44,"column":25,"nodeType":"526","endLine":44,"endColumn":74},{"ruleId":"615","severity":1,"message":"616","line":80,"column":29,"nodeType":"526","endLine":80,"endColumn":104},{"ruleId":"615","severity":1,"message":"616","line":29,"column":21,"nodeType":"526","endLine":29,"endColumn":75},{"ruleId":"615","severity":1,"message":"616","line":30,"column":21,"nodeType":"526","endLine":30,"endColumn":79},{"ruleId":"615","severity":1,"message":"616","line":46,"column":25,"nodeType":"526","endLine":46,"endColumn":80},{"ruleId":"615","severity":1,"message":"616","line":57,"column":21,"nodeType":"526","endLine":57,"endColumn":89},{"ruleId":"615","severity":1,"message":"616","line":64,"column":5,"nodeType":"526","endLine":64,"endColumn":58},{"ruleId":"615","severity":1,"message":"616","line":77,"column":5,"nodeType":"526","endLine":77,"endColumn":59},{"ruleId":"615","severity":1,"message":"616","line":90,"column":5,"nodeType":"526","endLine":90,"endColumn":59},{"ruleId":"615","severity":1,"message":"616","line":103,"column":5,"nodeType":"526","endLine":103,"endColumn":73},{"ruleId":"615","severity":1,"message":"616","line":116,"column":5,"nodeType":"526","endLine":116,"endColumn":73},{"ruleId":"615","severity":1,"message":"616","line":143,"column":21,"nodeType":"526","endLine":143,"endColumn":69},{"ruleId":"615","severity":1,"message":"616","line":149,"column":21,"nodeType":"526","endLine":149,"endColumn":60},{"ruleId":"615","severity":1,"message":"616","line":153,"column":21,"nodeType":"526","endLine":153,"endColumn":68},{"ruleId":"496","severity":1,"message":"516","line":1,"column":43,"nodeType":"498","messageId":"499","endLine":1,"endColumn":51},{"ruleId":"496","severity":1,"message":"527","line":25,"column":25,"nodeType":"498","messageId":"499","endLine":25,"endColumn":31},{"ruleId":"496","severity":1,"message":"551","line":30,"column":17,"nodeType":"498","messageId":"499","endLine":30,"endColumn":22},{"ruleId":"504","severity":1,"message":"617","line":34,"column":8,"nodeType":"506","endLine":34,"endColumn":10,"suggestions":"618"},{"ruleId":"619","severity":1,"message":"620","line":37,"column":42,"nodeType":"621","messageId":"622","endLine":37,"endColumn":54},{"ruleId":"615","severity":1,"message":"616","line":41,"column":21,"nodeType":"526","endLine":41,"endColumn":78},{"ruleId":"496","severity":1,"message":"584","line":1,"column":16,"nodeType":"498","messageId":"499","endLine":1,"endColumn":25},{"ruleId":"496","severity":1,"message":"623","line":1,"column":27,"nodeType":"498","messageId":"499","endLine":1,"endColumn":36},{"ruleId":"496","severity":1,"message":"624","line":2,"column":8,"nodeType":"498","messageId":"499","endLine":2,"endColumn":16},{"ruleId":"615","severity":1,"message":"616","line":30,"column":29,"nodeType":"526","endLine":30,"endColumn":91},{"ruleId":"625","severity":1,"message":"626","line":38,"column":33,"nodeType":"526","endLine":39,"endColumn":75},{"ruleId":"615","severity":1,"message":"616","line":51,"column":21,"nodeType":"526","endLine":51,"endColumn":63},{"ruleId":"496","severity":1,"message":"627","line":27,"column":20,"nodeType":"498","messageId":"499","endLine":27,"endColumn":29},{"ruleId":"512","severity":1,"message":"513","line":51,"column":9,"nodeType":"514","messageId":"515","endLine":64,"endColumn":10},{"ruleId":"615","severity":1,"message":"616","line":74,"column":29,"nodeType":"526","endLine":74,"endColumn":64},{"ruleId":"541","severity":1,"message":"558","line":88,"column":29,"nodeType":"526","endLine":88,"endColumn":159},{"ruleId":"541","severity":1,"message":"558","line":92,"column":29,"nodeType":"526","endLine":92,"endColumn":159},{"ruleId":"615","severity":1,"message":"616","line":124,"column":29,"nodeType":"526","endLine":124,"endColumn":64},{"ruleId":"541","severity":1,"message":"558","line":152,"column":29,"nodeType":"526","endLine":152,"endColumn":100},{"ruleId":"541","severity":1,"message":"558","line":158,"column":29,"nodeType":"526","endLine":158,"endColumn":100},{"ruleId":"541","severity":1,"message":"558","line":165,"column":29,"nodeType":"526","endLine":165,"endColumn":159},{"ruleId":"541","severity":1,"message":"558","line":169,"column":29,"nodeType":"526","endLine":169,"endColumn":159},{"ruleId":"496","severity":1,"message":"527","line":25,"column":25,"nodeType":"498","messageId":"499","endLine":25,"endColumn":31},{"ruleId":"496","severity":1,"message":"551","line":30,"column":17,"nodeType":"498","messageId":"499","endLine":30,"endColumn":22},{"ruleId":"504","severity":1,"message":"617","line":33,"column":8,"nodeType":"506","endLine":33,"endColumn":10,"suggestions":"628"},{"ruleId":"496","severity":1,"message":"623","line":4,"column":16,"nodeType":"498","messageId":"499","endLine":4,"endColumn":25},{"ruleId":"496","severity":1,"message":"584","line":4,"column":27,"nodeType":"498","messageId":"499","endLine":4,"endColumn":36},{"ruleId":"496","severity":1,"message":"516","line":4,"column":38,"nodeType":"498","messageId":"499","endLine":4,"endColumn":46},{"ruleId":"496","severity":1,"message":"629","line":7,"column":8,"nodeType":"498","messageId":"499","endLine":7,"endColumn":12},{"ruleId":"496","severity":1,"message":"623","line":3,"column":16,"nodeType":"498","messageId":"499","endLine":3,"endColumn":25},{"ruleId":"496","severity":1,"message":"630","line":7,"column":8,"nodeType":"498","messageId":"499","endLine":7,"endColumn":19},{"ruleId":"496","severity":1,"message":"527","line":15,"column":25,"nodeType":"498","messageId":"499","endLine":15,"endColumn":31},{"ruleId":"496","severity":1,"message":"551","line":20,"column":17,"nodeType":"498","messageId":"499","endLine":20,"endColumn":22},{"ruleId":"504","severity":1,"message":"617","line":23,"column":8,"nodeType":"506","endLine":23,"endColumn":10,"suggestions":"631"},{"ruleId":"496","severity":1,"message":"632","line":2,"column":8,"nodeType":"498","messageId":"499","endLine":2,"endColumn":16},{"ruleId":"496","severity":1,"message":"630","line":3,"column":8,"nodeType":"498","messageId":"499","endLine":3,"endColumn":19},{"ruleId":"496","severity":1,"message":"516","line":13,"column":16,"nodeType":"498","messageId":"499","endLine":13,"endColumn":24},{"ruleId":"496","severity":1,"message":"624","line":14,"column":8,"nodeType":"498","messageId":"499","endLine":14,"endColumn":16},{"ruleId":"496","severity":1,"message":"633","line":17,"column":20,"nodeType":"498","messageId":"499","endLine":17,"endColumn":30},{"ruleId":"615","severity":1,"message":"616","line":30,"column":17,"nodeType":"526","endLine":30,"endColumn":63},{"ruleId":"615","severity":1,"message":"616","line":36,"column":21,"nodeType":"526","endLine":36,"endColumn":69},{"ruleId":"615","severity":1,"message":"616","line":40,"column":21,"nodeType":"526","endLine":40,"endColumn":69},{"ruleId":"615","severity":1,"message":"616","line":44,"column":21,"nodeType":"526","endLine":44,"endColumn":70},{"ruleId":"615","severity":1,"message":"616","line":48,"column":21,"nodeType":"526","endLine":48,"endColumn":69},{"ruleId":"615","severity":1,"message":"616","line":52,"column":21,"nodeType":"526","endLine":52,"endColumn":69},{"ruleId":"615","severity":1,"message":"616","line":57,"column":21,"nodeType":"526","endLine":57,"endColumn":59},{"ruleId":"615","severity":1,"message":"616","line":62,"column":21,"nodeType":"526","endLine":62,"endColumn":69},{"ruleId":"578","severity":1,"message":"579","line":34,"column":13,"nodeType":"526","endLine":34,"endColumn":300},{"ruleId":"496","severity":1,"message":"634","line":2,"column":8,"nodeType":"498","messageId":"499","endLine":2,"endColumn":16},{"ruleId":"496","severity":1,"message":"635","line":7,"column":48,"nodeType":"498","messageId":"499","endLine":7,"endColumn":56},{"ruleId":"496","severity":1,"message":"636","line":29,"column":12,"nodeType":"498","messageId":"499","endLine":29,"endColumn":16},{"ruleId":"496","severity":1,"message":"637","line":29,"column":18,"nodeType":"498","messageId":"499","endLine":29,"endColumn":25},{"ruleId":"496","severity":1,"message":"638","line":30,"column":12,"nodeType":"498","messageId":"499","endLine":30,"endColumn":28},{"ruleId":"496","severity":1,"message":"639","line":30,"column":30,"nodeType":"498","messageId":"499","endLine":30,"endColumn":49},{"ruleId":"496","severity":1,"message":"527","line":31,"column":25,"nodeType":"498","messageId":"499","endLine":31,"endColumn":31},{"ruleId":"496","severity":1,"message":"640","line":34,"column":11,"nodeType":"498","messageId":"499","endLine":34,"endColumn":20},{"ruleId":"508","severity":1,"message":"509","line":48,"column":21,"nodeType":"510","messageId":"511","endLine":48,"endColumn":25},{"ruleId":"496","severity":1,"message":"551","line":56,"column":17,"nodeType":"498","messageId":"499","endLine":56,"endColumn":22},{"ruleId":"504","severity":1,"message":"617","line":59,"column":8,"nodeType":"506","endLine":59,"endColumn":10,"suggestions":"641"},{"ruleId":"524","severity":1,"message":"525","line":223,"column":49,"nodeType":"526","endLine":224,"endColumn":94},{"ruleId":"543","severity":1,"message":"544","line":237,"column":57,"nodeType":"526","messageId":"545","endLine":237,"endColumn":105,"fix":"642"},{"ruleId":"543","severity":1,"message":"544","line":242,"column":57,"nodeType":"526","messageId":"545","endLine":244,"endColumn":76,"fix":"643"},{"ruleId":"496","severity":1,"message":"644","line":4,"column":8,"nodeType":"498","messageId":"499","endLine":4,"endColumn":22},{"ruleId":"496","severity":1,"message":"645","line":5,"column":8,"nodeType":"498","messageId":"499","endLine":5,"endColumn":14},{"ruleId":"496","severity":1,"message":"629","line":21,"column":8,"nodeType":"498","messageId":"499","endLine":21,"endColumn":12},{"ruleId":"496","severity":1,"message":"646","line":22,"column":10,"nodeType":"498","messageId":"499","endLine":22,"endColumn":17},{"ruleId":"496","severity":1,"message":"633","line":23,"column":20,"nodeType":"498","messageId":"499","endLine":23,"endColumn":30},{"ruleId":"496","severity":1,"message":"647","line":23,"column":42,"nodeType":"498","messageId":"499","endLine":23,"endColumn":53},{"ruleId":"496","severity":1,"message":"636","line":29,"column":12,"nodeType":"498","messageId":"499","endLine":29,"endColumn":16},{"ruleId":"496","severity":1,"message":"637","line":29,"column":18,"nodeType":"498","messageId":"499","endLine":29,"endColumn":25},{"ruleId":"496","severity":1,"message":"638","line":30,"column":12,"nodeType":"498","messageId":"499","endLine":30,"endColumn":28},{"ruleId":"496","severity":1,"message":"639","line":30,"column":30,"nodeType":"498","messageId":"499","endLine":30,"endColumn":49},{"ruleId":"496","severity":1,"message":"640","line":32,"column":11,"nodeType":"498","messageId":"499","endLine":32,"endColumn":20},{"ruleId":"508","severity":1,"message":"509","line":46,"column":21,"nodeType":"510","messageId":"511","endLine":46,"endColumn":25},{"ruleId":"496","severity":1,"message":"648","line":56,"column":11,"nodeType":"498","messageId":"499","endLine":56,"endColumn":22},{"ruleId":"615","severity":1,"message":"616","line":152,"column":11,"nodeType":"526","endLine":152,"endColumn":63},{"ruleId":"543","severity":1,"message":"544","line":159,"column":53,"nodeType":"526","messageId":"545","endLine":159,"endColumn":101,"fix":"649"},{"ruleId":"543","severity":1,"message":"544","line":164,"column":53,"nodeType":"526","messageId":"545","endLine":164,"endColumn":154,"fix":"650"},{"ruleId":"496","severity":1,"message":"651","line":1,"column":8,"nodeType":"498","messageId":"499","endLine":1,"endColumn":13},{"ruleId":"496","severity":1,"message":"623","line":1,"column":16,"nodeType":"498","messageId":"499","endLine":1,"endColumn":25},{"ruleId":"496","severity":1,"message":"652","line":2,"column":8,"nodeType":"498","messageId":"499","endLine":2,"endColumn":9},{"ruleId":"496","severity":1,"message":"651","line":2,"column":8,"nodeType":"498","messageId":"499","endLine":2,"endColumn":13},"no-native-reassign",["653"],"no-negated-in-lhs",["654"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'mxnToUsd' is assigned a value but never used.","'loading' is assigned a value but never used.","'paymentID' is assigned a value but never used.","'paymentDone' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allData.address', 'allData.city', 'allData.country', 'allData.lastname', 'allData.name', and 'allData.state'. Either include them or remove the dependency array. If 'setName' needs the current value of 'allData.name', you can also switch to useReducer instead of useState and read 'allData.name' in the reducer.","ArrayExpression",["655"],"no-eval","eval can be harmful.","CallExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useState' is defined but never used.","'payments' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currencyConversor'. Either include it or remove the dependency array. If 'currencyConversor' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["656"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'logout' is assigned a value but never used.","'cryptoData' is assigned a value but never used.","'setCryptoData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["657"],"'NumberFormat' is defined but never used.","'createData' is defined but never used.","'theme' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'retrieveTransactions'. Either include it or remove the dependency array.",["658"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"659","text":"660"},{"range":"661","text":"660"},"'userInfo' is assigned a value but never used.","'tokenPrivateKey' is assigned a value but never used.","'setTokenPrivateKey' is assigned a value but never used.","'email' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.email', 'currentUser.uid', and 'history'. Either include them or remove the dependency array.",["662"],"'facing2' is assigned a value but never used.","'setFacing' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'CardHeader' is defined but never used.","'FormGroup' is defined but never used.","'Form' is defined but never used.","'Input' is defined but never used.","'logged' is assigned a value but never used.","'country' is assigned a value but never used.","'countriesAPI' is assigned a value but never used.","'statesAPI' is assigned a value but never used.","'citiesAPI' is assigned a value but never used.","'setCitiesAPI' is assigned a value but never used.","'fileFirestore' is assigned a value but never used.","'uploadValue' is assigned a value but never used.","'setUploadValue' is assigned a value but never used.","'setImage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.email', 'currentUser.emailVerified', 'currentUser.uid', 'getCountriesAPI', 'getUserData', 'history', and 'logout'. Either include them or remove the dependency array.",["663"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useEffect has a missing dependency: 'profilePictureStatus'. Either include it or remove the dependency array. If 'setHideButton' needs the current value of 'profilePictureStatus', you can also switch to useReducer instead of useState and read 'profilePictureStatus' in the reducer.",["664"],"React Hook useCallback has a missing dependency: 'setStates'. Either include it or remove the dependency array. If 'setStates' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["665"],"'useEffect' is defined but never used.","'Avatar' is defined but never used.","'useStorage' is defined but never used.","'UploadImage' is defined but never used.","'TextField' is defined but never used.","'getAuthType' is assigned a value but never used.","'credential' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.email', 'currentUser.emailVerified', 'currentUser.providerData', 'history', and 'logout'. Either include them or remove the dependency array.",["666"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'setSelected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getData' and 'uid'. Either include them or remove the dependency array.",["667"],"'history' is assigned a value but never used.","'lastPassword' is assigned a value but never used.","'setLastPassword' is assigned a value but never used.","'repeatPassword' is assigned a value but never used.","'ready' is assigned a value but never used.","'login' is assigned a value but never used.","'currentUser' is assigned a value but never used.","'verifyToken' is assigned a value but never used.","'submitRecovery' is assigned a value but never used.","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'countries' is assigned a value but never used.","'setCountries' is assigned a value but never used.","'NavLink' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'currentUser.email' and 'history'. Either include them or remove the dependency array.",["668"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Component' is defined but never used.","'ReactDOM' is defined but never used.","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","'setLogged' is assigned a value but never used.",["669"],"'Roll' is defined but never used.","'monedafinal' is defined but never used.",["670"],"'maparoad' is defined but never used.","'showArrows' is defined but never used.","'Engrane1' is defined but never used.","'setScale' is assigned a value but never used.","'team' is assigned a value but never used.","'setTeam' is assigned a value but never used.","'differencesItems' is assigned a value but never used.","'setDifferencesItems' is assigned a value but never used.","'fetchData' is assigned a value but never used.",["671"],{"range":"672","text":"660"},{"range":"673","text":"660"},"'EquipoSunshine' is defined but never used.","'Footer' is defined but never used.","'Divider' is defined but never used.","'onClickItem' is defined but never used.","'differences' is assigned a value but never used.",{"range":"674","text":"660"},{"range":"675","text":"660"},"'React' is defined but never used.","'$' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"676","fix":"677"},{"desc":"678","fix":"679"},{"desc":"680","fix":"681"},{"desc":"682","fix":"683"},[8121,8121]," rel=\"noreferrer\"",[8463,8463],{"desc":"684","fix":"685"},{"desc":"686","fix":"687"},{"desc":"688","fix":"689"},{"desc":"690","fix":"691"},{"desc":"692","fix":"693"},{"desc":"694","fix":"695"},{"desc":"696","fix":"697"},{"desc":"696","fix":"698"},{"desc":"696","fix":"699"},{"desc":"696","fix":"700"},[10308,10308],[10877,10877],[6500,6500],[6958,6958],"Update the dependencies array to be: [allData.address, allData.city, allData.country, allData.lastname, allData.name, allData.state]",{"range":"701","text":"702"},"Update the dependencies array to be: [currencyConversor]",{"range":"703","text":"704"},"Update the dependencies array to be: [currentUser, history]",{"range":"705","text":"706"},"Update the dependencies array to be: [address, retrieveTransactions]",{"range":"707","text":"708"},"Update the dependencies array to be: [currentUser.email, currentUser.uid, history]",{"range":"709","text":"710"},"Update the dependencies array to be: [currentUser.email, currentUser.emailVerified, currentUser.uid, getCountriesAPI, getUserData, history, jalaPorfavor, logout]",{"range":"711","text":"712"},"Update the dependencies array to be: [profilePictureStatus]",{"range":"713","text":"714"},"Update the dependencies array to be: [imageSrc, croppedAreaPixels, rotation, setStates]",{"range":"715","text":"716"},"Update the dependencies array to be: [currentUser.email, currentUser.emailVerified, currentUser.providerData, history, logout]",{"range":"717","text":"718"},"Update the dependencies array to be: [getData, uid]",{"range":"719","text":"720"},"Update the dependencies array to be: [currentUser.email, history]",{"range":"721","text":"722"},{"range":"723","text":"722"},{"range":"724","text":"722"},{"range":"725","text":"722"},[2052,2054],"[allData.address, allData.city, allData.country, allData.lastname, allData.name, allData.state]",[607,609],"[currencyConversor]",[2049,2062],"[currentUser, history]",[3191,3200],"[address, retrieveTransactions]",[2687,2689],"[currentUser.email, currentUser.uid, history]",[3748,3762],"[currentUser.email, currentUser.emailVerified, currentUser.uid, getCountriesAPI, getUserData, history, jalaPorfavor, logout]",[1051,1053],"[profilePictureStatus]",[1614,1653],"[imageSrc, croppedAreaPixels, rotation, setStates]",[1756,1758],"[currentUser.email, currentUser.emailVerified, currentUser.providerData, history, logout]",[4764,4766],"[getData, uid]",[1339,1341],"[currentUser.email, history]",[1215,1217],[780,782],[2413,2415]]